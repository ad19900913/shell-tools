// This JavaScript was automatically generated by
// Jayrock.JsonRpc.Web.JsonRpcProxyGenerator, MyAdmin, Version=1.0.0.1, Culture=neutral, PublicKeyToken=null
// on Tuesday, November 21, 2017 at 8:52:28 PM (Eastern Standard Time)

// Proxy version 1.0

function GmsApiStore(url)
{
    
    this["getAccounts"] = function(callback)
    {
        return call("GetAccounts", null, callback);
    }
    
    this["getAccount"] = function(sessionId, accountNumber, callback)
    {
        return call("GetAccount", {"sessionId": sessionId, "accountNumber": accountNumber }, callback);
    }
    
    this["getOrAddDevice"] = function(sessionId, value, callback)
    {
        return call("GetOrAddDevice", { "sessionId": sessionId, "value": value }, callback);
    }
    
    this["getDevice"] = function(value, callback)
    {
        return call("GetDevice", { "value": value }, callback);
    }

    this["getDeviceBySerial"] = function (sessionId, serialNumber, callback) {
        return call("GetDevice", { "sessionId": sessionId, "serialNoFilter": serialNumber }, callback);
    }

    this["getGeotabDeviceFromId"] = function(sessionId, dbId, callback)
    {
        return call("GetGeotabDeviceFromId", { "sessionId": sessionId, "dbId": dbId }, callback);
    }
    
    this["getFiles"] = function(sessionId, folderName, searchString, recentOnly, sortMode, callback)
    {
        return call("GetFiles", { "sessionId": sessionId, "folderName": folderName, "searchString": searchString, "recentOnly": recentOnly, "sortMode": sortMode }, callback);
    }
    
    this["getFolders"] = function(sessionId, callback)
    {
        return call("GetFolders", { "sessionId": sessionId } , callback);
    }
    
    this["getInternalRoles"] = function(callback)
    {
        return call("GetInternalRoles", null, callback);
    }
    
    this["getExternalRoles"] = function(callback)
    {
        return call("GetExternalRoles", null, callback);
    }
    
    this["lookupVins"] = function(vinNumbers, callback)
    {
        return call("LookupVins", { "vinNumbers": vinNumbers } , callback);
    }
    
    this["getVehicleMatches"] = function(make, model, year, callback)
    {
        return call("GetVehicleMatches", { "make": make, "model": model, "year": year  }, callback);
    }
    
    this["getDeviceResult"] = function(sessionId, serialNo, callback)
    {
        return call("GetDeviceResult", { "sessionId": sessionId, "serialNo": serialNo }, callback);
    }
        
    this["lookupLiveDeviceWithLang"] = function(sessionId, serialNumber, lang, callback)
    {
        return call("LookupLiveDeviceWithLang", { "sessionId": sessionId, "serialNumber": serialNumber, "lang": lang }, callback);
    }

    this["lookupLiveDevicesWithLang"] = function (sessionId, serialNumbers, lang, callback) {
        return call("LookupLiveDevicesWithLang", { "sessionId": sessionId, "serialNumbers": serialNumbers, "lang": lang }, callback);
    }
    
    this["logRequestWithLang"] = function (sessionId, name, company, serialNumber, odometerString, asset, comments, lang, callback)
    {
        return call("LogRequestWithLang", { "sessionId": sessionId, "name": name, "company": company, "serialNumber": serialNumber, "odometerString": odometerString, "asset": asset, "comments": comments, "lang": lang }, callback);
    }
    
    this["getInstallHistoryWithLang"] = function(sessionId, serialNumber, lang, callback)
    {
        return call("GetInstallHistoryWithLang", { "sessionId": sessionId, "serialNumber": serialNumber, "lang": lang }, callback);
    }
    
    this["getDeviceInstallResultWithLang"] = function(sessionId, id, lang, callback)
    {
        return call("GetDeviceInstallResultWithLang", { "sessionId": sessionId, "id": id, "lang": lang }, callback);
    }
    
    this["getDashboardRmas"] = function (sessionId, isAllowed, noOfItems, callback)
    {
        return call("GetDashboardRmas", { "sessionId": sessionId, "isAllowed": isAllowed, "noOfItems": noOfItems }, callback);
    }
    
    this["getRmas"] = function(sessionId, account, rmaIdFilter, serialNoFilter, resellerRefFilter, includeIncompleteRmas, includeCompletedRmas, callback)
    {
        return call("GetRmas", { "sessionId": sessionId, "account": account, "rmaIdFilter": rmaIdFilter, "serialNoFilter": serialNoFilter, "resellerRefFilter": resellerRefFilter, "includeIncompleteRmas": includeIncompleteRmas, "includeCompletedRmas": includeCompletedRmas }, callback);
    }
    
    this["getRmasWithLang"] = function (sessionId, account, rmaIdFilter, serialNoFilter, resellerRefFilter, includeIncompleteRmas, includeCompletedRmas, lang, callback)
    {
        return call("GetRmasWithLang", { "sessionId": sessionId, "account": account, "rmaIdFilter": rmaIdFilter, "serialNoFilter": serialNoFilter, "resellerRefFilter": resellerRefFilter, "includeIncompleteRmas": includeIncompleteRmas, "includeCompletedRmas": includeCompletedRmas, "lang": lang   }, callback);
    }
    
    this["getRmaRequests"] = function (sessionId, account, unassignedOnly, serialNo, includeCancelled, callback)
    {
        return call("GetRmaRequests", { "sessionId": sessionId, "account": account, "unassignedOnly": unassignedOnly, "serialNo": serialNo, "includeCancelled": includeCancelled }, callback);
    }
    
    this["userCompanyAdmin"] = function(sessionId, jsonData, callback)
    {
        return call("UserCompanyAdmin", { "sessionId": sessionId, "jsonData": jsonData }, callback);
    }
    
    this["getUserCompanies"] = function(sessionId, account, companyNameFilter, activeOnly, includeUserContacts, callback)
    {
        return call("GetUserCompanies", { "sessionId": sessionId, "account": account, "companyNameFilter": companyNameFilter, "activeOnly": activeOnly, "includeUserContacts": includeUserContacts }, callback);
    }
    
    this["userContactAdmin"] = function(sessionId, jsonData, callback)
    {
        return call("UserContactAdmin", { "sessionId": sessionId, "jsonData": jsonData } , callback);
    }
    
    this["getRma"] = function(sessionId, rmaNumber, account, callback)
    {
        return call("GetRma", { "sessionId": sessionId, "rmaNumber": rmaNumber, "account": account } , callback);
    }
    
    this["getUsedPurchaseOrderForAccount"] = function(sessionId, account, dateFrom, dateTo, completedOnly, callback)
    {
        return call("GetUsedPurchaseOrderForAccount", { "sessionId": sessionId, "account": account, "dateFrom": dateFrom, "dateTo": dateTo, "completedOnly": completedOnly } , callback);
    }
    
    this["getUsedPurchaseOrders"] = function (sessionId, accounts, dateFromString, dateToString, completedOnly, callback)
    {
        return call("GetUsedPurchaseOrders", { "sessionId": sessionId, "accounts": accounts, "dateFromString": dateFromString, "dateToString": dateToString, "completedOnly": completedOnly } , callback);
    }
    
    this["isRatePlanValid"] = function (sessionId, accountId, rateCode, validationType, callback)
    {
        return call("IsRatePlanValid", { "sessionId": sessionId, "accountId": accountId, "rateCode": rateCode, "validationType": validationType}, callback);
    }
    
    this["getErpEntry"] = function(sessionId, documentNo, callback)
    {
        return call("GetErpEntry", { "sessionId": sessionId, "documentNo": documentNo }, callback);
    }
    
    this["getOnlineOrders"] = function(sessionId, account, purchaseOrderNo, resellerReference, orderNo, dateFromFilter, dateToFilter, planningOrdersOnly, soldToCustomerId, callback)
    {
        return call("GetOnlineOrders", { "sessionId": sessionId, "account": account, "purchaseOrderNo": purchaseOrderNo, "resellerReference": resellerReference, "orderNo": orderNo, "dateFromFilter": dateFromFilter, "dateToFilter": dateToFilter, "planningOrdersOnly": planningOrdersOnly, "soldToCustomerId": soldToCustomerId }, callback);
    }
    
    this["getOnlineOrder"] = function(sessionId, account, purchaseOrderNo, resellerReference, orderNo, callback)
    {
        return call("GetOnlineOrder", { "sessionId": sessionId, "account": account, "purchaseOrderNo": purchaseOrderNo, "resellerReference": resellerReference, "orderNo": orderNo }, callback);
    }
    
    this["getOnlineOrderFromId"] = function(sessionId, orderHeaderId, callback)
    {
        return call("GetOnlineOrderFromId", { "sessionId": sessionId, "orderHeaderId": orderHeaderId }, callback);
    }
    
    this["getOrderItemFromId"] = function(sessionId, orderItemId, callback)
    {
        return call("GetOrderItemFromId", { "sessionId": sessionId, "orderItemId": orderItemId }, callback);
    }
    
    this["orderItemAdmin"] = function(sessionid, orderItem, forDelete, callback)
    {
        return call("OrderItemAdmin", { "sessionId": sessionId, "orderItem": orderItem, "forDelete": forDelete }, callback);
    }
    
    this["getAdditionalFormFieldsForAccount"] = function (sessionId, orderHeaderId, account, callback)
    {
        return call("GetAdditionalFormFieldsForAccount", {
            "sessionId": sessionId, "orderHeaderId": orderHeaderId, "accounts": accounts } , callback);
    }
    
    this["orderAdmin"] = function(sessionId, orderHeaderId, purchaseOrderNo, resellerReference, rateCode, comments, internalComments, shipIdVal, onHold, shipFeeCode, devicePlanId, additionalFields, callback)
    {
        return call("OrderAdmin", { "sessionId": sessionId, "orderHeaderId": orderHeaderId, "purchaseOrderNo": purchaseOrderNo, "resellerReference": resellerReference, "rateCode": rateCode, "comments": comments, "internalComments": internalComments, "shipIdVal": shipIdVal, "onHold": onHold, "shipFeeCode": shipFeeCode, "devicePlanId": devicePlanId, "additionalFields": additionalFields }, callback);
    }
    
    this["getSimInfo"] = function(sessionId, sim, callback)
    {
        return call("GetSimInfo", { "sessionId": sessionId, "sim": sim }, callback);
    }
    
    this["getSimInfos"] = function(sessionId, sims, callback)
    {
        return call("GetSimInfos", { "sessionId": sessionId, "sims": sims } , callback);
    }
    
    this["getDashboardOrders"] = function(sessionId, noOfItems, callback)
    {
        return call("GetDashboardOrders", { "sessionId": sessionId, "noOfItems": noOfItems }, callback);
    }
    
    this["getProducts"] = function(sessionId, forAccount, productCodeFilter, productCategoryFilter, callback)
    {
        return call("GetProducts", { "sessionId": sessionId, "forAccount": forAccount, "productCodeFilter": productCodeFilter, "productCategoryFilter": productCategoryFilter }, callback);
    }
    
    this["getCurrencyRate"] = function(sessionId, currency, effectiveFrom, callback)
    {
        return call("GetCurrencyRate", { "sessionId": sessionId, "currency": currency, "effectiveFrom": effectiveFrom } , callback);
    }
    
    this["getAllCurrentCurrencyRates"] = function(sessionId, callback)
    {
        return call("getAllCurrentCurrencyRates", {"sessionId": sessionId}, callback);
    }
    
    this["getProductPricing"] = function(sessionId, productCode, promoCode, asAtUtc, accountIdFilter, pricingTypeId, callback)
    {
        return call("GetProductPricing", { "sessionId": sessionId, "productCode": productCode, "promoCode": promoCode, "asAtUtc": asAtUtc, "accountIdFilter": accountIdFilter, "pricingTypeId": pricingTypeId }, callback);
    }
    
    this["getProductPricings"] = function(sessionId, productCode, promoCode, accountIdFilter, pricingType, exactMatch, callback)
    {
        return call("GetProductPricings", { "sessionId": sessionId, "productCode": productCode, "promoCode": promoCode, "accountIdFilter": accountIdFilter, "pricingType": pricingType, "exactMatch": exactMatch }, callback);
    }
    
    this["getProductCategories"] = function(sessionId, callback)
    {
        return call("GetProductCategories", {"sessionId": sessionId} , callback);
    }
    
    this["getEventCategories"] = function(sessionId, includeAllOption, callback)
    {
        return call("GetEventCategories", { "sessionId": sessionId, "includeAllOption": includeAllOption } , callback);
    }
    
    this["getEventsFiltered"] = function(sessionId, categoryIdValue, dateFromUtc, dateToUtc, callback)
    {
        return call("GetEventsFiltered", { "sessionId": sessionId, "categoryIdValue": categoryIdValue, "dateFromUtc": dateFromUtc, "dateToUtc": dateToUtc }, callback);
    }
    
    this["getDashboardEvents"] = function(sessionId, userAllowed, noOfEvents, callback)
    {
        return call("GetDashboardEvents", { "sessionId": sessionId, "userAllowed": userAllowed, "noOfEvents": noOfEvents }, callback);
    }
    
    this["getActiveAlerts"] = function(sessionId, callback)
    {
        return call("GetActiveAlerts", { "sessionId": sessionId }, callback);
    }
    
    this["getAlerts"] = function(sessionId, categoryIdFilter, dateFromUtc, includeExpired, callback)
    {
        return call("GetAlerts", { "sessionId": sessionId, "categoryIdFilter": categoryIdFilter, "dateFromUtc": dateFromUtc, "includeExpired": includeExpired }, callback);
    }
    
    this["getAlertCategories"] = function(sessionId, callback)
    {
        return call("GetAlertCategories", { "sessionId": sessionId }, callback);
    }
    
    this["getRatePlanTypes"] = function(sessionId, callback)
    {
        return call("GetRatePlanTypes", { "sessionId": sessionId }, callback);
    }
    
    this["getErpReferencesForAccount"] = function(sessionId, account, callback)
    {
        return call("GetErpReferencesForAccount", { "sessionId": sessionId, "account": account } , callback);
    }
    
    this["getShippingReferences"] = function(sessionId, accountId, orderNumber, shippingReference, poNumber, callback)
    {
        return call("GetShippingReferences", { "sessionId": sessionId, "accountId": accountId, "orderNumber": orderNumber, "shippingReference": shippingReference, "poNumber": poNumber  }, callback);
    }
    
    this["getDeviceContracts"] = function(sessionId, account, serialNos, poFilter, userCompanyIdZeroForUnassigned, devicePlanIdFilterZeroForUnassigned, commentsFilter, includeConnectInfo, showShelfStockOnly, showNoDatabaseOnly, callback)
    {
        return call("GetDeviceContracts", { "sessionId": sessionId, "account": account, "serialNos": poFilter, "userCompanyIdZeroForUnassigned": userCompanyIdZeroForUnassigned, "devicePlanIdFilterZeroForUnassigned": devicePlanIdFilterZeroForUnassigned, "commentsFilter": commentsFilter, "includeConnectInfo": includeConnectInfo, "showShelfStockOnly": showShelfStockOnly, "showNoDatabaseOnly": showNoDatabaseOnly }, callback);
    }
    
    this["getDeviceContractsWithSessionId"] = function(sessionId, account, serialNos, poFilter, userCompanyIdZeroForUnassigned, devicePlanIdFilterZeroForUnassigned, commentsFilter, includeConnectInfo, showShelfStockOnly, showNoDatabaseOnly, callback)
    {
        return call("GetDeviceContractsWithSessionId", { "sessionId": sessionId, "account": account, "serialNos": serialNos, "poFilter": poFilter, "userCompanyIdZeroForUnassigned": userCompanyIdZeroForUnassigned, "devicePlanIdFilterZeroForUnassigned": devicePlanIdFilterZeroForUnassigned, "commentsFilter": commentsFilter, "includeConnectInfo": includeConnectInfo, "showShelfStockOnly": showShelfStockOnly, "showNoDatabaseOnly": showNoDatabaseOnly }, callback);
    }
    
    this["WriteToLangLog"] = function(lang, line, exists, callback)
    {
        return call("WriteToLangLog", { "lang": lang, "line": line, "exists": exists}, callback);
    }
    
    this["getActiveDeviceTerminationsBySerialNos"] = function(sessionId, serialNos, callback)
    {
        return call("GetActiveDeviceTerminationsBySerialNos", { "sessionId": sessionId, "serialNos": serialNos }, callback);
    }
    
    this["deviceContractRequestRemovePending"] = function(sessionId, deviceContractIdVals, callback)
    {
        return call("DeviceContractRequestRemovePendingAsync", { "sessionId": sessionId, "deviceContractIdVals": deviceContractIdVals }, callback);
    }
    
    this["getDeviceContractRequests"] = function(sessionId, deviceContractFilter, accountIdFilter, serialNos, ratePlanTypeIdFilter, includeForActivation, includeForDeactivation, pendingOnly, callback)
    {
        return call("GetDeviceContractRequests", { "sessionId": sessionId, "deviceContractFilter": deviceContractFilter, "accountIdFilter": accountIdFilter, "serialNos": serialNos, "ratePlanTypeIdFilter": ratePlanTypeIdFilter, "includeForActivation": includeForActivation, "includeForDeactivation": includeForDeactivation, "pendingOnly": pendingOnly }, callback);
    }
    
    this["deviceContractAdmin"] = function(sessionId, deviceContractIdVals, customerOption, commentsOption, rateCodeOption, activeTrackingOption, callback)
    {
        return call("DeviceContractAdmin", { "sessionId": sessionId, "deviceContractIdVals": deviceContractIdVals, "customerOption": customerOption, "commentsOption": commentsOption, "rateCodeOption": rateCodeOption, "activeTrackingOption": activeTrackingOption }, callback);
    }
    
    this["targetAdmin"] = function(targetDetails, forRemoval, currentUserName, callback)
    {
        return call("TargetAdmin", { "targetDetails": targetDetails, "forRemoval": forRemoval, "currentUserName": currentUserName } , callback);
    }
    
    this["sendPasswordRecoveryEmail"] = function(username, callback)
    {
        return call("SendPasswordRecoveryEmail", { "username": username }, callback);
    }
    
    this["Authenticate"] = function(username, password, database, callback)
    {
        return call("Authenticate", { "username": username, "password": password, "database": database }, callback);
    }
    
    /* Returns an array of method names implemented by this service. */
    
    this["system.listMethods"] = function(callback)
    {
        return call("system.listMethods", [ ], callback);
    }
    
    /* Returns the version server implementation using the major, minor, build and revision format. */
    
    this["system.version"] = function(callback)
    {
        return call("system.version", [ ], callback);
    }
    
    /* Returns a summary about the server implementation for display purposes. */
    
    this["system.about"] = function(callback)
    {
        return call("system.about", [ ], callback);
    }

    var isDebug = window.location.host == '127.0.0.1' || window.location.host == 'localhost';

    var url = typeof (url) === 'string' ? url : getServerAPI() + '/Data/GmsApiStore.ashx';
    var self = this;
    var nextId = 0;
    
    function getServerAPI() {
        var url;
        if (isDebug) {
            url = window.location.protocol + '//' + window.location.hostname + ':' + window.location.port;
        } else {
            url = window.location.protocol + "//" + window.location.host;
        }
        return url;
    }

    function call(method, params, callback)
    {
        var request = { id : nextId++, method : method, params : params };
        return callback == null ? 
            callSync(method, request) : callAsync(method, request, callback);
    }

    function callSync(method, request)
    {
        var http = newHTTP();
        http.open('POST', url, false, self.httpUserName, self.httpPassword);
        setupHeaders(http, method);
        http.send(JSON.stringify(request));
        if (http.status != 200)
            throw { message : http.status + ' ' + http.statusText, toString : function() { return message; } };
        var response = JSON.parse(http.responseText);
        if (response.error != null) throw response.error;
        return response.result;
    }

    function callAsync(method, request, callback)
    {
        var http = newHTTP();
        http.open('POST', url, true, self.httpUserName, self.httpPassword);
        setupHeaders(http, method);
        http.onreadystatechange = function() { http_onreadystatechange(http, callback); }
        http.send(JSON.stringify(request));
        return request.id;
    }

    function setupHeaders(http, method)
    {
        http.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
        http.setRequestHeader('X-JSON-RPC', method);
    }

    function http_onreadystatechange(sender, callback)
    {
        if (sender.readyState == /* complete */ 4)
        {
            /*var response = sender.status == 200 ? JSON.eval(sender.responseText) : {};*/
            var response = sender.status == 200 ? JSON.parse(sender.responseText) : {};
            response.xmlHTTP = sender;
            callback(response);
        }
    }

    function newHTTP()
    {
        if (typeof(window) != 'undefined' && window.XMLHttpRequest)
            return new XMLHttpRequest(); /* IE7, Safari 1.2, Mozilla 1.0/Firefox, and Netscape 7 */
        else
            return new ActiveXObject('Microsoft.XMLHTTP'); /* WSH and IE 5 to IE 6 */
    }
}

GmsApiStore.rpcMethods = ["getAccounts", "getAccount", "getOrAddDevice", "getDevice", "getGeotabDeviceFromId", "getFiles", "getFolders", "getInternalRoles", "getExternalRoles", "getVehicleMatches", "getDeviceResult", "lookupLiveDeviceWithLang", "lookupLiveDevicesWithLang", "logRequestWithLang", "getInstallHistoryWithLang", "getDeviceInstallResultWithLang", "getDashboardRmas", "getRmas", "getRmasWithLang", "getRmaRequests", "userCompanyAdmin", "getUserCompanies", "userContactAdmin", "getRma", "getUsedPurchaseOrderForAccount", "getUsedPurchaseOrders", "isRatePlanValid", "getErpEntry", "getOnlineOrders", "getOnlineOrder", "getOnlineOrderFromId", "getOrderItemFromId", "orderItemAdmin", "getAdditionalFormFieldsForAccount", "orderAdmin", "GetSimInfo", "GetSimInfos", "getDashboardOrders", "getProducts", "getCurrencyRate", "getAllCurrentCurrencyRates", "getProductPricing", "getProductPricings","GetProductCategories","getEventCategories","getEventsFiltered","getDashboardEvents","getActiveAlerts","getAlerts","getAlertCategories","getRatePlanTypes","getErpReferencesForAccount","getShippingReferences","getDeviceContracts","getDeviceContractsWithSessionId","WriteToLangLog","getActiveDeviceTerminationsBySerialNos","deviceContractRequestRemovePending","getDeviceContractRequests","deviceContractAdmin","targetAdmin","sendPasswordRecoveryEmail","Authenticate","system.listMethods","system.version","system.about"];
