/// <reference path="../../../Checkmate/MainTrunk/Checkmate/web/js/CustomFunctions.js" />

// MyAdmin Common Tools
var MyTools = {
    DateTime: {
        FormatPatterns: {
            shortDate: "yyyy-MM-dd", longDate: "dddd, MMMM dd, yyyy", shortTime: "h:mm tt", longTime: "h:mm:ss tt", fullDateTime: "MMMM dd, yyyy h:mm:ss tt",
            sortableDateTime: "yyyy-MM-ddTHH:mm:ss", universalSortableDateTime: "yyyy-MM-dd HH:mm:ssZ", utcShortDateTime: "yyyy-MM-dd h:mm:ss tt UTC",
            utcLongDateTime: "MMMM dd, yyyy h:mm:ss tt UTC", monthDay: "MMMM dd", yearMonth: "MMMM, yyyy", shortDateTime: "yyyy-MM-dd HH:mm:ss"
        },
        isValidDate: function (val) {
            return (Object.prototype.toString.call(val) === "[object Date]" && !isNaN(val.getTime()));
        },
        DbDateTo: {
            shortDateString: function (dbDate) {
                if (!dbDate) {
                    return '';
                }
                return MyTools.DateTime.toDate(dbDate).toString(MyTools.DateTime.FormatPatterns.shortDate);
            },
            shortDateTimeString: function (dbDate) {
                if (!dbDate) {
                    return '';
                }
                return MyTools.DateTime.toDate(dbDate).toString(MyTools.DateTime.FormatPatterns.shortDateTime);
            },
            shortTimeString: function (dbDate) {
                if (!dbDate) {
                    return '';
                }
                return MyTools.DateTime.toDate(dbDate).toString(MyTools.DateTime.FormatPatterns.shortTime);
            }
        },
        DateTo: {
            shortDateString: function (date) {
                if (!date) {
                    return '';
                }
                return date.toString(MyTools.DateTime.FormatPatterns.shortDate);
            },
            shortDateTimeString: function (date) {
                if (!date) {
                    return '';
                }
                return date.toString(MyTools.DateTime.FormatPatterns.shortDateTime);
            },
            shortTimeString: function (date) {
                if (!date) {
                    return '';
                }
                return self.getTranslationStore().translateTime(date, "short").toString();
            },
            fullTimeString: function (date) {
                if (!date) {
                    return '';
                }
                return self.getTranslationStore().translateTime(date, "full").toString();
            },
            longDateString: function (date) {
                if (!date) {
                    return '';
                }
                return self.getTranslationStore().translateDate(date, "full").toString();
            },
            longDateTimeString: function (date) {
                if (!date) {
                    return '';
                }
                return self.getTranslationStore().translateDateTime(date, "long").toString();
            },
            utcShortDateTime: function (date) {
                if (!date) {
                    return null;
                }
                var dt = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                return dt.toString(MyTools.DateTime.FormatPatterns.utcShortDateTime);
            },
            utcLongDateTime: function (date) {
                if (!date) {
                    return null;
                }
                var dt = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                var transDate = self.getTranslationStore().translateDateTime(date, "long").toString();
                return transDate.toString() + " UTC";
            },
            monthDay: function (date) {
                if (!date) {
                    return '';
                }
                return self.getTranslationStore().translateDateTimeSkeleton(date, "MMMMd");
            },
            yearMonth: function (date) {
                if (!date) {
                    return '';
                }
                return self.getTranslationStore().translateDateTimeSkeleton(date, "yMMMM");
            }
        },
        Functions: {
            dateDiffInMinutes: function (date1, date2) {
                if (date2 == null) {
                    date2 = MyTools.DateTime.now();
                }
                if (!MyTools.DateTime.isValidDate(date1) || !MyTools.DateTime.isValidDate(date2)) {
                    return 0;
                }
                return (date2 - date1) / 1000 / 60;
            },
            datePeriodClass: function (date1, date2, forGrid, goodThresholdInMinsDefault60) {
                if (date1 == null || MyTools.stringIsEmpty(date1)) {
                    return forGrid ? 'bad' : 'myBad';
                }
                if (date2 == null) {
                    date2 = MyTools.DateTime.now();
                }
                if (!goodThresholdInMinsDefault60) {
                    goodThresholdInMinsDefault60 = 60;
                }
                var diffInMins = MyTools.DateTime.Functions.dateDiffInMinutes(date1, date2);
                if (diffInMins <= goodThresholdInMinsDefault60) {
                    return forGrid ? 'good' : 'myGood';
                }
                return forGrid ? 'warning' : 'myWarning';
            },
            datePeriodString: function (date1, date2) {
                var translationStore = self.getTranslationStore();
                if (date1 == null || MyTools.stringIsEmpty(date1)) {
                    return translationStore.getString("No Data");
                }
                if (date2 == null) {
                    date2 = MyTools.DateTime.now();
                }
                var diffInMins = MyTools.DateTime.Functions.dateDiffInMinutes(date1, date2);
                if (diffInMins <= 0) {
                    // to handle time sync issues
                    return translationStore.getFormattedString("{0} minute(s) ago", ["0"]);
                }
                if (diffInMins < 60) {
                    return translationStore.getFormattedString("{0} minute(s) ago", [Math.round(diffInMins).toString()]);
                    //return Math.round(diffInMins).toString() + " " + translationStore.getString("minute(s) ago");
                }
                var diffInHours = diffInMins / 60;
                if (diffInHours < 36) {
                    return translationStore.getFormattedString("{0} hour(s) ago", [Math.round(diffInHours).toString()]);
                    //return Math.round(diffInHours).toString() + " " + translationStore.getString("hour(s) ago");
                }
                var diffInDays = diffInHours / 24;
                return translationStore.getFormattedString("{0} day(s) ago", [Math.round(diffInDays).toString()]);
                //return Math.round(diffInDays).toString() + " " + translationStore.getString("day(s) ago");
            },
            addHours: function (date, hours) {
                var newDate = date.clone();
                var newDate2 = newDate.setHours(date.getHours() + hours);
                return new Date(newDate2);
            },
            isLeapYear: function (year) {
                return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
            },
            getDaysInMonth: function (year, month) {
                return [31, (MyTools.DateTime.Functions.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
            },
            addMonths: function (date, value) {
                var d = new Date(date),
                    n = date.getDate();
                d.setDate(1);
                d.setMonth(d.getMonth() + value);
                d.setDate(Math.min(n, MyTools.DateTime.Functions.getDaysInMonth(d.getFullYear(), d.getMonth())));
                return d;
            }
        },
        toDate: function (dateObject, isUtc) {
            if (isUtc == null || isUtc === "undefined") {
                isUtc = true;
            }
            function _parseDate(str, isUtc) {
                var arr = str.split(/[\\\/\.\:\- TZ]/gi);
                try {
                    var d = new Date();
                    if (isUtc) {
                        d.setTime(Date.UTC(Number(arr[0]), Number(arr[1]) - 1, Number(arr[2]), Number(arr[3]), Number(arr[4]), Number(arr[5])));
                    }
                    else {
                        d = new Date(Number(arr[0]), Number(arr[1]) - 1, Number(arr[2]), Number(arr[3]), Number(arr[4]), Number(arr[5]));
                    }
                    if (!MyTools.DateTime.isValidDate(d)) {
                        d = new Date(str);
                    }
                    return d;
                }
                catch (ex) {
                    // try a simple parse
                    return new Date(str);
                }
            }

            if (!dateObject) {
                return null;
            }
            if (typeof dateObject === 'Date') {
                return dateObject;
            }
            if (typeof dateObject === 'string') {
                var thisDate = _parseDate(dateObject, isUtc);
                if (thisDate && !isNaN(thisDate)) {
                    return thisDate;
                }
                return Date.parse(dateObject);
            }
            return _parseDate(dateObject.toString(), isUtc);
        },
        startOfMonth: function () {
            var myDate = new Date();
            myDate.setSeconds(0);
            myDate.setMinutes(0);
            myDate.setHours(0);
            myDate.setDate(1);
            return myDate;
        },
        startOfToday: function () {
            var now = new Date();
            var year = now.getYear();
            // IE8 hack
            if (year < 2000) {
                year += 1900;
            }
            return new Date(year, now.getMonth(), now.getDate(), 0, 0, 0);
        },
        endOfToday: function () {
            var now = new Date();
            // IE8 hack
            var year = now.getYear();
            if (year < 2000) {
                year += 1900;
            }
            var dt = new Date(year, now.getMonth(), now.getDate(), 0, 0, 0);
            return new Date(dt.setDate(dt.getDate() + 1));
        },
        now: function () {
            return new Date();
        },
        maxDate: function () {
            return MyTools.DateTime.toDate('2050-01-01 00:00:00', false);
        },
        minDate: function () {
            return MyTools.DateTime.toDate('1986-01-01 00:00:00', false);
        },
        dayOfWeek: function (dayId) {
            if (dayId == 0) {
                return 'Sunday';
            }
            else if (dayId == 1) {
                return 'Monday';
            }
            else if (dayId == 2) {
                return 'Tuesday';
            }
            else if (dayId == 3) {
                return 'Wednesday';
            }
            else if (dayId == 4) {
                return 'Thursday';
            }
            else if (dayId == 5) {
                return 'Friday';
            }
            else if (dayId == 6) {
                return 'Saturday';
            }
            return 'Unknown';
        },
        Ui: {
            getStartDateFromSelect: function ($select) {
                return MyTools.DateTime.startOfMonth().addMonths(parseInt(-$select.val()));
            },
            getEndDateFromSelect: function ($select) {
                return MyTools.DateTime.Ui.getStartDateFromSelect($select).addMonths(1).addSeconds(-1);
            },
            loadMonthsToSelect: function ($select, monthsToGoBack, defaultIndexZeroIndex, callback) {
                var myDate = MyTools.DateTime.startOfMonth();
                myDate.addMonths(defaultIndexZeroIndex);

                var selectVal = defaultIndexZeroIndex * -1;
                var html = [];
                for (var i = 0; i < monthsToGoBack; i++) {
                    html.push('<option value="' + (i - defaultIndexZeroIndex) + '">' + MyTools.DateTime.DateTo.yearMonth(myDate) + '</option>');
                    myDate.addMonths(-1);
                }
                $select.html(html.join(''));
                $select.val(selectVal);
                if (callback) {
                    callback();
                }
            }
        }
    },
    Tables: {
        getRowCount: function ($table) {
            return $table.jqGrid('getGridParam', 'reccount');
        },
        getSelectedRowCount: function ($table) {
            return $table.jqGrid('getGridParam', 'selarrrow').length;
        },
        getSelectedRowId: function ($table) {
            return $table.getGridParam("selrow");
        },
        getSelectedRowIds: function ($table) {
            var arrSource = $table.getGridParam("selarrrow"),
                newArr = [];
            if (!arrSource || arrSource.length === 0) {
                return null;
            }
            for (var i = 0; i < arrSource.length; i++) {
                var exists = false;
                for (var j = 0; j < newArr.length; j++) {
                    if (arrSource[i] == newArr[j]) {
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    newArr.push(arrSource[i]);
                }
            }
            return newArr;
        },
        getSelectedRowData: function ($table) {
            var myRow = MyTools.Tables.getSelectedRowId($table);
            if (!myRow || myRow.length == 0) {
                return null;
            }
            return $table.jqGrid('getRowData', myRow);
        },
        extractValuesFromTable: function ($table, fieldName) {
            var myRows = MyTools.Tables.getSelectedRowIds($table),
                sns = [];
            if (!myRows || myRows.length == 0) {
                return null;
            }
            for (var i = 0; i < myRows.length; i++) {
                sns.push($table.jqGrid('getRowData', myRows[i])[fieldName]);
            }
            return sns;
        },
        extractFullDataFromTable: function ($table) {
            var myRows = MyTools.Tables.getSelectedRowIds($table),
                data = [];
            if (!myRows || myRows.length == 0) {
                return null;
            }
            for (var i = 0; i < myRows.length; i++) {
                data.push($table.jqGrid('getRowData', myRows[i]));
            }
            return data;
        },
        dateColumnFormat: {
            srcformat: 'Y-m-d H:i:sZ', newformat: "Y-m-d"
        },
        currencyFormatUsd: {
            decimalSeparator: ".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "$"
        },
        numberFormatInt: {
            thousandsSeparator: ",", decimalPlaces: 0, defaultValue: ''
        }
    },
    UserContacts: {
        getFormattedUserContact: function (userContact) {
            if (!userContact) {
                return '[Invalid]';
            }
            return userContact.contactName + ' c/o ' + userContact.userCompany.name + '\r\n' + userContact.address;
        },
        getFormattedBoxUserContact: function (userContact) {
            if (!userContact) {
                return '[Invalid]';
            }
            var resellerCustomerId = userContact.resellerCustomerId ? userContact.resellerCustomerId + '\r\n' : '';
            return userContact.contactName + '\r\n' + userContact.userCompany.name + '\r\n' + resellerCustomerId + userContact['boxAddress'];
        },
        loadCustomersToList: function (user, userStore, $customerList, account, activeOnly, includeUserContacts, idToSet, onCompletion) {
            userStore.activeStore()['getUserCompanies'](userStore.sessionId, account, '', activeOnly, includeUserContacts, function (results) {
                var html = [];
                var translationStore = userStore.getTranslationStore();
                html.push('<option value="-1">[' + translationStore.getString('All Customers') + ']</option>');
                html.push('<option value="0">[' + translationStore.getString('Unassigned Customers') + ']</option>');
                var showAccountNo = !account;
                if (results.result && results.result.length > 0) {
                    for (var i = 0; i < results.result.length; i++) {
                        var value = results.result[i];
                        if (value.active) {
                            var accountPrefix = (showAccountNo ? value.account.accountId + ': ' : '');
                            if (includeUserContacts) {
                                if (value['userContacts'] && value['userContacts'].length > 0) {
                                    for (var j = 0; j < value['userContacts'].length; j++) {
                                        var userContact = value['userContacts'][j];
                                        var contactDisplayName = accountPrefix + value.name + ' (' + userContact.contactName + ', ' + userContact.city + ', ' + userContact.state + ')';
                                        html.push('<option value="' + userContact.id + '">' + contactDisplayName + '</option>');
                                    }
                                }
                            }
                            else {
                                html.push('<option value="' + value.id + '">' + accountPrefix + value.name + '</option>');
                            }
                        }
                    }
                }
                $customerList.html(html.join(''));
                if (idToSet && idToSet.length > 0) {
                    $customerList.val(idToSet);
                }
                if (onCompletion) {
                    onCompletion();
                }
            });
        },
        getCountries: function (onComplete) {
            gmsApiCall({
                method: "GetCountries",
                params: {

                },
                success: function (result) {
                    if (onComplete) {
                        onComplete(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        getStates: function (countryId, onComplete) {
            gmsApiCall({
                method: "GetStates",
                params: {
                    'countryId': parseInt(countryId)
                },
                success: function (result) {
                    if (onComplete) {
                        onComplete(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        }
    },
    Dialogs: {
        Common: {
            salesReturnReview: function ($owner, account, approvedItems, requestItems, onAccept, onDecline) {
                var translationStore = self.getTranslationStore();
                // Clear old form, if any
                function loadInputForm() {
                    // create new form html
                    var html = [];
                    html.push('<div id="salesReturn_reviewDialog">');
                    html.push('<span id="salesReturn_userContainer"></span><ul id="salesReturn_deviceList" class="tableGrid gridLines threeColumn shadow" style="height: 200px;">');
                    html.push('<li class="header">' + translationStore.getString('Item') + '</li>');
                    html.push('<li class="header">' + translationStore.getString('Quantity') + '</li>');
                    html.push('<li class="header">' + translationStore.getString('Approved') + '</li>');
                    for (var i = 0; i < requestItems.length; i++) {
                        html.push('<li>' + requestItems[i].sn + '</li>');
                        html.push('<li>' + requestItems[i].quantity + '</li>');
                        var myClass = requestItems[i].approved ? 'myGood' : 'myBad';
                        html.push('<li><label class="' + myClass + '">' + (requestItems[i].approved ? 'Yes' : 'No') + '</label></li>');
                    }
                    html.push('</ul>');
                    html.push('</div>');
                    $owner.append(html.join(''));
                    var $dialog = $owner.find('#salesReturn_reviewDialog');
                    $dialog['dialog']({
                        title: translationStore.getString('Sales Return Review'),
                        width: 700,
                        height: 350,
                        modal: true,
                        close: function () {
                            $(this).detach();
                        },
                        buttons: {
                            Accept: function () {
                                if (onAccept) {
                                    onAccept();
                                }
                                $(this)['dialog']('close');
                            },
                            Decline: function () {
                                if (onDecline) {
                                    onDecline();
                                }
                                $(this)['dialog']('close');
                            }
                        }
                    }).show();
                }

                if ($owner.find('#salesReturn_reviewDialog').dialog('isOpen').length == 0) {
                    loadInputForm();
                }
                return this;
            },
            rmaCapture: function ($owner, userStore, account, skuList, rmaRequestType, onInput, onCancel) {
                var translationStore = self.getTranslationStore();
                var products = skuList;
                function loadInputForm() {
                    // Clear old form, if any
                    var devicesList = [];
                    $('#rmaCapture_itemInput').detach();
                    var h = [];
                    h.push('<div id="rmaCapture_itemInput">' +
                        '<ul class="tableGrid twoColumn shadow">' +
                        '<li class="header asterisk">' + translationStore.getString('Product Type') + ':</li><li><select id="rmasRequest_productTypeList">' +
                        '<option value="Device" selected>' + translationStore.getString('Device') + '</option>' +
                        '<option value="Harness">' + translationStore.getString('Harness') + '</option>' +
                        '<option value="IOX">IOX</option>' +
                        '<option value="Other">' + translationStore.getString('Other') + '</option>' +
                        '</select></li>' +
                        '<span id="rmasRequest_serialNumberSpan">' +
                        '<li class="header asterisk">' + translationStore.getString('Serial Number') + ':</li><li><input id="rmasRequest_serialNumber" type="text"/></li>' +
                        '</span>' +
                        '<li class="header asterisk">' + translationStore.getString('Quantity') + ':</li><li><input id="rmasRequest_quantityBox" class="required integer" type="text"' + '" title="' + translationStore.getString('Enter a Quantity') + '" value = "1" readonly/></li>' +
                        '<li class="header asterisk">' + translationStore.getString('Product Code / SKU') + ':</li><li><input id="rmasRequest_SKUBox" type="text"' + '" title="' + translationStore.getString('Enter the SKU') + '" readonly/></li>' +
                        '<li class="header">&nbsp;</li><li>&nbsp;</li>' +
                        '</ul>' +
                        '</div>'
                    );

                    $owner.append(h.join(''));
                    var $dialog = $owner.find('#rmaCapture_itemInput');

                    var $sku = $owner.find('input[id = rmasRequest_SKUBox]');

                    //populate with list of SKUs available

                    function validateSKU() {
                        var isValid = validateFields($dialog);
                        if (isValid && jQuery.inArray(document.getElementById('rmasRequest_SKUBox').value, skuList) !== -1) {
                            $('#enterRmaInformation_addButton').button('enable');
                        } else {
                            $('#enterRmaInformation_addButton').button('disable');
                        }
                    }

                    $sku.autocomplete({
                        source: skuList,
                        minLength: 1,
                        appendTo: $dialog,
                        select: function (event, ui) {
                            $sku.val(ui.item.value);
                            validateSKU();
                        }
                    });

                    $sku.on('keyup change', function () {
                        validateSKU();
                    });

                    var $inputs = $dialog.find('input[id = rmasRequest_quantityBox]');
                    $inputs.tooltip({ track: true }).on('keyup change', function () {
                        validateSKU();
                    });

                    $('#rmasRequest_serialNumber').on("change", function () {
                        $dialog.mask(translationStore.getString('Please wait...'));
                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("disable");
                        $('#enterRmaInformation_addButton').button('disable');
                        document.getElementById('rmasRequest_SKUBox').value = "";
                        var deviceSerialNumber = encodeURIComponent(document.getElementById('rmasRequest_serialNumber').value.trim());
                        if (deviceSerialNumber != '') {
                            MyTools.Devices.getDevice(userStore.sessionId, deviceSerialNumber, function (geotabDevice) {
                                if (geotabDevice) {
                                    MyTools.Devices.getDeviceContractForRma(userStore.sessionId, geotabDevice.id, false, function (deviceContract) {
                                        if (deviceContract) {
                                            if (geotabDevice.serialNumber.startsWith("CY") && !deviceContract['productCode']) {
                                                MyTools.Devices.getProductCodeForFlexDevice(userStore.sessionId, geotabDevice.id, function (productCode) {
                                                    if (productCode) {
                                                        document.getElementById('rmasRequest_SKUBox').value = productCode;
                                                        if (productCode.indexOf('/') != -1) {
                                                            $("#rmasRequest_SKUBox").width(279);
                                                        } else {
                                                            $("#rmasRequest_SKUBox").width(179);
                                                        }
                                                        $dialog.unmask();
                                                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                                        $('#enterRmaInformation_addButton').button('enable');
                                                    } else {
                                                        $dialog.unmask();
                                                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                                        $.popupMessage(2, translationStore.getString('No matching Geotab Product Code found. This product cannot be added to the RMA.'), '');
                                                    }
                                                });
                                            } else if (deviceContract['productCode'] && deviceContract['productCode'] != 'CUSTOM') {
                                                var productCode = deviceContract['productCode'];
                                                document.getElementById('rmasRequest_SKUBox').value = productCode.slice(0, 3) + "-" + productCode.slice(3, productCode.length);
                                                if (productCode.indexOf('/') != -1) {
                                                    $("#rmasRequest_SKUBox").width(279);
                                                } else {
                                                    $("#rmasRequest_SKUBox").width(179);
                                                }
                                                $dialog.unmask();
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                                $('#enterRmaInformation_addButton').button('enable');
                                            } else if (deviceContract['productCode'] && deviceContract['productCode'] == 'CUSTOM') {
                                                $dialog.unmask();
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                                $.popupMessage(2, translationStore.getString('This product is not eligible for return.'), '');
                                            } else {
                                                $dialog.unmask();
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                                $.popupMessage(2, translationStore.getString('No matching Geotab Product Code found. This product cannot be added to the RMA.'), '');
                                            }
                                        }
                                        else {
                                            $dialog.unmask();
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                            $.popupMessage(2, translationStore.getString('No matching Geotab Product Code found. This product cannot be added to the RMA.'), '');
                                        }
                                    });
                                }
                                else {
                                    $.popupMessage(2, translationStore.getString('No matching Geotab Product Code found. This product cannot be added to the RMA.'), '');
                                    $dialog.unmask();
                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                                }
                            });
                        } else {
                            $dialog.unmask();
                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                        }
                    });

                    $('#rmasRequest_productTypeList').on("change", function () {
                        document.getElementById('rmasRequest_SKUBox').value = "";
                        var inputType = $(this).val();
                        if (inputType === 'Device') {
                            document.getElementById('rmasRequest_serialNumber').value = "";
                            document.getElementById('rmasRequest_quantityBox').value = "1";
                            document.getElementById('rmasRequest_quantityBox').readOnly = true;
                            document.getElementById('rmasRequest_SKUBox').readOnly = true;
                            $('#rmasRequest_serialNumberSpan').show();
                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("enable");
                            $('#enterRmaInformation_addButton').button('disable');
                        }
                        else {
                            document.getElementById('rmasRequest_quantityBox').value = "";
                            document.getElementById('rmasRequest_quantityBox').readOnly = false;
                            document.getElementById('rmasRequest_SKUBox').readOnly = false;
                            $('#rmasRequest_serialNumberSpan').hide();
                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Bulk Entry Form") + ")").button("disable");
                            $('#enterRmaInformation_addButton').button('disable');
                        }
                        products = [];
                        var productTypeList = document.getElementById('rmasRequest_productTypeList');
                        var productType = productTypeList.options[productTypeList.selectedIndex];
                        skuList.forEach(function (product) {
                            if ((product.substring(0, 3) == "IOX" && productType.value == "IOX") || (product.substring(0, 3) == "HRN" && productType.value == "Harness") || (product.substring(0, 3) != "HRN" && product.substring(0, 3) != "IOX" && productType.value == "Device") || (productType.value == "Other")) {
                                products.push(product);
                            }
                        });
                        $sku.autocomplete("option", { source: products });
                    });
                    $dialog['dialog']({
                        title: translationStore.getString('Enter RMA Information'),
                        height: 350,
                        width: 700,
                        modal: true,
                        close: function () {
                            $owner.find('#rmaCapture_itemInput').detach();
                            $('#enterRmaInformation_addButton').removeAttr('id');
                        },
                        buttons: [
                            {
                                text: translationStore.getString('Bulk Entry Form'),
                                click: function () {
                                    var context = $(this);
                                    MyTools.Dialogs.Common.bulkCapture($owner, translationStore.getString("Device RMA Input"), translationStore.getFormattedString('Enter one device per line, to a maximum of {0} devices. Invalid devices will be automatically removed', ["5000"]), null, 5000, 9, 16, function (newItems) {
                                        if (newItems != null) {
                                            devicesList.length = 0;
                                            var itemsProcessed = 0;
                                            $dialog.mask(translationStore.getString('Please wait...'));
                                            newItems.forEach(function (item) {
                                                var device = [];
                                                device.sku = item;
                                                device.qty = 1;
                                                devicesList.push(device);
                                            });
                                            context.dialog("close");
                                            if (onInput) {
                                                onInput(devicesList);
                                            }
                                        }
                                    });
                                }
                            },
                            {
                                text: translationStore.getString('Add'),
                                id: 'enterRmaInformation_addButton',
                                disabled: true,
                                click: function () {
                                    if (validateFields($dialog)) {
                                        var productTypeList = document.getElementById('rmasRequest_productTypeList');
                                        var productType = productTypeList.options[productTypeList.selectedIndex];
                                        var skuCode = document.getElementById('rmasRequest_SKUBox').value;
                                        if (rmaRequestType == 4 && (!skuCode || skuCode == "" || products.indexOf(skuCode) <= -1)) {
                                            alert(translationStore.getString("Product is not eligible for return."));
                                            return;
                                        }
                                        else if (!skuCode || skuCode == "") {
                                            alert(translationStore.getString("Product is not eligible for return."));
                                            return;
                                        }
                                        var device = [];
                                        device.qty = document.getElementById('rmasRequest_quantityBox').value;
                                        if (productType.value != "Device") {
                                            device.sku = skuCode;
                                        }
                                        else {
                                            device.sku = document.getElementById('rmasRequest_serialNumber').value.replace(/-/g, "");
                                        }
                                        if (device.sku && device.sku != "" && device.qty) {
                                            devicesList.push(device);
                                        }
                                    }
                                    else {
                                        alert(translationStore.getString("You have entered a non-integer value in the quantity field."));
                                        return;
                                    }
                                    $(this).dialog("close");
                                    if (onInput) {
                                        onInput(devicesList);
                                    }
                                }
                            },
                            {
                                text: translationStore.getString('Cancel'),
                                click: function () {
                                    itemStrings = [];
                                    $(this).dialog("close");
                                    if (onCancel) {
                                        onCancel();
                                    }
                                }
                            }

                        ]
                    });

                }

                if ($owner.find('#rmaCapture_itemInput').dialog('isOpen').length == 0) {
                    loadInputForm();
                }
                return this;

            },
            bulkCapture: function ($owner, heading, instruction, existingItems, maxItems, minLength, maxLength, onInput, onCancel) {
                var translationStore = self.getTranslationStore();
                if (!heading || heading.length == 0) {
                    heading = translationStore.getString("Serial Number Input");
                }
                if (!maxItems || maxItems == 0) {
                    maxItems = 40;
                }
                if (!instruction || instruction.length == 0) {
                    instruction = translationStore.getFormattedString('Enter one device per line, to a maximum of {0} devices. Invalid devices will be automatically removed.', [maxItems.toString()]);
                }
                if (!minLength || minLength == 0) {
                    minLength = 9;
                }
                if (!maxLength || maxLength == 0) {
                    maxLength = 16;
                }
                var itemStrings = [];
                var instructionHeight;

                function loadInputForm() {
                    // Clear old form, if any
                    $('#bulkCapture_itemInput').detach();
                    // create new form html
                    var ls = " ";
                    var h = [];
                    h.push('<div id="bulkCapture_itemInput">');
                    h.push('<div class="padded"><div id="bulkCapture_instruction"><h3>' + instruction + '</h3></div><br/>');
                    h.push('<textarea id="itemArea" cols="20" rows="10" name="items"></textarea>');
                    h.push('</div>');
                    $owner.append(h.join(''));
                    var $dialog = $owner.find('#bulkCapture_itemInput');
                    var $itemArea = $dialog.find('#itemArea');

                    if (existingItems && existingItems.length > 0) {
                        for (var i = 0; i < existingItems.length; i++) {
                            $itemArea.val($itemArea.val() + existingItems[i] + '\r\n');
                        }
                    }
                    $dialog['dialog']({
                        title: heading,
                        height: 490,
                        width: 310,
                        modal: true,
                        close: function () {
                            $owner.find('#bulkCapture_itemInput').detach();
                        },
                        buttons: [
                            {
                                text: translationStore.getString('Clear'),
                                click: function () {
                                    itemStrings = [];
                                    $(this).dialog("close");
                                    if (onInput) {
                                        onInput(null);
                                    }
                                }
                            },
                            {
                                text: translationStore.getString('OK'),
                                click: function () {
                                    itemStrings = [];
                                    var val = $itemArea.val().replace(/\n/g, ',');
                                    if (val.length == 0) {
                                        itemStrings = [];
                                        $(this)['dialog']('close');
                                        if (onInput) {
                                            onInput(null);
                                        }
                                        return;
                                    }
                                    val = val.replace(/;/g, ',');
                                    val = val.replace(/ /g, '');
                                    var tempItems = val.split(',');
                                    for (var i = 0; i < tempItems.length; i++) {
                                        var cleanItem = tempItems[i].replace(/ /g, "").replace(/-/gi, "").replace(/<[^>]+>/ig, "");
                                        if (cleanItem.length >= minLength && cleanItem.length <= maxLength) {
                                            itemStrings.push(cleanItem);
                                        }
                                    }
                                    if (itemStrings.length == 0) {
                                        alert(translationStore.getString("There are no valid items. Please ensure that you are adding the items in the correct format."));
                                        return;
                                    }
                                    if (itemStrings.length > maxItems) {
                                        alert(translationStore.getFormattedString("There are too many items. The maximum number allowed is {0}.", [maxItems.toString()]));
                                        return;
                                    }
                                    $(this).dialog("close");
                                    if (onInput) {
                                        onInput(itemStrings);
                                    }
                                }
                            },
                            {
                                text: translationStore.getString('Cancel'),
                                click: function () {
                                    itemStrings = [];
                                    $(this).dialog("close");
                                    if (onCancel) {
                                        onCancel();
                                    }
                                }
                            }
                        ],
                        resize: function () {
                            instructionHeight = $('#bulkCapture_instruction').height();
                            $itemArea.width($(this).width() - 15).height($(this).height() - (85 + instructionHeight));
                        }
                    });
                    instructionHeight = $('#bulkCapture_instruction').height();
                    $itemArea.width($dialog.width() - 15).height($dialog.height() - (85 + instructionHeight));
                }

                if ($owner.find('#bulkCapture_itemInput').dialog('isOpen').length == 0) {
                    loadInputForm();
                }
                return this;
            },
            userAcceptance: function ($owner, user, heading, acceptanceText, highlightBody, onAccept, onDecline) {
                // Clear old form, if any
                $owner.find('gms_UserAcceptanceDiv').empty().hide();
                // create new form html
                var html = [];
                html.push('<div id="gms_UserAcceptanceDiv" style="font-size: 1.2em;">');
                html.push('<p class="red"><strong>In order to continue, Geotab requires you to read, understand and accept the following.</strong></p>');
                html.push('<p class="padded-double"><strong><label class="subdued">User Name </label>' + user.name + '</strong></p>');
                html.push('<hr/>');
                html.push('<div class="margin-top' + (highlightBody ? ' gms-box alert padded' : '') + '"><span class="padded align-center">' + acceptanceText + '</span><br />');
                html.push('</div>');
                html.push('</div>');
                $owner.append(html.join(''));
                var $dialog = $owner.find('#gms_UserAcceptanceDiv');
                $dialog['dialog']({
                    title: heading,
                    width: 550,
                    height: 390,
                    modal: true,
                    close: function () {
                        $(this).detach();
                    },
                    buttons: {
                        Accept: function () {
                            if (onAccept) {
                                onAccept();
                            }
                            $(this)['dialog']('close');
                        },
                        Decline: function () {
                            if (onDecline) {
                                onDecline();
                            }
                            $(this)['dialog']('close');
                        }
                    }
                }).show();
            },
            submitRequest: function (dp, translationStore, $resultsDiv, user, userStore, contractOverrideReasons, shareDatabase, callback) {
                var hd = translationStore.getFormattedString('Change Device Data Plan to {0}', [dp.name.toUpperCase()]);
                var msg = '<p>' + translationStore.getString('I acknowledge that I am changing the data plan of the selected device(s) and that I am authorized by my company to make such a change. This change will ensure that these devices are activated and may lead to additional costs.') + '</p>' +
                    '<br/><p>' + translationStore.getString('I also understand that Geotab will not be held responsible for costs or issues arising from these changes.') + '</p>';
                if (dp['level'] == 99) {
                    msg += '<br/><p class="highlight padded"><strong>' + translationStore.getString('WARNING') + ':</strong> ' + translationStore.getString('I understand that by submitting this request, the selected device(s) will <strong>no longer communicate or generate any data</strong> unless reactivated. I also understand that reactivation can <strong>take up to 24 hours to take effect.</strong>') + '</strong>.</p>';
                }
                else if (dp['level'] == 9999) {
                    msg = '<p>' + translationStore.getString('I understand that I am terminating the selected device(s), which will result in these devices being unable to function in any capacity.') + '</p>' +
                        '<br/><p>' + translationStore.getString('I also understand that, for purchased devices, if I wish to reuse these terminated device in the future, I will have to return the device(s) to Geotab for reactivation, from which additional charges may be incurred.') + '</p>' +
                        '<br/><p>' + translationStore.getString('I confirm that any devices under a rental agreement with Geotab must be returned within 15 days of termination, otherwise I will be invoiced and expected to pay full price.') + '</p>' +
                        '<br/><p>' + translationStore.getString('I also understand that Geotab will not be held responsible for costs or issues arising from these changes.') + '</p>';
                }

                var devicePlanUserAccept = function ($owner, devicePlan, acceptanceText, onAccept) {
                    // Clear old form, if any
                    $owner.find('#devices_UserAcceptanceDiv').find('#devices_UserAcceptanceReasons').off();
                    $owner.find('#devices_UserAcceptanceDiv').empty().hide();
                    var highlightCss = devicePlan.level == 9999 ? ' gms-box alert padded' : '';
                    // create new form html
                    var html = [];
                    html.push('<div id="devices_UserAcceptanceDiv" style="font-size: 1.2em;">');
                    html.push('<p class="red"><strong>' + translationStore.getString('In order to continue, Geotab requires you to read, understand and accept the following.') + '</strong></p>');
                    html.push('<ul class="auto-grid padded-double">');
                    html.push('<li>' + translationStore.getString('User Name') + '</li>');
                    html.push('<li>' + user.name + '</li>');
                    // Reasons
                    if (devicePlan['reasons'] && devicePlan['reasons'].length > 0) {
                        html.push('<li><label for="devices_UserAcceptanceReasons">' + translationStore.getString('Reason for Termination') + '</label></li>');
                        html.push('<li><select id="devices_UserAcceptanceReasons"></li>');
                        html.push('<option class="invalid" value="0">[' + translationStore.getString('Please Select Best Option') + ']</option>');
                        $.each(devicePlan['reasons'], function (key, value) {
                            if (value.parentId == null) {
                                html.push('<option value="' + value.id + '">' + value.name + '</option>');
                            }
                        });
                        html.push('</select></li>');

                        html.push('<li><label id="devices_UserAcceptanceReasonsSecondaryLabel" for="devices_UserAcceptanceReasonsSecondary" style="display:none">' + translationStore.getString('Secondary Reason') + '</label></li>');
                        html.push('<li><select id="devices_UserAcceptanceReasonsSecondary" style="display:none" disabled></li>');
                        html.push('<option class="invalid" value="0">[' + translationStore.getString('Please Select a Primary Reason') + ']</option>');
                        html.push('</select></li>');
                       
                        html.push('<li><label for="devices_UserAcceptanceReasonsComment">' + translationStore.getString('Comments') + '</label></li>');
                        html.push('<li><textarea rows="3" cols="35" maxlength="10000" id="devices_UserAcceptanceReasonsComment"></textarea></li>');
                    }

                    if (user.isInternal && dp['level'] === 9999 && contractOverrideReasons && userStore.isUserAllowed(user,['ContractManagement-OverrideContract-Admin'],false)) {
                        html.push('<li style="width:40%"><label for="devices_ContractOverrideReasons">' + translationStore.getString('Please provide a reason if terminating devices that are on a contract') + '</label></li>');
                        html.push('<li><select id="devices_ContractOverrideReasons"></li>');
                        html.push('<option class="invalid" value="0">[' + translationStore.getString('Please Select Best Option') + ']</option>');
                        $.each(contractOverrideReasons, function (key, value) {
                            html.push('<option value="' + value.id + '">' + value.reason + '</option>');
                        });
                        html.push('</select></li> <br>');
                    }

                    html.push('</ul>');
                    html.push('<hr/>');
                    html.push('<div class="margin-top' + highlightCss + '"><span class="padded align-center">' + acceptanceText + '</span><br />');
                    html.push('</div>');
                    html.push('</div>');
                    $owner.append(html.join(''));

                    var primaryReasonSelect = $("#devices_UserAcceptanceReasons");
                    var secondaryReasonSelect = $("#devices_UserAcceptanceReasonsSecondary");
                    var secondaryReasonSelectLabel = $("#devices_UserAcceptanceReasonsSecondaryLabel");
                    primaryReasonSelect.on("change", function () {
                        if (parseInt(primaryReasonSelect[0].selectedOptions[0].value) == 0) {
                            secondaryReasonSelect.empty();
                            secondaryReasonSelect.hide();
                            secondaryReasonSelectLabel.hide();
                            secondaryReasonSelect.append($('<option value="' + 0 + '">[' + translationStore.getString('Please Select Primary Reason Option') + ']</option>'));
                            secondaryReasonSelect.prop('disabled', true);
                            validateForm();
                        } else {
                            GetSecondaryReasons(parseInt(primaryReasonSelect[0].selectedOptions[0].value), function (results) {
                                secondaryReasonSelect.empty();
                                if (!results || results.length == 0) {
                                    secondaryReasonSelect.hide();
                                    secondaryReasonSelectLabel.hide();
                                    secondaryReasonSelect.append($('<option value="' + 0 + '">[' + translationStore.getString('Please Select Primary Reason Option') + ']</option>'));
                                    secondaryReasonSelect.prop('disabled', true);
                                } else {
                                    secondaryReasonSelect.show();
                                    secondaryReasonSelectLabel.show();
                                    secondaryReasonSelect.append($('<option value="' + 0 + '">[' + translationStore.getString('Please Select Best Option') + ']</option>'));
                                    $.each(results, function (key, value) {
                                        secondaryReasonSelect.append($('<option value="' + value.id + '">' + value.name + '</option>'));
                                    });
                                    secondaryReasonSelect.prop('disabled', false);
                                }
                                validateForm();
                            });
                        }
                    });
                    var $dialog = $owner.find('#devices_UserAcceptanceDiv');

                    function GetSecondaryReasons(id, callback) {
                        gmsApiCall({
                            method: "GetSecondaryDeviceContractRequestReasons",
                            params: {
                                sessionId: userStore.sessionId,
                                parentId: id
                            },
                            success: function (result) {
                                if (callback) {
                                    callback(result);
                                }
                            },
                            error: function (error) {
                                $.popupMessage(1, parseError(error), '');
                            }
                        });
                    }

                    function validateForm() {
                        var $r = $dialog.find('#devices_UserAcceptanceReasons');

                        $r.removeClass('bad-box');
                        if (!$r || $r.length == 0) {
                            return true;
                        }
                        // selected option
                        var $so = $r.val();
                        if (!!(!$so || $so.length == 0 || $so == "0")) {
                            $r.addClass('bad-box');
                            return false;
                        }

                        var $r2 = $dialog.find('#devices_UserAcceptanceReasonsSecondary');
                        $r2.removeClass('bad-box');
                        if (!$r2 || $r2.length == 0) {
                            return true;
                        }

                        // selected option
                        var $so2 = $r2.val();
                        if ($r2[0].length == 1) {
                            return true;
                        }
                        if (!!(!$so2 || $so2.length == 0 || $so2 == "0")) {
                            $r2.addClass('bad-box');
                            return false;
                        }
                        return true;
                    }

                    $dialog.find('#devices_UserAcceptanceReasonsSecondary').on('keypress change', function () {
                        validateForm();
                    });

                    $dialog['dialog']({
                        title: translationStore.getString('Device Data Plan Change to {0}').format(translationStore.getString(devicePlan.name).toUpperCase()),
                        width: 650,
                        modal: true,
                        close: function () {
                            $(this).remove();
                        },
                        buttons: [
                            {
                                text: translationStore.getString("Accept"),
                                click: function () {
                                    if (!validateForm()) {
                                        return;
                                    }
                                    var reasonId = $(this).find('#devices_UserAcceptanceReasons').val();
                                    var rid = 0;
                                    if (reasonId && reasonId.length > 0) {
                                        rid = parseInt(reasonId);
                                    }
                                    var reasonId2 = $(this).find('#devices_UserAcceptanceReasonsSecondary').val();
                                    var rid2 = 0;
                                    if (reasonId2 && reasonId2.length > 0) {
                                        rid2 = parseInt(reasonId2);
                                    }
                                    var overrideReasonId = $(this).find('#devices_ContractOverrideReasons').val();
                                    var rid3 = 0;
                                    if (overrideReasonId && overrideReasonId.length > 0) {
                                        rid3 = parseInt(overrideReasonId);
                                    }
                                    var comments = $(this).find('#devices_UserAcceptanceReasonsComment').val();
                                    $(this)['dialog']('close');
                                    if (onAccept) {
                                        onAccept(rid2 != 0 ? rid2 : rid, comments, rid3, $owner);
                                    }
                                }
                            },
                            {
                                text: translationStore.getString("Decline"),
                                click: function () {
                                    $(this)['dialog']('close');
                                }
                            }
                        ]
                    }).show();
                    //$itemArea.width($dialog.width() - 15).height($dialog.height() - 75);
                    validateForm();
                };
                devicePlanUserAccept($resultsDiv, dp, msg, function (reasonId, comments, overrideReasonId, $owner) {
                    // get selected serial nos
                    var sns;
                    sns = MyTools.Tables.extractValuesFromTable($('#deviceTable'), 'serialNo');
                    if (!sns || sns.length == 0) {
                        $.popupMessage(1, translationStore.getString('There are currently no valid devices selected!'), '');
                        return;
                    }
                    if (sns.length > 500) {
                        $.popupMessage(2, "Due to the large number of devices, this may take a few minutes to complete. Please do not refresh your browser.", '');
                    }
                    sns.forEach(function (element, index) {
                        if (element.includes("[")) {
                            sns[index] = element.substring(0, element.indexOf("[") - 1);
                        }
                    });
                    $owner.mask(translationStore.getString('Please wait...'));                    
                    gmsApiCall({
                        method: "ChangeDevicePlanByUser",
                        params: {
                            sessionId: userStore.sessionId,
                            serialNos: sns,
                            billingLevel: dp['level'],
                            rateCode: $('#activate_RateCode').val(),
                            requestByEmail: user.name,
                            requestByDatabase: 'MyAdmin',
                            reasonId: reasonId,
                            comments: comments,
                            overrideReasonId: overrideReasonId,
                            shareDatabase: shareDatabase
                        },
                        success: function (result) {
                            if ($owner.isMasked()) {
                                $owner.unmask();
                            }
                            var failedSerialNumbers = [];                            
                            result.forEach(function (element) {
                                if (element.requestAdded == false) {
                                    failedSerialNumbers.push([element.device.serialNumber, element.billingResultMessage]);                                    
                                }
                            });
                            if (failedSerialNumbers.length > 0) {
                                $.popupMessage(1, "An error has occurred with some devices.", '');
                                var i, temparray, chunk = 60;
                                i = 0;                                
                                temparray = failedSerialNumbers.slice(i, i + chunk);
                                if (failedSerialNumbers.length > 60) {
                                    temparray.push(["This list is incomplete and more devices might have failed", ""]);
                                }
                                MyTools.Exporter._export("ExportSerialNumbers", {
                                    serialNumbersAndErrors: temparray
                                });
                                if (callback) {
                                    callback('');
                                }
                            } else {
                                $.popupMessage(3, translationStore.getString("Thank you! Your request has been submitted and can take up to 24 hours. You will receive an email once the request has been processed."), '');
                                if (callback) {
                                    callback('');
                                }
                            }
                        },
                        error: function (error) {
                            if ($owner.isMasked()) {
                                $owner.unmask();
                            }
                            $.popupMessage(1, parseError(error), '');
                        }
                    });

                });
            },

        }
    },
    Exporter: {
        createReport: function (sessionId, translationStore, methodName, paramsDict, callback) {
            gmsApiCall({
                method: 'CreateReport',
                params: {
                    sessionId: sessionId,
                    methodName: methodName,
                    paramsDict: paramsDict
                },
                success: function (result) {
                    if (callback) {
                        $.popupMessage(2, translationStore.getString('Your Export Has Been Queued. An Email Will Be Sent When Processing Is Complete.'));
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },

        _export: function (methodName, params, callback) {
            var data = encodeURIComponent(stringifyV2({
                method: methodName,
                params: params
            }));
            exportData(data, callback);            
        },
        getDatabaseTransactionsForMonth: function (sessionId, refId, accountId, databaseName, ratePlanId, startMonthString, partnerId) {
            MyTools.Exporter._export('GetDatabaseTransactionsForMonth', {
                sessionId: sessionId,
                refId: parseInt(refId),
                accountId: accountId,
                ratePlanTypeIdString: ratePlanId.toString(),
                startMonthString: startMonthString,
                databaseName: databaseName,
                partnerId: partnerId
            });
        },
        getAssignedSerialNumbers: function (sessionId, accountId, accountNo, poNo, includeCarrierInfo) {
            MyTools.Exporter._export('GetAssignedSerialNumbers', {
                sessionId: sessionId,
                refId: accountId,
                accountId: accountNo,
                poNumber: poNo,
                includeCarrierInfo: includeCarrierInfo
            });
        },

        getTickets: function (sessionId, searchString, includeOpen, includeClosed, noOfRequests, includeForOrganization, limitDescriptionField, accountId) {
            MyTools.Exporter._export('GetTickets', {
                sessionId: sessionId,
                searchString: searchString,
                includeOpen: includeOpen,
                includeClosed: includeClosed,
                noOfRequests: noOfRequests,
                includeForOrganization: includeForOrganization,
                limitDescriptionField: limitDescriptionField,
                accountId: accountId
            });
        },

        getSimQueries: function (simCardNo, categoryId, fromDate, toDate, firmwareFilter, includeIgnored, includeResolved, sessionId) {
            MyTools.Exporter._export('GetSimQueries', {
                simCardNo: simCardNo,
                firmwareFilter: firmwareFilter,
                categoryId: categoryId,
                includeIgnored: includeIgnored,
                includeResolved: includeResolved,
                fromDateString: fromDate,
                toDateString: toDate,
                sessionIdString: sessionId
            });
        },
        getRmas: function (sessionId, erpNo, rmaIdFilter, serialNoFilter, resellerRefFilter, includeIncomplete, includeComplete) {
            MyTools.Exporter._export('GetRmas', {
                sessionId: sessionId,
                erpNo: erpNo,
                rmaIdFilter: rmaIdFilter,
                serialNoFilter: serialNoFilter,
                resellerRefFilter: resellerRefFilter,
                includeIncomplete: includeIncomplete,
                includeComplete: includeComplete
            });
        },
        getOrderDetail: function (sessionId, orderId) {
            MyTools.Exporter._export('GetOnlineOrderDetail', {
                sessionId: sessionId,
                orderId: orderId
            });
        },
        getOrderHistory: function (accountId, poNo, resRef, oNo, df, dt, soldToCustomerId) {
            MyTools.Exporter._export('GetOnlineOrders', {
                sessionId: sessionId,
                refId: accountId,
                poNo: (!poNo ? "" : poNo),
                resRef: (!resRef ? "" : resRef),
                oNo: (!oNo ? "" : oNo),
                df: df,
                dt: dt,
                soldToCustomerId: soldToCustomerId
            });
        },
        getRatePlanSummary: function (sessionId, ratePlanTypeFilter, periodStart, periodEnd, callback) {
            MyTools.Exporter._export('GetRatePlanSummary', {
                sessionId: sessionId,
                ratePlanTypeFilterId: ratePlanTypeFilter == null || ratePlanTypeFilter.id < 1 ? -1 : ratePlanTypeFilter.id,
                periodStartString: periodStart,
                periodEndString: periodEnd
            });
        }
    },
    SimCards: {
        getSimStatus: function (store, simNumber, rowNumber, forGrid, callback) {
            store['getSimInfo'](sessionId, simNumber, function (result) {
                var simResult = { simNumber: simNumber, isActive: false, state: '', provider: '', geotabOwned: false, cssClass: forGrid ? '' : 'myWarning' };
                if (result && result.result && result.result['terminalStatus']) {
                    simResult.isActive = result.result.isActive;
                    simResult.suffix = result.result.serviceName ? ' [' + result.result['serviceName'] + ']' : ' [' + 'Unknown' + ']';
                    simResult.geotabOwned = result.result.geotabOwned;
                    var isScrapped = result.result['terminalStatus'].name == "Scrap";
                    var scrappedCss = (isScrapped ? ' strikethrough' : '');

                    if (!forGrid) {
                        simResult.cssClass = ((result.result.isActive || result.result.terminalStatus.category == "ActivationReady") ? 'myGood' : (result.result.terminalStatus.category == "Unknown" ? 'myWarning' : 'myBad')) + scrappedCss;
                    }
                    else {
                        simResult.cssClass = ((result.result.isActive || result.result.terminalStatus.category == "ActivationReady") ? 'gms-table-box good' : (result.result.terminalStatus.category == "Unknown" ? 'gms-table-box warning' : 'gms-table-box alert')) + scrappedCss;
                    }

                }
                if (callback) {
                    callback(simResult, rowNumber);
                }
                return simResult;
            });
        },
        querySimsInGrid: function (isInternal, store, grid, column) {
            // Get grid row count
            var numberOfRecords = $(grid).jqGrid('getGridParam', 'reccount');
            if (numberOfRecords <= 20) {
                // Enumerate through rows
                for (var i = 1; i <= numberOfRecords; i++) {
                    var simNumber = $(grid).getCell(i, column);
                    if (simNumber) {
                        MyTools.SimCards.getSimStatus(store, simNumber, i, true, function (simResult, rowNumber) {
                            if (simResult.suffix) {
                                var displaySimNo = simResult.simNumber + (isInternal ? (simResult.geotabOwned ? '' : ' (Consigned)') : '');
                                $(grid).setCell(rowNumber, column, displaySimNo, simResult.cssClass);
                            }
                        });
                    }
                }
            }
        },
        querySims: function (store, $container, searchString, isOwnerLi) {
            $.each($container.find(searchString), function (key, value) {
                var $value = $(value);
                var useVal = $value.val() && $value.val().length > 0;
                var simNumber = (useVal ? $value.val() : $value.text());
                if (simNumber) {
                    if (useVal) {
                        $value.val(simNumber + ' [Querying...]');
                    }
                    else {
                        $value.text(simNumber + ' [Querying...]');
                    }
                    MyTools.SimCards.getSimStatus(store, simNumber, -1, false, function (simResult) {
                        var appendText = (simResult.suffix ? simResult.simNumber + simResult.suffix : simResult.simNumber);
                        if (useVal) {
                            $value.val(appendText);
                        }
                        else {
                            $value.text(appendText);
                        }
                        if (isOwnerLi) {
                            $value.parent().removeClass('clear').addClass(simResult.isActive ? 'good' : 'bad');
                        }
                        else {
                            $value.addClass(simResult.cssClass);
                        }
                    });
                }
            });
        }
    },
    Orders: {
        Ui: {
            imgError: function (image) {
                image.onerror = "";
                image.src = "https://resourcescdn.geotab.com/myadmin-assets/products/MISC.jpg";
                return true;
            },
            getOrderTypeFromBasket: function (pricingTypeId, basket) {
                var bid = (basket == null ? MyTools.Orders.getPersistedOrderBasket().orderTypeId : basket.orderTypeId);
                return (bid < 1 ? true : bid == pricingTypeId);
            },
            addProductToBasket: function addProductToBasketSelf(userStore, accountNo, productCode, productName, quantity, pricingTypeId, callback) {
                var isAdded = false, isBulk = false;
                var orderBasket = MyTools.Orders.getPersistedOrderBasket();
                if (orderBasket.orderTypeId > 1 && orderBasket.orderTypeId != pricingTypeId) {
                    throw "Mismatched Pricing Types";
                }
                // see if code already exists, if so update quantity
                for (var i = 0; i < orderBasket.products.length; i++) {
                    if (orderBasket.products[i].productCode == productCode && orderBasket.products[i].pricingTypeId == pricingTypeId) {
                        orderBasket.products[i].quantity += quantity;
                        isAdded = true;
                        break;
                    }
                }
                // not existing, add
                if (!isAdded) {
                    orderBasket.products[orderBasket.products.length] = {
                        quantity: quantity,
                        productCode: productCode,
                        productDescription: productName,
                        pricingTypeId: pricingTypeId,
                        comments: '',
                        linkedProductCode: ''
                    };
                }
                orderBasket.orderTypeId = pricingTypeId;
                if (!orderBasket.accountNo || orderBasket.accountNo != accountNo) {
                    orderBasket.accountNo = accountNo;
                }
                sessvars.orderBasket = orderBasket;
                userStore.updateOrderBasket(function () {
                    if (callback) {
                        callback();
                    }
                });
            },
            Orders2: function (userStore) {
                var orders2 = this;
                var $accountList = $('#order2_accountsList'),
                    $sortList = $('#order2_sortByList'),
                    $order2_onHold = $('#order2_onHold'),
                    $t = $('#order2_productTable'),
                    $catDiv = $t.find('.productCategory'),
                    $productDiv = $t.find('.product'),
                    sessionId = userStore.sessionId;
                var productCategories = null,
                    popularCodes = null,
                    recentCodes = null,
                    sortOrderChanged = false,
                    products = null;
                var translationStore = userStore.getTranslationStore();
                var COMING_SOON = "** " + translationStore.getString('Coming Soon') + " **";

                function sortProductsAZ(a, b) {
                    if (a.isPromoted && !b.isPromoted) {
                        return -1;
                    }
                    else if (b.isPromoted && !a.isPromoted) {
                        return 1;
                    }
                    else {
                        return a.code.localeCompare(b.code);
                    }
                }

                function sortProductsZA(a, b) {
                    if (a.isPromoted && !b.isPromoted) {
                        return -1;
                    }
                    else if (b.isPromoted && !a.isPromoted) {
                        return 1;
                    }
                    else {
                        return b.code.localeCompare(a.code);
                    }
                }

                function sortProductsPopular(a, b) {
                    if (a.isPromoted && !b.isPromoted) {
                        return -1;
                    }
                    else if (b.isPromoted && !a.isPromoted) {
                        return 1;
                    }
                    else {
                        if (a.popularityRank < b.popularityRank) {
                            return 1;
                        } else if (a.popularityRank > b.popularityRank) {
                            return -1;
                        } else if (a.popularCount > b.popularCount) {
                            return 1;
                        } else if (a.popularCount < b.popularCount) {
                            return -1;
                        }
                    }
                    return 0;
                }
                this.refreshSortOptions = function (callback) {
                    $sortList.off().empty();
                    var sortOptions = [
                        { name: "Ascending Product Codes", functionId: "1" },
                        { name: "Descending Product Codes", functionId: "2" },
                        { name: "Popularity", functionId: "3" }
                    ];
                    var h = [];
                    $.each(sortOptions, function (key, val) {
                        h.push('<option value="' + val.functionId + '">' + translationStore.getString(val.name) + '</option>');
                    });
                    $sortList.html(h.join(''));
                    $sortList.on('change', function () {
                        sortOrderChanged = true;
                        var $selected = $('.productCategory').find('div.selected input[type=hidden]');
                        var cid = parseInt($selected.val());
                        orders2.loadProductsToList(cid, '', false);
                        /*else {
                         orders2.loadProductsToList(cid, $selected.find('#order2_productSearchBox').val());
                         }*/
                    });
                    if (callback) {
                        callback();
                    }
                };
                this.showProductInfo = function ($owner, product, account, userStore, callback, onClose) {
                    var basket = MyTools.Orders.getPersistedOrderBasket();

                    function loadDialog(callback, onClose) {
                        var getFormHtml2 = function (p) {
                            $owner.find('#showProductInfoDiv').detach();
                            var now = MyTools.DateTime.now(),
                                sd = MyTools.DateTime.toDate(p.startDate);
                            var comingSoon = sd > now;
                            var hasPricing = p['pricings'] && p['pricings'].length > 0;
                            let imgUrl = p.imageUrl;
                            if (p.image !== undefined && p.image.length > 0) {
                                var imageUrl = imgUrl;
                            }
                            var isBetaProduct = false;
                            if (product.productCategory && product.productCategory.code == 'BETA') {
                                isBetaProduct = true;
                            }
                            var h = [];
                            h.push('<div id="showProductInfoDiv">');

                            h.push('<table id="order2_productInfoTable">');
                            h.push('<tr>');
                            h.push('<td class="imageColumn">');

                            h.push('<img style="max-height: 210px;max-width: 320px;" src="' + imageUrl + '" alt="' + translationStore.getString('No image available') + '"/></td>'); //width="320px;" height="210px;"
                            h.push('<td class="quantityColumn">');
                            if (isBetaProduct) {
                                h.push('<div id="betaBanner"><div style="margin:0px;pointer-events:none;">' + translationStore.getString('BETA PRODUCT') + '</div></div>');
                            }
                            h.push('<label for="showProductInfo_QuantityBox"></label><input id="showProductInfo_QuantityBox" class="required integer" type="text" value="" title="' + translationStore.getString('Enter a valid quantity, 1 or higher') + '"/></td>');
                            h.push('<td class="infoColumn" colspan="2">');
                            if (!p.name) {
                                h.push('<label for="showProductInfo_CodeBox"><input id="showProductInfo_CodeBox" class="required" style="font-size: 1.3em;" type="text" title="' + translationStore.getString('Enter the custom product code of the item you wish to order') + '" value="' + p.code + '"/>');
                            }
                            else {
                                h.push('<label class="subdued">' + p.code + '</label>&nbsp;' + p.name);
                            }
                            h.push('</td>');
                            h.push('</tr>');
                            if (hasPricing && !comingSoon) {
                                for (var i = 0; i < p['pricings'].length; i++) {
                                    var pr = p['pricings'][i];
                                    if (MyTools.DateTime.toDate(p.startDate) <= now && MyTools.DateTime.toDate(p['expireDate']) > now) {
                                        var isOptionValidForPricingType = MyTools.Orders.Ui.getOrderTypeFromBasket(pr.pricingType.id, basket);
                                        var currencyRate = p['currencyRate'];
                                        var currencyCode = currencyRate.currency.code;
                                        var currencyFactor = currencyRate['factor'];
                                        var displayPricing = '';
                                        if (pr.purchasePrice > 0) {
                                            var conversionRate = currencyRate.currency.isUSD ? currencyFactor : 1;
                                            displayPricing = currencyCode + ' ' + formatToCurrencyV2(pr.purchasePrice * conversionRate, currencyRate);
                                        }
                                        /*if (pr.monthlyPrice > 0) {
                                            displayPricing += (displayPricing == '' ? '' : ' (') + currencyCode + ' ' + formatToCurrencyV2(pr.monthlyPrice * currencyFactor, currencyRate) + '/' + translationStore.getString('month') + (displayPricing == '' ? '' : ')');
                                        }*/
                                        h.push('<tr>');
                                        if (isOptionValidForPricingType) {
                                            var colspan = 3;
                                            h.push('<td class="pricingTypeColumn" colspan="' + colspan + '"><button class="no-radius">' + translationStore.getString('Add') + ' ' + translationStore.getString(pr.pricingType.name) + '</button><input type="hidden" value="' + pr.pricingType.id + '"></td>');
                                        }
                                        else {
                                            h.push('<td class="pricingTypeColumn" colspan="3"><button class="gms-box disabled padded no-radius">' + translationStore.getFormattedString('Cannot add {0} item to order', [translationStore.getString(pr.pricingType.name)]) + '</button></td>');
                                        }

                                        h.push('<td class="currencyColumn">' + displayPricing + '</td>');
                                        h.push('</tr>');
                                    }
                                }
                            }
                            else if (!comingSoon) {
                                h.push('<div style="margin-top: 2em;"></div>');
                                h.push('<tr>');
                                h.push('<td class="pricingTypeColumn" colspan="3"><button class="no-radius" style="height: 4em;">' + translationStore.getString('Add Custom Product') + '</button><input type="hidden" value="-1"></td>');
                                h.push('<td class="currencyColumn"> * ' + translationStore.getString('Price TBD') + ' * </td>');
                                h.push('</tr>');
                            }
                            else {
                                var c = COMING_SOON;
                                if (p.comments && p.comments.length > 0) {
                                    c += ' ';
                                }
                                h.push('<tr>');
                                h.push('<td class="commentsColumn" colspan="4">' + c + '</td>');
                                h.push('</tr>');
                            }
                            h.push('</table>');
                            h.push('</div>');
                            return h;
                        };
                        $owner.append(getFormHtml2(product).join(''));
                        $owner.find('#betaSurveyButton').button();
                        var $d = $owner.find('#showProductInfoDiv');
                        if (!$d.find('.pricingTypeColumn').find('button').length) {
                            $d.find('#showProductInfo_QuantityBox').hide();;
                        }
                        $d.find('button').button({ disabled: true }).on("click", function () {
                            var $b = $(this);
                            var pt = parseInt($b.parent().find('input[type="hidden"]').val());
                            var q = parseInt($d.find('#showProductInfo_QuantityBox').val());
                            var c = product.code;
                            var d = product.name ? product.name : translationStore.getString('Custom Product');
                            if (!product.name) {
                                c = encodeURIComponent($d.find('#showProductInfo_CodeBox').val());
                            }
                            MyTools.Orders.Ui.addProductToBasket(userStore, account.accountId, c, d, q, pt, function () {
                                $d.dialog("close");
                            });
                        });
                        var $inputs = $d.find('input[type=text]');
                        $inputs.tooltip({ track: true }).on('keyup change', function () {
                            var isValid = validateFields($d);
                            enableButton($d.find('button:not(.disabled)'), isValid);
                        });
                        $d.find('img').on('error', function () {
                            MyTools.Orders.Ui.imgError(this);
                        });
                        $d.find('#showProductInfo_CodeBox').on("blur", function () {
                            var val = $(this).val().toUpperCase();
                            $(this).val(val);
                            if (val.length > 0) {
                                $d.find('#showProductInfo_productCode').text($(this).val());
                            }
                        });
                        $d.dialog(
                            {
                                title: translationStore.getString('Product Info'),
                                modal: true,
                                minWidth: 810,
                                minHeight: 300,
                                close: function () {
                                    if (onClose) {
                                        onClose();
                                    }
                                },
                                buttons: [{
                                    text: translationStore.getString('Close'),
                                    click: function () {
                                        $(this).dialog("close");
                                    }
                                }]
                                , open: function (event, ui) {

                                    //    var top = Math.max((window.innerHeight / 2) - ($(this)[0].offsetHeight / 2), 0);
                                    //    console.log("top calc: " + top);
                                    //  console.log("amountscrolled: " + MyTools.Amountscrolled())

                                    //    top = $(this)[0].offsetParent.offsetHeight;

                                    //    console.log("window.innerHeight: " + window.innerHeight);
                                    //    console.log("$(this)[0].offsetParent.offsetHeight: " + $(this)[0].offsetParent.offsetHeight);
                                    //    console.log("$(this)[0].offsetHeight: " + $(this)[0].offsetHeight);

                                    //    console.log("scrollHeight: " + document.getElementById("website_container").scrollHeight);

                                    //    //var left = Math.max((window.innerWidth / 2) - $(this)[0].offsetWidth, 0);
                                    //    $(this).parent().css('top', top + "px");
                                    //    //$(this).parent().css('left', left + "px");
                                    //    $(this).parent().css('position', 'fixed');
                                },
                            });
                        if (callback) {
                            callback();
                        }
                    }

                    // Execution point
                    loadDialog(function () {
                        if (callback) {
                            callback();
                        }
                    }, function () {
                        if (onClose) {
                            onClose();
                        }
                    });
                };
                this.refreshProductsArray = function (callback) {
                    var account = $accountList.erpAccount(userStore);
                    var accountId = null;
                    if (account) {
                        accountId = account.id;
                    }
                    if (account.onHold) {
                        $('label[id="order2_onHold"]').show();
                    }
                    MyTools.Orders.getProductsWithPricing(sessionId, accountId, '', '', null, null, function (results) {
                        products = results;
                        if (callback) {
                            callback();
                        }
                    });
                };
                this.refreshPopularCodes = function (callback) {
                    var ac = $accountList.erpAccount(userStore);
                    var id = (ac && ac.id ? ac.id : -1);
                    MyTools.Orders.getTopOrderedProductCodes(sessionId, id, function (results) {
                        popularCodes = results;
                        if (callback) {
                            callback();
                        }
                    })
                };
                this.refreshRecentCodes = function (callback) {
                    var ac = $accountList.erpAccount(userStore);
                    var id = (ac && ac.id ? ac.id : -1);
                    MyTools.Orders.getRecentOrderedProductCodes(sessionId, id, function (results) {
                        recentCodes = results;
                        if (callback) {
                            callback();
                        }
                    })
                };
                this.getSolidProductFromId = function (id, code) {
                    for (var i = 0; i < products.length; i++) {
                        var val = products[i];
                        if (val.id == id) {
                            return val;
                        }
                    }
                    return { id: id, code: code.toUpperCase() };
                };
                this.completeLoadProductsToList = function (catId, searchString, isBeta, callback) {
                    var cleanSearchString = searchString.replace("-", "").toUpperCase();
                    var productsToShow = [];
                    if (!sortOrderChanged) {
                        if (catId === -1 || catId === '-1') {
                            $sortList.val("3");
                        } else {
                            $sortList.val("1");
                        }
                    }
                    if (catId < 1) {
                        // get products from code
                        var codesToCheck = (catId == 0 ? recentCodes : popularCodes);
                        if (codesToCheck && codesToCheck.length > 0) {
                            $.each(codesToCheck, function (key, code) {
                                $.each(products, function (key, product) {
                                    if (product.code == code) {
                                        productsToShow.push(product);
                                    }
                                });
                            })
                        }
                    }
                    else if (catId == 9999) {
                        $.each(products, function (key, value) {
                            var cleanCode = value.code.replace("-", "").toUpperCase();
                            var cleanName = value.name.replace("-", "").toUpperCase();
                            if (cleanCode.indexOf(cleanSearchString) !== -1 || cleanName.indexOf(cleanSearchString) !== -1) {
                                productsToShow.push(value);
                            }
                        });
                    }
                    else {
                        if (products && products.length > 0) {
                            $.each(products, function (key, value) {
                                if (value.productCategory.id == catId) {
                                    productsToShow.push(value);
                                }
                            });
                        }
                    }
                    // Sort Products
                    var sortOptionFunction = $sortList.val();
                    if (sortOptionFunction == "2") {
                        productsToShow.sort(sortProductsZA);
                    }
                    else if (sortOptionFunction == "3") {
                        productsToShow.sort(sortProductsPopular);
                    }
                    else {
                        productsToShow.sort(sortProductsAZ);
                    }
                    // Load Products
                    var h = [];
                    var promotedItems = [];
                    if (isBeta && !userStore.activeUser().isInternal) {
                        h.push('<div class="gms-box clear padded-double"><h2>' + translationStore.getString('Reset Beta Hardware Agreement Response') + '</h2><p>' + translationStore.getString('To reset your response to the Beta Hardware Program Ts & Cs and re-respond, please click here') + ': <button id="resetBetaTC">Reset</button></p></div>');
                    }
                    if (productsToShow && productsToShow.length > 0) {
                        var now = MyTools.DateTime.now();
                        var basket = MyTools.Orders.getPersistedOrderBasket();
                        $.each(productsToShow, function (key, val) {
                            // Order Options
                            var sd = MyTools.DateTime.toDate(val.startDate);
                            var ed = MyTools.DateTime.toDate(val['expireDate']);
                            var expired = ed <= now;
                            var comingSoon = sd > now;
                            var hasPricing = val['pricings'] && val['pricings'].length > 0;

                            var hasOptionsForBasket = false;
                            var pricingTypesAvailable = '';
                            var availInfo = '';
                            var isPromoted = false;
                            let imageUrl = val.imageUrl;

                            if (hasPricing && !comingSoon) {
                                $.each(val['pricings'], function (key, item) {
                                    if (MyTools.Orders.Ui.getOrderTypeFromBasket(item.pricingType.id, basket)) {
                                        hasOptionsForBasket = true;
                                        pricingTypesAvailable += (pricingTypesAvailable == '' ? '' : ', ') + translationStore.getString(item.pricingType.name);
                                    }
                                });
                                availInfo = pricingTypesAvailable == '' ? translationStore.getString('Not available for this order') : translationStore.getString('Available for') + ' ' + pricingTypesAvailable;
                            }
                            else {
                                hasOptionsForBasket = true;
                                availInfo = COMING_SOON;
                            }

                            var isBetaProduct = false;
                            if (val.productCategory.code == 'BETA') {
                                isBetaProduct = true;
                            }

                            var pricingInfo = hasPricing ? val['pricingInfo'] : translationStore.getString('Pricing not currently set');
                            // only show device if its visible and (has pricing or is coming soon)
                            if (val.isVisible && !expired && (hasPricing || comingSoon)) {
                                if (isBetaProduct) {
                                    h.push('<div id="betaBanner"><div>' + translationStore.getString('BETA PRODUCT') + '</div></div>');
                                }

                                if (val.isPromoted) {
                                    h.push('<div class="gms-box ' + 'promoted' + ' padded-double productItem productButton" title="' + pricingInfo + '">');
                                }
                                else {
                                    h.push('<div class="gms-box ' + (comingSoon ? 'light-blue' : 'clear') + ' padded-double productItem productButton" title="' + pricingInfo + '">');
                                }
                                h.push('<label class="subdued" style="font-size: 0.8em;">' + val.productCategory.name + '</label>');
                                h.push('<table><tr style="height:110px;"><td style="width:110px;"><img style="max-height: 110px; max-width: 110px; /*height:105px; width:160px;*/" class="productImage" alt="(' + translationStore.getString('No Image Available') + ')" src="' + imageUrl + '" /></td>');
                                h.push('<td style="width:100%;><div class="padded"><label class="subdued">' + val.code + '</label>&nbsp;<label>' + val.name + '</label></div>');
                                if (val.comments && val.comments.length > 0) {
                                    h.push('<div class="red-bold padded">' + val.comments + '</div>');
                                }
                                h.push('</td>');
                                h.push('<td style="min-width:300px;" class="align-center">');

                                if (!hasOptionsForBasket) {
                                    h.push('<div class="subdued" style="font-size: 0.8em; padding-bottom: 0.6em;">' + translationStore.getString('Not Available for Current Order') + '</div>');
                                }
                                else {
                                    h.push('<div class="' + (comingSoon ? 'red' : 'good') + ' strong" style="font-size: 0.8em; padding-bottom: 0.6em;">' + availInfo + '</div>');
                                }
                                h.push('<button>' + translationStore.getString('More Info') + '</button><input type="hidden" value="' + val.id + '" />');
                                if (val.docLink != null) {
                                    h.push('<div class="subdued" style="font-size: 0.8em; padding-top: 1em;">' + '<a href="' + val.docLink + '">' + translationStore.getString("Product Info") + '</a></div>');
                                }

                                h.push('</td>');



                                h.push('</tr></table>');
                                h.push('</span></div>');
                            }
                        });
                    }
                    if (h.length == 0) {
                        h.push('<div class="subdued align-center" style="height: 200px; padding-top: 8em;">' + translationStore.getString('There are currently no products that match your criteria'));
                        h.push('<div class="productButton" style="padding-top: 2em;"><button>' + translationStore.getString('Add Custom Product to Basket') + '</button><input type="hidden" value="-1" /></div>');
                        h.push('</div>');
                        $productDiv.html(h.join(''));
                    }
                    $productDiv.html(h.join(''));
                    $productDiv.find('.productItem').tooltip({
                        track: true
                    });
                    $productDiv.find('img').on('error', function () {
                        MyTools.Orders.Ui.imgError(this);
                    });
                    $productDiv.find('.productButton').find('button').button().on("click", function () {
                        //showProductInfo
                        var id = parseInt($(this).parent().find('input[type=hidden]').val());
                        var p = orders2.getSolidProductFromId(id, $('#order2_productSearchBox').val());
                        var account = $accountList.erpAccount(userStore);
                        orders2.showProductInfo($productDiv, p, account, userStore, '', function () {
                            $catDiv.find('.selected').on("click", );
                        });
                    });
                    if (isBeta) {
                        $('#resetBetaTC').button().on("click", function () {
                            MyTools.Orders.resetBetaTC(sessionId, userStore.activeUser(), 0,
                                function () {
                                    $.popupMessage(2, translationStore.getString('Beta Agreement response reset!'), function () {
                                        location.reload();
                                    });
                                },
                                function (error) {
                                    $.popupMessage(1, parseError(error), function () {
                                        location.reload();
                                    });
                                });
                        });
                    }
                    if (callback) {
                        callback();
                    }
                };
                this.loadProductsToList = function (catId, searchString, isBeta, callback) {
                    $productDiv.html('');
                    var v = this;
                    if (isBeta) {
                        self.acceptedBetaHardwareAgreements(userStore.activeUser(), userStore, function () {
                            v.completeLoadProductsToList(catId, searchString, isBeta, callback);
                        });
                    } else {
                        this.completeLoadProductsToList(catId, searchString, isBeta, callback);
                    }

                };
                this.loadProductCategories = function (callback) {
                    $catDiv.html('');
                    $catDiv.mask(translationStore.getString('Loading categories...'));
                    MyTools.Orders.getProductCategories(sessionId, true, true, true, function (cats) {
                        $catDiv.unmask();
                        productCategories = cats;
                        var h = [];
                        h.push('<div class="catSelector defaultCategory">' + translationStore.getString('My Most Popular Products') + '<input type="hidden" value="-1"/></div>');
                        h.push('<div class="catSelector">' + translationStore.getString('My Recently Ordered Products') + '<input type="hidden" value="0"/></div>');
                        $.each(productCategories, function (key, val) {
                            if (!val.isChildCategory) {
                                h.push('<div class="catSelector' + (val.code == 'BETA' ? ' BETA' : '') + '">' + val.name + '<input type="hidden" value="' + val.id + '"/></div>');
                            }
                        });
                        h.push('<div id="Installation" class="catSelector" style="text-align: right;border-left:#c1ddf7 solid medium; display:none;">' + 'Installation' + '<input type="hidden" value="11"/></div>');
                        h.push('<div class="productSearch" style="height: 20px;">' + translationStore.getString('Product Search') +
                            '<input type="text" id="order2_productSearchBox" style="display: none;" placeholder="' + translationStore.getString('Product Code Filter') + '" title="' + translationStore.getString('Type in a product code and press Enter to filter') + '"/>' +
                            '<input type="hidden" value="999"/>' +
                            '</div>');

                        $catDiv.html(h.join(''));

                        function resetSearch() {
                            var $ps = $catDiv.find('.productSearch');
                            var $sb = $ps.find('#order2_productSearchBox');
                            if (!$sb || $sb.length == 0) {
                                return;
                            }
                            $sb.val('').fadeOut(400, function () {
                                $ps.height('20px');
                            });
                        }

                        $catDiv.find('.catSelector').on("click", function () {
                            resetSearch();
                            var id = $(this).find('input[type=hidden]').val();
                            $catDiv.find('.catSelector').removeClass('selected');
                            $(this).addClass('selected');
                            if (id === "10" || $(this).attr('id')) {
                                $catDiv.find('#Installation').slideDown("fast");
                            } else {
                                $catDiv.find('#Installation').slideUp("fast");
                            }

                            orders2.loadProductsToList(id, '', $(this).hasClass('BETA'));
                        });
                        $catDiv.find('.defaultCategory').addClass('selected');
                        $catDiv.find('.productSearch').on("mouseenter", function () {
                            $(this).height('50px');
                            $(this).find('#order2_productSearchBox').fadeIn();
                        }).on("mouseleave", function () {
                            if ($(this).find('#order2_productSearchBox').val().length == 0) {
                                resetSearch();
                            }
                        }).on("keypress", function (ev) {
                            if (ev && ev.keyCode && ev.keyCode == 13) {
                                var searchText = $(this).find('#order2_productSearchBox').val();
                                if (searchText.length > 0) {
                                    orders2.loadProductsToList(9999, searchText.toUpperCase(), false);
                                }
                            }
                        });
                        orders2.loadProductsToList(-1, '', false);
                        if (callback) {
                            callback();
                        }
                    });
                };
                this.fullRefresh = function (callback) {
                    // Load Sort Options
                    orders2.refreshSortOptions(function () {
                        // Load Products
                        orders2.refreshProductsArray(function () {
                            // Load Popular Codes
                            orders2.refreshPopularCodes(function () {
                                // Load recent codes
                                orders2.refreshRecentCodes(function () {
                                    // Load Categories
                                    orders2.loadProductCategories(function () {
                                        if (callback) {
                                            callback();
                                        }
                                    });
                                });
                            });
                        });
                    });
                };
                return orders2;
            }
        },
        resetBetaTC: function (sessionId, user, type, callback, errorCallback) {
            gmsApiCall({
                method: 'ResetUserBetaAgreementResponses',
                params: { sessionId: sessionId, user: user, typeId: type },
                success: function (result) {
                    if (callback) {
                        callback();
                    }
                },
                error: function (error) {
                    if (errorCallback) {
                        errorCallback(error);
                    }
                }
            });
        },
        getProductCategories: function (sessionId, includeCore, includeNonCore, includeBeta, callback) {
            gmsApiCall({
                method: 'GetProductCategories',
                params: { sessionId: sessionId, includeCore: includeCore, includeNonCore: includeNonCore, includeBeta: includeBeta },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        getProductsWithPricing: function (sessionId, forAccountId, productCodeFilter, promoCodeFilter, productCategoryFilter, devicePlanId, callback) {
            gmsApiCall({
                method: 'GetProductsWithPricing',
                params: { sessionId: sessionId, forAccountId: forAccountId, productCodeFilter: productCodeFilter, promoCodeFilter: promoCodeFilter, productCategoryFilter: productCategoryFilter, devicePlanId: devicePlanId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        GetProductsForRmaRequest: function (sessionId, forAccountId, productCodeFilter, promoCodeFilter, productCategoryFilter, devicePlanId, callback) {
            gmsApiCall({
                method: 'GetProductsForRmaRequest',
                params: { sessionId: sessionId, forAccountId: forAccountId, productCodeFilter: productCodeFilter, promoCodeFilter: promoCodeFilter, productCategoryFilter: productCategoryFilter, devicePlanId: devicePlanId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        getTopOrderedProductCodes: function (sessionId, accountId, callback) {
            gmsApiCall({
                method: 'GetTopXProductCodes',
                params: { sessionId: sessionId, accountId: accountId, topXValue: 10 },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        getRecentOrderedProductCodes: function (sessionId, accountId, callback) {
            gmsApiCall({
                method: 'GetRecentXProductCodes',
                params: { sessionId: sessionId, accountId: accountId, topXValue: 10 },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        autoCompletePurchaseOrders: function (store, $field, account) {
            if (account == null) {
                return;
            }
            var dateTo = MyTools.DateTime.now();
            var dateFrom = dateTo.addMonths(-2);
            store['getUsedPurchaseOrderForAccount'](sessionId, account, dateFrom, dateTo, true, function (data) {
                $field.autocomplete({
                    source: data.result
                });
            });
        },
        getPersistedOrderBasket: function () {
            // Get basket
            var orderBasket = sessvars.orderBasket;
            if (orderBasket == null) {
                orderBasket = {
                    orderTypeId: -1,
                    planningOrderId: -1,
                    planningOrderNo: '',
                    dateTime: MyTools.DateTime.now(),
                    products: [
                    ]
                };
            }
            return orderBasket;
        },
        getOrderFromId: function (sessionId, orderId, callback) {
            gmsApiCall({
                method: 'GetOrderHeader',
                params: { sessionId: sessionId, orderHeaderId: orderId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getAdditionalFormFieldsForAccount: function (orderHeaderId, account, callback) {
            gmsApiCall({
                method: 'GetAdditionalFormFieldsForAccount',
                params: { sessionId: sessionId, orderHeaderId: orderHeaderId, account: account },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getCurrencyRate: function (sessionId, account, effectiveFrom, callback) {
            gmsApiCall({
                method: 'GetCurrencyRate',
                params: { sessionId: sessionId, account: account, effectiveFrom: effectiveFrom },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getAllCurrentCurrencyRates: function (sessionId, callback) {
            gmsApiCall({
                method: 'GetAllCurrentCurrencyRates',
                params: { sessionId: sessionId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        cancelOrder: function (sessionId, orderId, callback) {
            gmsApiCall({
                method: 'CancelOrder',
                params: { sessionId: sessionId, orderId: orderId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        postOrder: function (sessionId, orderHeader, callback) {
            gmsApiCall({
                method: 'PostOrderV2',
                params: { sessionId: sessionId, orderHeader: orderHeader },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },

        validateQuantity: function (orderHeader, callback) {
            gmsApiCall({
                method: "ValidateOrderQuantity",
                params: { orderHeader: orderHeader },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getShippingFees: function (sessionId, accountId, countryId, callback) {
            gmsApiCall({
                method: 'GetShippingFees',
                params: { sessionId: sessionId, accountId: accountId, countryId: countryId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getFreeOrderItems: function (sessionId, orderHeaderId, callback) {
            gmsApiCall({
                method: 'ValidateFreeOrderItemsAsync',
                params: { sessionId: sessionId, orderHeaderId: orderHeaderId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        productCodeNotes: [
            { productCode: 'GEOSATIRDV2', message: 'Please Note: Iridium devices must be activated 48 hours before intended use, by sending the IMEI number to activations@geotab.com', startDate: '2001-01-01', endDate: '2050-01-01' },
            { productCode: 'IOXSATIRDV2', message: 'Please Note: Iridium devices must be activated 48 hours before intended use, by sending the IMEI number to activations@geotab.com', startDate: '2001-01-01', endDate: '2050-01-01' }
        ]
    },
    Repairs: {
        getReturnReasons: function (callback) {
            gmsApiCall({
                method: 'GetReturnReasons',
                params: { sessionId: sessionId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getRmaTypes: function (callback) {
            gmsApiCall({
                method: 'GetRmaTypes',
                params: { sessionId: sessionId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        populateRmaNumbers: function ($field, accountId, includeComplete, includePending, callback) {
            if (!$field || $field.length == 0 || !accountId || accountId < 1) {
                return;
            }
            var isSelect = $field.is('select');
            gmsApiCall({
                method: 'GetRmaNumbers',
                params: { sessionId: sessionId, accountId: accountId, includeComplete: includeComplete, includePending: includePending },
                success: function (result) {
                    if (isSelect) {
                        $field.empty();
                        $.each(result, function () {
                            $field.append($("<option />").val(result).text(result));
                        });
                    }
                    else {
                        $field.autocomplete({
                            source: result
                        });
                    }
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                }
            });
        },
        Requests: {
            lookupRepairItems: function (sessionId, serialNos, account, callback) {
                gmsApiCall({
                    method: 'LookupItemsForRepair',
                    params: { sessionId: sessionId, serialNos: serialNos, account: account },
                    success: function (result) {
                        if (callback) {
                            callback(result);
                        }
                    },
                    error: function (error) {
                        $.popupMessage(1, parseError(error), '');
                        if (callback) {
                            callback(null);
                        }
                    }
                });
            },
            submitItemsForRma: function (sessionId, account, rmaTypeId, shipToId, caseNo, comments, internalComments, resellerReference, rmaRequestInfos, ccEmailAddress, callback) {
                gmsApiCall({
                    method: 'SubmitItemsForRma',
                    params: { sessionId: sessionId, account: account, rmaTypeId: rmaTypeId, shipToId: shipToId, caseNo: caseNo, comments: comments, internalComments: internalComments, resellerReference: resellerReference, rmaRequestInfos: rmaRequestInfos, ccEmailAddress: ccEmailAddress },
                    success: function (result) {
                        if (callback) {
                            callback(result);
                        }
                    },
                    error: function (error) {
                        $.popupMessage(1, parseError(error), '');
                        if (callback) {
                            callback(null);
                        }
                    }
                });
            },
            validateSalesReturnItems: function (sessionId, account, itemsToValidate, callback) {
                gmsApiCall({
                    method: 'ValidateSalesReturnItems',
                    params: { sessionId: sessionId, account: account, itemsToValidate: itemsToValidate },
                    success: function (result) {
                        if (callback) {
                            callback(result);
                        }
                    },
                    error: function (error) {
                        $.popupMessage(1, parseError(error), '');
                        if (callback) {
                            callback(null);
                        }
                    }
                });
            },
            autoApproveRmaRequest: function (sessionId, account, rmaRequest, callback) {
                gmsApiCall({
                    method: 'AutoApproveRmaRequest',
                    params: { sessionId: sessionId, account: account, rmaRequest: rmaRequest },
                    success: function (result) {
                        if (callback) {
                            callback(result);
                        }
                    },
                    error: function (error) {
                        $.popupMessage(1, parseError(error), '');
                        if (callback) {
                            callback(null);
                        }
                    }
                });
            },

            request: function ($owner, userStore, sns, defaultAccount, onSubmit) {
                var user = userStore.activeUser(),
                    translationStore = userStore.getTranslationStore(),
                    formSerialNos = [],
                    formQuantities = [],
                    formReasons = [];
                var isTicketNumReq = true;
                var userGuid = user.userId;
                var skuList = [];
                var returnReasonList = [];
                var requestHtml = function () {
                    var h = [];
                    h.push('<div id="rmasRequest_createRmaDialog">' +
                        '<ul class="tableGrid twoColumn shadow">' +
                        '<li class="header asterisk">' + translationStore.getString('Account') + ':</li><li><span id="rmasRequest_erpList"></span><label id="accountErrorLabel"></label></li>' +
                        '<li class="header asterisk">' + translationStore.getString('RMA Request Type') + ':</li><li><select id="rmasRequest_requestTypeList"></select><label id="typeErrorLabel"></label></li>');
                    isTicketNumReq = checkTicketNumReq(user);
                    if (isTicketNumReq) {
                        h.push('<li class="header asterisk" id="rmasRequest_caseIdHeader">' + translationStore.getString('Related Ticket Number') + ':</li><li><input id="rmasRequest_caseIdBox" class="required" type="text" placeholder="' + translationStore.getString('Valid Ticket Number') + '" title="' + translationStore.getString('Enter a valid ticket number or leave it blank if there is no ticket') + '" /><label id="ticketErrorLabel"></label></li>');
                    } else {
                        h.push('<li class="header" id="rmasRequest_caseIdHeader">' + translationStore.getString('Related Ticket Number') + ':</li><li><input id="rmasRequest_caseIdBox" type="text" placeholder="' + translationStore.getString('Valid Ticket Number') + '" title="' + translationStore.getString('Enter a valid ticket number or leave it blank if there is no ticket') + '" /></li>');
                    }
                    h.push('<li class="header">' + translationStore.getString('Reseller Reference') + ':</li><li><input id="rmasRequest_resellerReferenceBox" type="text" placeholder="' + translationStore.getString('My Reference') + '" title="' + translationStore.getString('Enter a reference value') + '"/></li>' +
                        '<span id="rmasRequest_shippingSpan" class="gms-hidden">' +
                        '<li class="header asterisk">' + translationStore.getString('Ship to') + ':</li><li><button id="rmasRequest_selectShipToButton" title="' + translationStore.getString('Click here to select the shipping address') + '">&nbsp;</button>&nbsp;' +
                        '<span id="rmasRequest_shipToBox"></span><input id="rmasRequest_shipToIdBox" type="hidden"/><label id="shipToErrorLabel"></label></li></span>' +
                        '<li class="header">' + translationStore.getString('Cc Email Address') + ':</li><li><input id="rmasRequest_ccEmailbox" class="email" type="text" placeholder="' + translationStore.getString('Email Address') + '" title="' + translationStore.getString('Enter comma-separated email addresses to send RMA confirmation') + '"/><label id="invalidEmailAddress"></label></li>' +
                        '<li class="header">' + translationStore.getString('Request Comments') + ':</li><li><textarea cols="40" rows="3" id="rmasRequest_commentsBox" placeholder="' + translationStore.getString('RMA Request comments') + '" title="' + translationStore.getString('Enter any comments relative to this request') + '"></textarea></li>' +
                        '<li class="header">&nbsp;</li><li>&nbsp;</li>');
                        
                        var isEdit = false;
                        var isView = false;
                        $.each(user.roles, function () {
                            if (this.name === "GMS-RMA-InternalComments-View") {
                                isView = true;
                            }
                            if (this.name === "GMS-RMA-InternalComments-Edit") {
                                isEdit = true;
                            }
                        });
                        if (isEdit) {
                            h.push('<li class="header">' + translationStore.getString('Internal Comments') + '</li><li><textarea cols="40" rows="3" id="rmasRequest_internalCommentsBox" placeholder="' + translationStore.getString('RMA Internal Comments') + '" title="' + translationStore.getString('Enter any comments related to this request') + '"></textarea></li>' +
                                '<li class="header">&nbsp;</li><li>&nbsp;</li>');
                        } else if (isView) {
                            h.push('<li class="header">' + translationStore.getString('Internal Comments') + '</li><li><textarea cols="40" rows="3" id="rmasRequest_internalCommentsBox" placeholder="' + translationStore.getString('RMA Internal Comments') + '" title="' + translationStore.getString('Enter any comments related to this request') + '" disabled></textarea></li>' +
                                '<li class="header">&nbsp;</li><li>&nbsp;</li>');
                        }
                    h.push('</ul>' +
                        '<span id="rmasRequest_userContainer"></span><ul id="rmasRequest_deviceList" class="tableGrid gridLines fourColumn shadow" style="height: 200px;"></ul>' +
                        '<div id="rmasRequest_warningDiv" class="gms-box alert padded gms-hidden">' + translationStore.getString('* Do not include any out-of-warranty items. Those items cannot be repaired or credited and will be returned back to you in their original condition.') + '</div>' +
                        '</div>');
                    return h.join('');
                };

                var itemsInList = function () {
                    var items = [];
                    formSerialNos = [];
                    formQuantities = [];
                    formReasons = [];
                    var listItems = $("#rmasRequest_deviceList").find("li.first");
                    listItems.each(function (idx, li) {
                        var $li = $(li);
                        var sn = $li.find('label').text();
                        var $qli = $li.next('li');
                        var qty = $qli.text();
                        var $wli = $qli.next('li');
                        var ws = $wli.find('label').text();
                        var $rli = $wli.next('li');
                        var rs;
                        if (parseInt($('#rmasRequest_requestTypeList').val()) == 4) {
                            rs = $rli.find(":selected").text();
                        }
                        else {
                            rs = $rli.find('input').val();
                        }
                        var item = { 'name': sn, 'qty': qty, 'warrantyStatus': ws, 'reason': rs };
                        items.push(item);
                        formSerialNos.push(sn);
                        formQuantities.push(qty);
                        formReasons.push(rs);
                    });
                    return items;
                };

                function checkTicketNumReq(user) {                  
                    $.each(user.roles, function () {
                        if (this.name === "GMS-RMAAutoApprove") {
                            isTicketNumReq = false;
                        }
                    });
                    return isTicketNumReq;
                }

                function resetWarning() {
                    var warningLength = $('#rmasRequest_deviceList').find('.myBad').length;
                    if (warningLength > 0) {
                        $('#rmasRequest_warningDiv').show();
                    }
                    else {
                        $('#rmasRequest_warningDiv').hide();
                    }
                }

                function addItemsToList(itemsToAdd, rmaTypeId, callback) {
                    var $ul = $('#rmasRequest_deviceList');
                    var nowDate = new Date();
                    $ul.mask(translationStore.getString('Loading items...'));
                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("disable");
                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("disable");
                    var snList = [];
                    //var returnReasons = [];
                    var existingItems = itemsInList();
                    var hasExistingItems = existingItems.length > 0;
                    var duplicate = false;
                    itemsToAdd.forEach(function (item) {
                        duplicate = false;
                        if (hasExistingItems) {
                            formItems:
                            for (var i = 0; i < formSerialNos.length; i++) {
                                if (formSerialNos[i] == item.sku) {
                                    duplicate = true;
                                }
                            }
                        }
                        if (!duplicate) {
                            snList.push(item.sku);
                        }
                    });
                    var accountId = selectedAccountId();
                    MyTools.Repairs.Requests.lookupRepairItems(userStore.sessionId, snList, $("#rmasRequest_erpList").erpAccount(userStore), function (items) {
                        if (items && items.length > 0) {
                            // load items into ul
                            var ulh = [];
                            $('#rmasRequest_warningDiv').hide();
                            for (var i = 0; i < items.length; i++) {
                                var isFirstItem = !hasExistingItems && i == 0;
                                // Add in headers if its the first item
                                if (isFirstItem) {
                                    ulh.push('<li class="header">' + translationStore.getString('Item') + '</li>');
                                    ulh.push('<li class="header" ' + 'style="width:20%">' + translationStore.getString('Quantity') + '</li>');
                                    ulh.push('<li class="header" ' + 'style="width:20%">' + translationStore.getString('Warranty') + '</li>');
                                    ulh.push('<li class="header asterisk" ' + 'style="width:35%">' + translationStore.getString('RMA Reason') + '</li>');
                                }
                                var itemForRepair = items[i];
                                var isValid = itemForRepair.isValid;
                                var myClass = 'myGood',
                                    ws = translationStore.getString('Under Warranty');
                                if (!isValid) {
                                    myClass = 'myInactive';
                                    ws = translationStore.getString('Unknown');
                                }
                                else if (!itemForRepair.underWarranty) {
                                    myClass = 'myBad';
                                    ws = translationStore.getString('Out of Warranty *');
                                }
                                ulh.push('<li class="first"><button class="removeItem" title="' + translationStore.getString('Click here to remove this record') + '">&nbsp;</button>&nbsp;');
                                ulh.push('<label>' + itemForRepair.name + '</label>');
                                ulh.push('</li>');
                                ulh.push('<li ' + 'style="width:20%"> ' + itemsToAdd[i].qty + '</li>');
                                ulh.push('<li ' + 'style="width:20%"> ' + '<label class="' + myClass + '">' + ws + '</label></li>');
                                ulh.push('<li style="width:35%">' + '<input class="' + (rmaTypeId == 4 ? '' : 'required ') + ' returnReasonText" type="text" ' + (rmaTypeId == 4 ? 'style="display:none"' : '') + '/>' + '<select class="' + (rmaTypeId == 4 ? 'required' : '') + ' returnReasonSelect" ' + (rmaTypeId == 4 ? '' : 'style="display:none"') + '>');
                                ulh.push('<option selected></option>');
                                if (returnReasonList) {
                                    for (var j = 0; j < returnReasonList.length; j++) {
                                        var item = returnReasonList[j];
                                        ulh.push('<option value="' + item.id + '">' + translationStore.getString(item.name) + '</option>');
                                    }
                                }
                                ulh.push('</select >' + (isFirstItem ? '<button class="copyDown" title="' + translationStore.getString('Click here to copy the RMA Reason to all other items') + '">&nbsp;</button>' : '') + '</li > ');
                            }
                            $('#rmasRequest_deviceList').append(ulh.join(''));
                            resetWarning();
                        }
                        $ul.unmask();
                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                        $ul.find("button.copyDown").button({
                            icons: {
                                primary: "ui-icon-copy"
                            },
                            text: false
                        }).on("click", function (event) {                            
                            var text;
                            if (parseInt($('#rmasRequest_requestTypeList').val()) != 4) {
                                text = $(this).prev().prev().val();
                                if (text && text.length > 0) {
                                    $('#rmasRequest_deviceList').find('input').each(function () {
                                        $(this).val(text);
                                    });
                                }
                            }
                            else {
                                var selectedValue = $(this).prev().find(':selected').val();
                                if (selectedValue && selectedValue.length > 0) {
                                    $('#rmasRequest_deviceList').find('select').each(function () {
                                        $(this).val(selectedValue);
                                    });
                                }
                            }                            
                        }).tooltip();
                        $ul.find("button.removeItem").button({
                            icons: {
                                primary: "ui-icon-trash"
                            },
                            text: false
                        }).on("click", function (e) {
                            var $li = $(this).parent();
                            removeItemFromList($li);
                        }).tooltip();                        
                        if (callback) {
                            callback();
                        }
                    });
                }

                function removeItemFromList($li) {
                    $li.next('li').next('li').next('li').remove();
                    $li.next('li').next('li').remove();
                    $li.next('li').remove();
                    $li.remove();
                    if (itemsInList().length == 0) {
                        $('#rmasRequest_deviceList').html('');
                    }
                    resetWarning();
                }

                function reloadSkuList(accountId, callback) {
                    MyTools.Orders.GetProductsForRmaRequest(userStore.sessionId, null, '', '', null, null, function (products) {
                        if (products) {
                            var skuListWithDup = [];
                            skuList = [];
                            products.forEach(function (product) {
                                skuListWithDup.push(product.code);
                            });
                            $.each(skuListWithDup, function (i, el) {
                                if ($.inArray(el, skuList) === -1) skuList.push(el);
                            });
                        }
                        if (callback) {
                            callback();
                        }
                    });
                }

                function reloadReturnReasons(accountId, callback) {
                    returnReasonList = [];
                    MyTools.Repairs.getReturnReasons(function (result) {
                        returnReasonList = result;
                        if (callback) {
                            callback();
                        }
                    });
                }

                function reloadRmaTypes(accountId, callback) {
                    var $requestTypeList = $('#rmasRequest_requestTypeList');
                    $requestTypeList.change('');
                    $requestTypeList.html('');
                    if (accountId < 1) {
                        if (callback) {
                            callback();
                        }
                        return;
                    }
                    // Load rma types
                    MyTools.Repairs.getRmaTypes(function (results) {
                        var user = userStore.activeUser();
                        var h = [];
                        var previous;
                        for (var i = 0; i < results.length; i++) {
                            var item = results[i];
                            var sh = item.id == 2 ? 'selected' : ' ';
                            h.push('<option value="' + item.id + '"' + sh + '>' + translationStore.getString(item.name) + '</option>');
                        }
                        $('#rmasRequest_requestTypeList').html(h.join(''));
                        var defaultType = parseInt($('#rmasRequest_requestTypeList').val());

                        $("#rmasRequest_requestTypeList").html($("#rmasRequest_requestTypeList option").sort(function (a, b) {
                            return a.text == b.text ? 0 : a.text < b.text ? -1 : 1;
                        }));
                        $('#rmasRequest_requestTypeList').val(defaultType);

                        $requestTypeList.on('focus', function () {
                            previous = parseInt($(this).val());
                        }).on("change", function () {
                            var rmaTypeId = parseInt($(this).val());
                            if (previous == 4) {
                                $('.returnReasonSelect').removeClass("required");
                                $('.returnReasonSelect').removeClass("bad-box");
                                $('.returnReasonSelect').hide();
                                $('.returnReasonText').addClass("required");
                                $('.returnReasonText').show();
                                if (checkTicketNumReq(user)) {
                                    $('#rmasRequest_caseIdHeader').addClass("asterisk");
                                    $('#rmasRequest_caseIdBox').addClass("bad-box");
                                    $('#ticketErrorLabel').html(translationStore.getString("This field is required"));
                                }
                            }
                            else if (rmaTypeId == 4) {
                                $('.returnReasonText').removeClass("required");
                                $('.returnReasonText').removeClass("bad-box");
                                $('.returnReasonText').hide();
                                $('.returnReasonSelect').addClass("required");
                                $('.returnReasonSelect').show();
                                $('#rmasRequest_caseIdHeader').removeClass("asterisk");
                                $('#rmasRequest_caseIdBox').removeClass("bad-box");
                                $('#ticketErrorLabel').html("");
                            }
                            if (rmaTypeId == 1) {
                                $('#rmasRequest_shippingSpan').show();
                            }
                            else {
                                $('#rmasRequest_shippingSpan').hide();
                            }
                            previous = rmaTypeId;
                        });
                        if (callback) {
                            callback();
                        }
                    });
                }

                var selectedAccountId = function () {
                    var account = $("#rmasRequest_erpList").erpAccount(userStore);
                    return !account || !account.id ? -1 : account.id;
                };

                function errorMessageCheck() {
                    var container = document.querySelector("#rmasRequest_erpList");
                    var element = container.querySelector("#erpList");
                    var accountType = element.value;
                    var ticketNum = $('#rmasRequest_caseIdBox').val();
                    var requestTypeId = parseInt($('#rmasRequest_requestTypeList').val())
                    var shipAddress = $('#rmasRequest_shipToBox').text();
                    var fields = "";

                    if (accountType == "") {
                        $(element).addClass("bad-box");
                        $('#accountErrorLabel').addClass("gms-hint bad")
                        $('#accountErrorLabel').html(translationStore.getString("This field is required"));
                        fields = "Acc";
                    }
                    if (ticketNum == "" && requestTypeId != 4 && checkTicketNumReq(user)) {
                        $('#rmasRequest_caseIdBox').addClass("bad-box");
                        $('#ticketErrorLabel').addClass("gms-hint bad")
                        $('#ticketErrorLabel').html(translationStore.getString("This field is required"));
                        fields += "Ticket";
                    } else {
                        $('#rmasRequest_caseIdBox').removeClass("bad-box");
                        $('#ticketErrorLabel').removeClass("gms-hint bad")
                        $('#ticketErrorLabel').html("");
                    }   
                    if (requestTypeId == 1) {
                        if (shipAddress == "") {
                            $('#shipToErrorLabel').addClass("gms-hint bad")
                            $('#shipToErrorLabel').html(translationStore.getString("This field is required"));
                            fields += "ShipAdd";
                        }
                    }
                    return fields;
                }

                function loadDialog(callback) {
                    $owner.append(requestHtml());
                    var $dlg = $('#rmasRequest_createRmaDialog');
                    $("#rmasRequest_erpList").erpList(userStore, {
                        defaultAccountNo: defaultAccount == null ? '' : defaultAccount.accountId, autoHide: false, onChanged: function () {
                            var $requestTypeList = $('#rmasRequest_requestTypeList');
                            // reset form
                            $('#rmasRequest_shipToIdBox').val('');
                            $('#rmasRequest_shipToBox').text('');
                            $('#rmasRequest_deviceList').empty();
                            // check account
                            var accountId = selectedAccountId();
                            reloadRmaTypes(accountId, '');
                            reloadReturnReasons(accountId);
                            reloadSkuList(accountId);
                            if (accountId < 1) {
                                return;
                            }
                            // lookup items with new account
                            itemsInList();
                            if (formSerialNos.length > 0) {
                                addItemsToList(formSerialNos, parseInt($requestTypeList.val()), '');
                            }
                        }
                    });
                    $("#rmasRequest_selectShipToButton").button({
                        icons: {
                            primary: "ui-icon-tag"
                        },
                        text: false
                    }).on("click", function () {
                        var account = $("#rmasRequest_erpList").erpAccount(userStore);
                        if (account == null) {
                            return;
                        }
                        $('#rmasRequest_userContainer').userContactList(userStore, {
                            showLocalPickup: true,
                            dialogMode: true,
                            defaultAccountNo: account.accountId,
                            onSelect: function (result) {
                                if (!result) {
                                    $('#rmasRequest_shipToIdBox').val(-1);
                                    $('#rmasRequest_shipToBox').text(translationStore.getString('Do Not Ship') + ' (' + translationStore.getString('Local Pickup') + ')');
                                }
                                else {
                                    $('#rmasRequest_shipToIdBox').val(result.id);
                                    $('#rmasRequest_shipToBox').text(result['displayListName']).attr('title', result['displayListName']);
                                }
                                $('#shipToErrorLabel').html("");
                            }
                        }, $dlg);
                    });
                    var queryStringParamsAll = queryString.split("&");
                    var queryStringParams = new Array();
                    queryStringParamsAll.forEach(function (item) {
                        var qpItem = item.split("=");
                        queryStringParams[qpItem[0]] = qpItem[1];
                    }
                    );

                    var emailAddressArray;

                    $('#rmasRequest_ccEmailbox').on("change", function () {
                        var badbox = false;
                        var setOfemailAddresses = $('#rmasRequest_ccEmailbox').val();
                        emailAddressArray = setOfemailAddresses.split(',');
                        emailAddressArray.forEach(function (emailAddress) {
                            emailAddress = emailAddress.trim();
                            if (emailAddress !== "") {
                                if (!isValidEmailAddress(emailAddress)) {
                                    badbox = true;
                                }
                            } else {
                                $('#rmasRequest_ccEmailbox').removeClass("bad-box");
                                $('#invalidEmailAddress').removeClass("gms-hint bad")
                                $('#invalidEmailAddress').html("");
                            }
                        });
                        if (badbox) {
                            $('#rmasRequest_ccEmailbox').addClass("bad-box");
                            $('#invalidEmailAddress').addClass("gms-hint bad");
                            $('#invalidEmailAddress').html(translationStore.getString("Invalid Email Address"));
                        } else {
                            $('#rmasRequest_ccEmailbox').removeClass("bad-box");
                            $('#invalidEmailAddress').removeClass("gms-hint bad")
                            $('#invalidEmailAddress').html("");
                        }
                    });

                    $dlg.dialog(
                        {
                            title: translationStore.getString("Create New RMA Request"),
                            width: 1050,
                            minHeight: 600,
                            modal: true,
                            close: function () {
                                $(this).dialog('destroy').remove();
                            },
                            buttons: [
                                {
                                    text: translationStore.getString("Add Products"),
                                    click: function () {
                                        MyTools.Dialogs.Common.rmaCapture($dlg, userStore, $("#rmasRequest_erpList").erpAccount(userStore), skuList, parseInt($('#rmasRequest_requestTypeList').val()), function (newItems) {
                                            addItemsToList(newItems, parseInt($('#rmasRequest_requestTypeList').val()), function () {
                                                if (newItems.length > 1000) {
                                                    $.popupMessageToOwner($dlg, 2, "Due to the large number of devices, this may take a few minutes to complete. Please do not refresh your browser.", '');
                                                }
                                            });
                                        });
                                    }
                                },
                                {
                                    text: translationStore.getString('Submit'),
                                    click: function () {
                                        var $body = $('body'),
                                            $dlg = $(this);
                                        $body.mask(translationStore.getString('Please wait...'));
                                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("disable");
                                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("disable");
                                        var requestTypeId = parseInt($('#rmasRequest_requestTypeList').val());
                                        var errorFields = errorMessageCheck();

                                        //Are all required fields filled
                                        if (errorFields == "AccTicketShipAdd") {
                                            $body.unmask();
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                            $.popupMessageToOwner($dlg, 2, translationStore.getString('Please fill out all required fields.'), '');
                                            return;
                                        }

                                        // Is account field empty
                                        if (errorFields == "Acc") {
                                            $body.unmask();
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                            $.popupMessageToOwner($dlg, 2, translationStore.getString('Please enter a valid Account Type.'), '');
                                            return;
                                        }

                                        // Is Shipping Required
                                        var shipToId = -1;
                                        if (requestTypeId == 1) {
                                            var shipId = $('#rmasRequest_shipToIdBox').val();
                                            if (shipId != '') {
                                                shipToId = parseInt(shipId);
                                            }
                                            else {
                                                $body.unmask();
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                                $.popupMessageToOwner($dlg, 2, translationStore.getString('Please select a valid Shipping Address.'), '');
                                                return;
                                            }
                                        }

                                        // Is Case no valid
                                        if (checkTicketNumReq(user)) {
                                            var caseIdString = $('#rmasRequest_caseIdBox').val();
                                            var caseId = '';
                                            if (caseIdString && caseIdString.length > 0) {
                                                caseId = MyTools.getInt(caseIdString);
                                                if (!caseId) {
                                                    $('#rmasRequest_caseIdBox').addClass("bad-box");
                                                    $('#ticketErrorLabel').addClass("gms-hint bad");
                                                    $('#ticketErrorLabel').html(translationStore.getString("This field is required"));
                                                    $body.unmask();
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                                    $.popupMessageToOwner($dlg, 2, translationStore.getString('Please enter a valid ticket number relating to this RMA Request.'), '');
                                                    return;
                                                }
                                            }
                                            else if (requestTypeId != 4) {
                                                $body.unmask();
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                                $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                                $.popupMessageToOwner($dlg, 2, translationStore.getString('Please enter a valid ticket number relating to this RMA Request.'), '');
                                                return;
                                            }
                                        }
                                        
                                        // Are items valid
                                        var items = itemsInList();
                                        if (!formSerialNos || formSerialNos.length == 0) {
                                            $body.unmask();
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                            $.popupMessageToOwner($dlg, 2, translationStore.getString('Please add in at least one item for the RMA request.'), '');
                                            return;
                                        }
                                        // Do items have reasons
                                        if (!validateRmaReasons($(this).find('#rmasRequest_deviceList'))) {
                                            $body.unmask();
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                            $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                            $.popupMessageToOwner($dlg, 2, translationStore.getString('Please ensure that all items have an assigned RMA Reason.'), '');
                                            return;
                                        }
                                        
                                        var account = $("#rmasRequest_erpList").erpAccount(userStore);
                                        var rmaRequestItems = [];
                                        for (var i = 0; i < formSerialNos.length; i++) {
                                            rmaRequestItems.push({ 'sn': formSerialNos[i], 'quantity': parseInt(formQuantities[i]), 'reason': formReasons[i] });
                                        }
                                        if (requestTypeId == 4) {  //Sales Return
                                            MyTools.Repairs.Requests.validateSalesReturnItems(userStore.sessionId, account, rmaRequestItems, function (result) {
                                                if (!result) {
                                                    $body.unmask();
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                                    $.popupMessageToOwner($dlg, 2, translationStore.getString('These device(s) do not qualify for Sales Returns. The device(s) are either active, purchased more than 30 days ago, or no longer eligible for Sales Returns.'), '');
                                                    return;
                                                }
                                                //get items that will be excluded from this rma
                                                var approvedItems = [], diffIndex = [], requestItems = [];
                                                var allItemsApproved = true;
                                                for (var i = 0; i < result.length; i++) {
                                                    approvedItems.push({ 'sn': result[i].sn, 'quantity': parseInt(result[i].quantity), 'reason': result[i].reason });
                                                    requestItems.push({ 'sn': result[i].sn, 'quantity': result[i].quantity, 'approved': true });
                                                    diffIndex[result[i].sn] = true;
                                                }
                                                for (i = 0; i < rmaRequestItems.length; i++) {
                                                    if (!diffIndex[rmaRequestItems[i].sn]) {
                                                        requestItems.push({ 'sn': rmaRequestItems[i].sn, 'quantity': parseInt(rmaRequestItems[i].quantity), 'approved': false });
                                                        allItemsApproved = false;
                                                    }
                                                }
                                                console.log(requestItems);
                                                if (!allItemsApproved) { 
                                                    //Prompt user about items to be excluded from Rma
                                                    $body.unmask();
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                                    MyTools.Dialogs.Common.salesReturnReview($dlg, $("#rmasRequest_erpList").erpAccount(userStore), approvedItems, requestItems, function () {
                                                        $body.mask(translationStore.getString('Please wait...'));
                                                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("disable");
                                                        $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("disable");
                                                        MyTools.Repairs.Requests.submitItemsForRma(userStore.sessionId, account, requestTypeId, shipToId, caseIdString, $('#rmasRequest_commentsBox').val(), $('#rmasRequest_internalCommentsBox').val(), $('#rmasRequest_resellerReferenceBox').val(), approvedItems, $('#rmasRequest_ccEmailbox').val(), function (result) {
                                                            if (!result || result.id < 1) {
                                                                $body.unmask();
                                                                $.popupMessageToOwner($dlg, 1, translationStore.getString('There was a problem submitting your request. Please try again. If the problem persists, please contact Geotab.'), '');
                                                                return;
                                                            }
                                                            var rmaRequest = result;
                                                            MyTools.Repairs.Requests.autoApproveRmaRequest(userStore.sessionId, account, rmaRequest, function (result) {
                                                                $body.unmask();
                                                                if (!result || result.id < 1) {
                                                                    $.popupMessageToOwner($dlg, 1, translationStore.getString('There was a problem auto approving this request. The RMA Request has been created, and will now need to be manually approved.'), '');
                                                                }
                                                                $dlg.dialog("close");
                                                                $.popupMessage(3, translationStore.getString('Thank you, your RMA has been processed. Here is your RMA Number: ') + result.rmaId, function () {
                                                                    if (onSubmit) {
                                                                        onSubmit(result);
                                                                    }
                                                                });
                                                            });
                                                        });
                                                    }, function () {
                                                        return;
                                                    });
                                                }
                                                else {
                                                    MyTools.Repairs.Requests.submitItemsForRma(userStore.sessionId, account, requestTypeId, shipToId, caseIdString, $('#rmasRequest_commentsBox').val(), $('#rmasRequest_internalCommentsBox').val(), $('#rmasRequest_resellerReferenceBox').val(), rmaRequestItems, $('#rmasRequest_ccEmailbox').val(), function (result) {
                                                        if (!result || result.id < 1) {
                                                            $body.unmask();
                                                            $.popupMessageToOwner($dlg, 1, translationStore.getString('There was a problem submitting your request. Please try again. If the problem persists, please contact Geotab.'), '');
                                                            return;
                                                        }
                                                        var rmaRequest = result;
                                                        MyTools.Repairs.Requests.autoApproveRmaRequest(userStore.sessionId, account, rmaRequest, function (result) {
                                                            $body.unmask();
                                                            if (!result || result.id < 1) {
                                                                $.popupMessageToOwner($dlg, 1, translationStore.getString('There was a problem auto approving this request. The rma request has been created, and will now need to be manually approved.'), '');
                                                            }
                                                            $dlg.dialog("close");
                                                            $.popupMessage(3, translationStore.getString('Thank you, your RMA has been processed. Here is your RMA Number: ') + result.rmaId, function () {
                                                                if (onSubmit) {
                                                                    onSubmit(result);
                                                                }
                                                            });
                                                        });
                                                    });
                                                }
                                            });
                                        }
                                        else {
                                            MyTools.Repairs.Requests.submitItemsForRma(userStore.sessionId, account, requestTypeId, shipToId, caseIdString, $('#rmasRequest_commentsBox').val(), $('#rmasRequest_internalCommentsBox').val(), $('#rmasRequest_resellerReferenceBox').val(), rmaRequestItems, $('#rmasRequest_ccEmailbox').val(), function (result) {
                                                $body.unmask();
                                                if (!result || result.id < 1) {
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                                    $.popupMessageToOwner($dlg, 1, translationStore.getString('There was a problem submitting your request. Please try again. If the problem persists, please contact Geotab.'), '');
                                                    return;
                                                }
                                                var rmaRequest = result;
                                                $dlg.dialog("close");
                                                if (rmaRequest.rmaId != -1) {
                                                    $.popupMessage(3, translationStore.getString('Thank you, your RMA has been processed. Here is your RMA Number: ') + rmaRequest.rma.rmaId, function () {
                                                        if (onSubmit) {
                                                            onSubmit(result);
                                                        }
                                                    });
                                                } else {
                                                    $.popupMessage(3, translationStore.getString('Thank you, your RMA request has been submitted.'), function () {
                                                        if (onSubmit) {
                                                            onSubmit(result);
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    }
                                },
                                {
                                    text: translationStore.getString('Cancel'),
                                    click: function () {
                                        $(this).dialog("close");
                                    }
                                }
                            ]
                        });
                    $dlg.mask(translationStore.getString('Loading, please wait...'));
                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("disable");
                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("disable");
                    reloadReturnReasons(selectedAccountId(), function () {
                        reloadRmaTypes(selectedAccountId(), function () {
                            reloadSkuList(selectedAccountId(), function () {
                                var snsList = [];
                                sns.forEach(function (sn) {
                                    var device = [];
                                    device.sku = sn;
                                    device.qty = 1;
                                    snsList.push(device);
                                });
                                addItemsToList(snsList, parseInt($('#rmasRequest_requestTypeList').val()), function () {
                                    $dlg.unmask();
                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Add Products") + ")").button("enable");
                                    $(".ui-dialog-buttonpane button:contains(" + translationStore.getString("Submit") + ")").button("enable");
                                });
                            });
                        });
                    });                }
                // Execution point
                loadDialog();
            }
        }
    },
    StoreForward: {
        getStoreForwardServers: function (sessionId, callback) {
            gmsApiCallSimple("GetStoreForwardServers", { sessionId: sessionId }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        loadStoreForwardServers: function ($select, servers, callback) {
            $select.empty();
            if (!servers || servers.length == 0) {
                $.popupMessage(1, 'No store & forward servers are available to your account');
                if (callback) {
                    callback();
                }
                return;
            }
            var h = [];
            for (var i = 0; i < servers.length; i++) {
                var serverName = servers[i].name;
                var selected = (i == 0 ? ' selected' : '');
                h.push('<option value="' + serverName + '"' + selected + '>' + serverName + '</option>');
            }
            $select.append(h.join(''));
            if (callback) {
                callback();
            }
        },
        getStoreDevices: function (sessionId, hwids, callback) {
            gmsApiCallSimple("GetGmsGatewayDevices", { sessionId: sessionId, hardwareIds: hwids }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        setGatewayDeviceParameters: function (sessionId, hwids, apn, apnUserName, apnPassword, pendingFirmwareInfo, successCallback, errorCallback) {
            gmsApiCallSimple("SetGatewayDeviceParameters", { sessionId: sessionId, hardwareIds: hwids, apn: apn, apnUserName: apnUserName, apnPassword: apnPassword, firmwareInfo: pendingFirmwareInfo }, function (result) {
                if (successCallback) {
                    successCallback(result);
                }
            }, function (error) {
                if (errorCallback) {
                    errorCallback(error);
                }
            });
        },
        setGsmParametersBinaryMode: function (sessionId, hwids, apn, apnUserName, apnPassword, successCallback, errorCallback) {
            gmsApiCallSimple("SetGsmParametersBinaryMode", { sessionId: sessionId, hardwareIds: hwids, apn: apn, username: apnUserName, password: apnPassword }, function (result) {
                if (successCallback) {
                    successCallback(result);
                }
            }, function (error) {
                if (errorCallback) {
                    errorCallback(error);
                }
            });
        },
        requestGsmChanges: function ($owner, userStore, hwids, onSubmit) {
            var store = userStore.activeStore(),
                user = userStore.activeUser(),
                translationStore = userStore.getTranslationStore(),
                serverList = [];
            var requestHtml = function () {
                var h = [];
                h.push('<div id="gsmParams_editGsmParamsDialog">' +
                    '<ul id="gsmParams_paramOptionsList" class="tableGrid twoColumn shadow">' +
                    '<li class="header">APN</li><li><input id="gsmParams_apnBox" class="required" type="text"/></li>' +
                    '<li class="header">GSM Username</li><li><input id="gsmParams_gsmUserNameBox" type="text"/></li>' +
                    '<li class="header">GSM Password</li><li><input id="gsmParams_gsmPasswordBox" type="text"/></li>' +
                    '<li class="header">&nbsp;</li><li>&nbsp;</li>' +
                    '</ul>' +
                    '<ul id="gsmParams_deviceList" class="tableGrid gridLines fourColumn shadow" style="height: 200px;"></ul>' +
                    '<div class="gms-box alert padded">Warning: Changing these settings can render a device unusable. Geotab will not be held responsible for any misconfigurations or parameters resulting from the use of this function.</div>' +
                    '<p><div class="gms-box highlight padded"><input id="gsmParams_confirmOption" type="checkbox" />&nbsp;I acknowledge that I have read and understand the risks of changing device parameters. I also understand that all devices listed above will be changed to the new parameters I have applied, regardless of their existing values.</div>' +
                    '</div>');
                return h.join('');
            };

            function loadDevicesToList(items, setFirstDefaults, callback) {
                if (!items || items.length == 0) {
                    if (callback) {
                        callback();
                    }
                    return;
                }
                var $ul = $('#gsmParams_deviceList');
                $ul.mask('Loading items...');
                var ulh = [];
                var firstItem = items[0];
                if (setFirstDefaults) {
                    $('#gsmParams_apnBox').val(firstItem['gatewayDevice']['apn']);
                    $('#gsmParams_gsmUserNameBox').val(firstItem['gatewayDevice']['apnUserName']);
                    $('#gsmParams_gsmPasswordBox').val(firstItem['gatewayDevice']['apnPassword']);
                }
                for (var i = 0; i < items.length; i++) {
                    // Add in headers if its the first item
                    if (i == 0) {
                        ulh.push('<li class="header">Device</li>');
                        ulh.push('<li class="header">APN</li>');
                        ulh.push('<li class="header">Port</li>');
                        ulh.push('<li class="header">User Creds</li>');
                    }
                    var item = items[i];
                    ulh.push('<li class="first"><button class="removeItem" title="Click here to remove this record">&nbsp;</button>&nbsp;');
                    ulh.push('<label>' + item.hardwareId + '</label>');
                    ulh.push('</li>');
                    ulh.push('<li><label>' + item['gatewayDevice']['apn'] + '</label></li>');
                    ulh.push('<li><label>' + item['gatewayDevice']['apnPort'].toString().trim() + '</label></li>');
                    var un = item['gatewayDevice']['apnUserName'] || '',
                        up = item['gatewayDevice']['apnPassword'] || '',
                        uc = '';
                    if (un.length > 0) {
                        uc = un;
                    }
                    if (up.length > 0) {
                        uc = (uc.length > 0 ? ' | ' : '') + up;
                    }
                    ulh.push('<li><label>' + (uc == '' ? '[None]' : uc) + '</label></li>');

                }
                $ul.html(ulh.join(''));
                $ul.unmask();
                $ul.find("button.removeItem").button({
                    icons: {
                        primary: "ui-icon-trash"
                    },
                    text: false
                }).on("click", function (e) {
                    var $li = $(this).parent();
                    removeItemFromList($li);
                }).tooltip();
                $ul.find('.required').on('keyup blur', function () {
                    validateFields($ul);
                });
                if (callback) {
                    callback();
                }
            }

            function removeItemFromList($li) {
                $li.next('li').next('li').next('li').next('li').remove();
                $li.next('li').next('li').next('li').remove();
                $li.next('li').next('li').remove();
                $li.next('li').remove();
                $li.remove();
            }

            var publicServerName = function (internalName) {
                var foundServer = '';
                for (var i = 0; i < serverList.length; i++) {
                    var server = serverList[i];
                    server['serverNames'].each(function (key) {
                        if (key == internalName) {
                            foundServer = server.name;
                        }
                    });
                }
                return (foundServer != '' ? foundServer : 'Unknown');
            };

            var itemsInList = function () {
                var items = [];
                var listItems = $("#gsmParams_deviceList").find("li.first");
                listItems.each(function (idx, li) {
                    var $li = $(li);
                    var id = $li.find('label').text();
                    items.push(parseInt(id));
                });
                return items;
            };

            function loadDialog(callback) {
                $owner.append(requestHtml());
                var $dlg = $('#gsmParams_editGsmParamsDialog');
                $dlg.dialog(
                    {
                        title: "Edit GSM Params",
                        width: 900,
                        minHeight: 600,
                        modal: true,
                        close: function () {
                            $(this).dialog('destroy').remove();
                        },
                        open: function (event, ui) {
                            var $optionsList = $('#gsmParams_paramOptionsList');
                            $optionsList.mask(translationStore.getString('Loading, please wait...'));
                            MyTools.StoreForward.getStoreDevices(userStore.sessionId, hwids, function (results) {
                                loadDevicesToList(results, true, function () {
                                    $optionsList.unmask();
                                });
                            });
                        },
                        buttons: {
                            Submit: function () {
                                var $body = $('body'),
                                    $dlg = $(this);
                                var hwids = itemsInList();
                                if (!hwids || hwids.length == 0) {
                                    $.popupMessageToOwner($dlg, 2, 'Please add in at least one item to change GSM params', '');
                                    return;
                                }
                                // Acknowledge checked
                                var hasAccepted = isChecked($('#gsmParams_confirmOption'));
                                if (!hasAccepted) {
                                    $.popupMessageToOwner($dlg, 2, 'You need to accept the terms before continuing', '');
                                    return;
                                }
                                if (!validateFields($(this).find('#gsmParams_paramOptionsList'))) {
                                    $.popupMessageToOwner($dlg, 2, 'Please ensure that all fields are completed before submitting', '');
                                    return;
                                }
                                var apn = $('#gsmParams_apnBox').val().trim();
                                var username = $('#gsmParams_gsmUserNameBox').val().trim();
                                var password = $('#gsmParams_gsmPasswordBox').val().trim();
                                if (apn == '') {
                                    $.popupMessageToOwner($dlg, 2, 'Invalid Params, cannot continue', '');
                                    $dlg.dialog("close");
                                    return;
                                }
                                $body.mask('Please wait...');
                                MyTools.StoreForward.setGsmParametersBinaryMode(userStore.sessionId, hwids, apn, username, password, function (results) {
                                    var isError = !results;
                                    var msg = (isError ? "Your request has been submitted with errors. An email has been sent to you with more information" : "Your request has been successfully submitted. The changes will take affect the next time the device(s) connect to the server");
                                    var code = (isError ? 2 : 3);
                                    $body.unmask();
                                    $.popupMessageToOwner($dlg, code, msg, function () {
                                        if (onSubmit) {
                                            onSubmit();
                                        }
                                        $dlg.dialog("close");
                                    });
                                }, function (error) {
                                    $body.unmask();
                                    $.popupMessageToOwner($dlg, 1, parseError(error), '');
                                });
                            },
                            Cancel: function () {
                                $(this).dialog("close");
                            }
                        }
                    });
                if (callback) {
                    callback();
                }
            }

            // Execution point
            loadDialog('');
        },
        getFirmwareInfos: function (sessionId, defaultOnly, productFilter, majorFilter, minorFilter, callback, onError) {
            gmsApiCallSimple("GetFirmwareInfos", { sessionId: sessionId, defaultOnly: defaultOnly, productFilter: productFilter, majorFilter: majorFilter, minorFilter: minorFilter, exactMatchOnly: false }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function (error) {
                if (onError) {
                    onError(error);
                }
            });
        },
        getFirmwareInfosByChannelWithFilter: function (sessionId, defaultOnly, productFilter, channelNumber, activeOnly, callback, onError) {

            gmsApiCallSimple("GetFirmwareInfosByChannelWithFilter", { sessionId: sessionId, defaultOnly: defaultOnly, productFilter: productFilter, channelNumber: channelNumber, activeOnly: activeOnly }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function (error) {
                if (onError) {
                    onError(error);
                }
            });
        },
        GetFirmwareChannelsForDevices: function (sessionId, serialNos, callback, onError) {
            gmsApiCallSimple("GetFirmwareChannelsForDevices", { sessionId: sessionId, serialNos: serialNos }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function (error) {
                if (onError) {
                    onError(error);
                }
            });
        },
        updateDeviceChannel: function (sessionId, deviceHardwareIdVals, channelNumber, expiryOption, notifyOption, notifyEmail, callback, onError) {

            gmsApiCallSimple("UpdateDeviceChannel", { sessionId: sessionId, deviceHardwareIdVals: deviceHardwareIdVals, channelNumber: channelNumber, expiryOption: expiryOption, notifyOption: notifyOption, notifyEmail: notifyEmail }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function (error) {
                if (onError) {
                    onError(error);
                }
            });
        },
        shareDevice: function (sessionId, deviceHardwareIdVals, ownerDatabaseName, sharedDatabaseName, shareDevice, transferControl, devicePlan, privacyMode, callback, onError) {
            gmsApiCallSimple(
                "ShareDevice",
                {
                    sessionId: sessionId,
                    deviceHardwareIdVals: deviceHardwareIdVals,
                    ownerDatabase: ownerDatabaseName,
                    sharedDatabase: sharedDatabaseName,
                    shareDevice: shareDevice,
                    transferControl: transferControl,                    
                    planId: devicePlan,
                    privacyMode : privacyMode
                },
                function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                function (error) {
                    if (onError) {
                        onError(error);
                    }
                }
            );
        },
        getEmailAddressesMatchAllAccount: function (sessionId, accountFilters, roleFilter, callback, onError) {

            gmsApiCallSimple("GetEmailAddressesMatchAllAccount",
                {
                    sessionId: sessionId,
                    accountFilters: accountFilters,
                    roleFilter: roleFilter
                }, function (result) {
                    if (callback) {
                        callback(result);
                    }
                }, function (error) {
                    if (onError) {
                        onError(error);
                    }
                });
        },
        validateStoreDeviceForFirmwareUpdate: function (storeDevice, productId, major, minor) {
            if (storeDevice == null || productId < 0) {
                return null;
            }
            // check firmware of device to see if it is allowed
            var p = storeDevice['gatewayDevice']['productId'],
                m = storeDevice['gatewayDevice']['majorVersion'],
                n = storeDevice['gatewayDevice']['minorVersion'];

            var returnObject;
            if (p == productId && m == major && n == minor) {
                return "Firmware already set - will not be upgraded";
            }
            else if (productId === 0) {
                return true;
            }
            else if (p != productId) {
                return "Mismatched Product - cannot be upgraded";
            }
            else {
                // okay for firmware upgrade, return true
                return true;
            }
        },
        updateDeviceFirmware: function (sessionId, hwids, pendingFirmwareInfo, callback, onError) {
            gmsApiCallSimple("UpdateDeviceFirmware", { sessionId: sessionId, hardwareIds: hwids, firmwareInfo: pendingFirmwareInfo }, function (result) {
                if (callback) {
                    callback(result);
                }
            },
                function (error) {
                    if (onError) {
                        onError(error);
                    }
                });
        }
    },
    Alerts: {
        getAlerts: function (sessionId, categoryFilter, dateFrom, includeExpired, callback) {
            gmsApiCallSimple("GetAlerts", { sessionId: sessionId, categoryFilter: categoryFilter, dateFrom: dateFrom, includeExpired: includeExpired }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        getAlertCategories: function (sessionId, callback) {
            gmsApiCallSimple("GetAlertCategories", { sessionId: sessionId }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        loadAlertList: function (sessionId, categoryFilter, dateFrom, includeExpired, $container, linkToAlerts, translationStore, callback) {
            $container.mask(translationStore.getString('Please wait...'));
            if (!dateFrom) {
                dateFrom = MyTools.DateTime.minDate();
            }
            MyTools.Alerts.getAlerts(sessionId, categoryFilter, dateFrom, includeExpired, function (result) {
                var h = [];
                var count = (!result ? 0 : result.length);
                if (count > 0) {
                    if (linkToAlerts) {
                        h.push(translationStore.getFormattedString('Click {0}here{1} for more alerts', ['<a id="alertsMoreInfo" target="_top" href="/alerts">', '</a>']));
                    }
                    h.push('<ul id="alertList">');
                    var now = MyTools.DateTime.now();
                    for (var i = 0; i < result.length; i++) {
                        var alert = result[i];
                        var isPriority = alert['isUrgent'];
                        var isExpired = alert['expireDateUtc'] && MyTools.DateTime.toDate(alert['expireDateUtc']) < now;
                        var boxClass = (isExpired ? '' : 'clear');
                        h.push('<li class="gms-box ' + boxClass + ' padded shadow no-radius">');
                        h.push('<div class="gms-box ' + (isPriority ? 'alert' : 'warning') + ' padded no-radius"><strong>' + alert.name + '</strong> <label class="subdued">' + translationStore.getString('Posted on') + ' ' + MyTools.DateTime.DbDateTo.shortDateString(alert['postDateUtc']) + '</label></div>');
                        h.push('<div class="padded"><span>' + alert['details'] + '</span>');
                        if (alert['urlLink'] && alert['urlLink'].length > 0) {
                            h.push('&nbsp;<span><a href="' + alert['urlLink'] + '" target="_blank" rel="noopener noreferrer">' + translationStore.getString('More Info') + '</a></span>');
                        }
                        h.push('<div class="align-right" style="float: right;">' + translationStore.getString(alert['category'].name).toUpperCase() + '</div></div></li>');
                    }
                    h.push('</ul>');
                    $container.html(h.join(''));
                    $container.find('a#alertsMoreInfo').button();
                }
                $container.unmask();
                if (callback) {
                    callback(count);
                }
            });
        }
    },
    Json: {
        getJsonFromQueryString: function () {
            var queryString = decodeURIComponent(window.location.search).replace("?", "");
            if (queryString != null && queryString != "") {
                // check to see if its json
                if (/[{}:]/.test(queryString)) {
                    return JSON.parse(queryString.toString());
                }
            }
            return null;
        },
        getOrderTokenJsonFromQueryString: function () {
            var queryString = decodeURIComponent(window.location.search).replace("?", "");
            
            if (queryString != null && queryString != "") {
                var queryStringParamsAll = queryString.split("&");
                var queryStringParams = new Array();
                queryStringParamsAll.forEach(function (item) {
                    var qpItem = item.split("=");
                    queryStringParams[qpItem[0]] = qpItem[1];
                }
               );
                //var orderTokenKey = queryStringParams.indexOf("");
                // check to see if its json
                if (queryStringParams['orderToken'] && /[{}:]/.test(queryStringParams['orderToken'])) {
                    return JSON.parse(queryStringParams['orderToken']);
                }
            }
            return null;
        },
        mergeJson: function (j1, j2) {
            for (var i in j2) {
                j1[i] = j2[i];
            }
            return j1;
        }
    },
    Devices: {
        Ui: {
            loadDevicePlanFilter: function (sessionId, $select, forAccountId, levelIsVal, defaultLevel, includeAllOption, includeUnassignedOption, includeNonLiveOption, visibleOnly, callback) {
                $select.html('');
                var h = [];
                var css = "";
                var translationStore = self.getTranslationStore();
                if (includeAllOption) {
                    if ((defaultLevel && defaultLevel === -1) || forAccountId < 1) {
                        css = ' selected="selected"';
                    }
                    h.push('<option value="-1"' + css + '>[' + translationStore.getString('All Plans') + ']</option>');
                }
                if (forAccountId < 1) {
                    // no accounts, limit and return
                    $select.html(h.join(''));
                    if (callback) {
                        callback();
                    }
                    return;
                }
                if (includeUnassignedOption) {
                    css = "";
                    if (defaultLevel && defaultLevel === 0) {
                        css = ' selected="selected"';
                    }
                    h.push('<option value="0"' + css + '>[' + translationStore.getString('No Rate Plan Assigned') + ']</option>');

                    css = "";
                    if (defaultLevel && defaultLevel === -2) {
                        css = ' selected="selected"';
                    }
                    h.push('<option value="-2"' + css + '>[' + translationStore.getString('Non-Terminated Devices Only') + ']</option>');
                }
                MyTools.Devices.getDevicePlans(sessionId, forAccountId, visibleOnly, function (result) {
                    for (var i = 0; i < result.length; i++) {
                        var item = result[i];
                        if (includeNonLiveOption || item['level'] < 99) {
                            css = "";
                            if (defaultLevel && item.id == defaultLevel) {
                                css = ' selected="selected"';
                            }
                            h.push('<option value="' + (levelIsVal ? item['level'] : item.id) + '"' + css + '>' + translationStore.getString(item.name) + (item.active ? '' : ' (' + translationStore.getString('Internal Only') + ')') + '</option>');
                        }
                    }
                    $select.html(h.join(''));
                    if (callback) {
                        callback(result);
                    }
                });
            },
            loadWarrantyOptions: function ($select, defaultOption, limitToStandard, callback) {
                gmsApiCall({
                    method: 'GetWarrantyOptions',
                    params: { limitToStandard: limitToStandard },
                    success: function (result) {
                        if ($select && $select.length > 0) {
                            var h = [];
                            var css = "";
                            for (var i = 0; i < result.length; i++) {
                                var option = result[i];
                                if (defaultOption && defaultOption === option.code) {
                                    css = ' selected="selected"';
                                }
                                h.push('<option value="' + option.code + '"' + css + '>' + option.name + '</option>');
                            }
                            $select.html(h.join(''));
                        }
                        if (callback) {
                            callback(result);
                        }
                    },
                    error: function (error) {
                        $.popupMessage(1, parseError(error), '');
                    }
                });
            },
            changeFirmware: function ($owner, userStore, deviceArray, onSubmit) {
                var fwResource = "[Select Firmware Version]",
                    firmwareInfos = [],
                    sessionId = userStore.sessionId;
                var deviceSerials = function () {
                    var items = [];
                    for (var i = 0, size = deviceArray.length; i < size; i++) {
                        console.log(deviceArray[i]['serialNo']);
                        items.push(deviceArray[i]['serialNo']);
                    }
                    return items;
                };
                var requestHtml = function () {
                    var h = [];
                    h.push('<div id="changeFirmware_dialog">' +
                        '<ul class="tableGrid twoColumn shadow">' +
                        '<li class="header">New Firmware Version</li><li><select id="changeFirmware_newFirmwareList"></select></li>' +
                        '</ul>' +
                        '<span id="changeFirmware_itemContainer"></span><ul id="changeFirmware_deviceList" class="tableGrid gridLines threeColumn shadow" style="height: 400px;"></ul>' +
                        '<div id="changeFirmware_warningDiv" class="gms-box alert padded">* Changing device firmware can cause severe or fatal issues on devices and is done so at your own risk. Geotab will not be held responsible for firmware upgrade-related issues.</div>' +
                        '</div>');
                    return h.join('');
                };

                var itemsInList = function ($ul, validOnly) {
                    var items = [];
                    var listItems = $ul.find("li.first");
                    listItems.each(function (idx, li) {
                        var $li = $(li);
                        var sn = $li.find('label').text();
                        var hw = $li.find('input:hidden').val();
                        var $fwLi = $li.next('li');
                        var fw = $fwLi.find('label').text();
                        var $stLi = $fwLi.next('li');
                        var st = $stLi.find('label').text();
                        var isValidRecord = $stLi.find('label.myGood').length == 1;
                        var item = { 'serialNo': sn, 'hardwareId': (hw && hw.length > 0 ? parseInt(hw) : 0), 'currentFirmware': fw, 'status': st };
                        if (!validOnly || isValidRecord) {
                            items.push(item);
                        }
                    });
                    return items;
                };

                function updateItem($ul, hwId, currentFirmware, status, statusCss) {
                    var listItems = $ul.find("li.first");
                    listItems.each(function (idx, li) {
                        var $li = $(li);
                        var hw = parseInt($li.find('input:hidden').val());
                        if (hw == hwId) {
                            var $fwLi = $li.next('li');
                            $fwLi.find('label').text(currentFirmware).removeClass();
                            var $stLi = $fwLi.next('li');
                            $stLi.find('label').removeClass().text(status).addClass(statusCss);
                        }
                    });
                }

                function addItemsToList(devicesToAdd, callback, onError) {
                    var $ul = $('#changeFirmware_deviceList');
                    $ul.mask('Loading items...');

                    // Get first store device for firmware info check
                    var hwId = 0;
                    for (var i = 0; i < devicesToAdd.length; i++) {
                        var thisHwId = devicesToAdd[i].hardwareId;
                        if (thisHwId && thisHwId > 0) {
                            hwId = parseInt(thisHwId);
                            break;
                        }
                    }

                    MyTools.StoreForward.getStoreDevices(userStore.sessionId, [hwId], function (results) {
                        if (!results || results.length == 0) {
                            $.popupMessageToOwner($owner, 1, 'The device is not valid!', '');
                            return;
                        }

                        // set all firmware infos
                        loadFirmwares(results[0]['gatewayDevice']['productId'], results[0]['gatewayDevice']['firmwareChannelNumber'], function () {
                            // clear existing items
                            $ul.html('');
                            /*var existingItems = itemsInList($ul, false);
                             var hasExistingItems = existingItems.length > 0;*/

                            var ulh = [];
                            for (var i = 0; i < devicesToAdd.length; i++) {
                                var sn = devicesToAdd[i].serialNo;
                                var hw = parseInt(devicesToAdd[i].hardwareId);
                                // load items into ul
                                var isFirstItem = /*!hasExistingItems && */i == 0;
                                // Add in headers if its the first item
                                if (isFirstItem) {
                                    ulh.push('<li class="header">Device</li>');
                                    ulh.push('<li class="header">Current Firmware</li>');
                                    ulh.push('<li class="header">Status</li>');
                                }
                                ulh.push('<li class="first"><button class="removeItem" title="Click here to remove this record">&nbsp;</button>&nbsp;');
                                ulh.push('<label>' + sn + '</label><input type="hidden" value="' + hw + '"/>');
                                ulh.push('</li>');
                                ulh.push('<li><label class="myInactive">Pending</label></li>');
                                ulh.push('<li><label class="myInactive">Pending Validation</label></li>');
                            }
                            $ul.append(ulh.join(''));
                            $ul.unmask();
                            $ul.find("button.removeItem").button({
                                icons: {
                                    primary: "ui-icon-trash"
                                },
                                text: false
                            }).on("click", function (e) {
                                var $li = $(this).parent();
                                removeItemFromList($li);
                            }).tooltip();

                            if (callback) {
                                callback();
                            }
                        }, function (error) {
                            if (onError) {
                                onError(error);
                            }
                        });
                    });
                }

                function removeItemFromList($li) {
                    $li.next('li').next('li').remove();
                    $li.next('li').remove();
                    $li.remove();
                }

                function validateItems(callback) {
                    var $ul = $("#changeFirmware_deviceList");
                    $ul.mask("Validating Items");
                    var items = itemsInList($ul, false);
                    var hwIds = [];
                    for (var i = 0; i < items.length; i++) {
                        hwIds.push(items[i].hardwareId);
                    }
                    MyTools.StoreForward.getStoreDevices(userStore.sessionId, hwIds, function (results) {
                        var firmwareInfo = getSelectedFirmwareInfo();
                        var itemCurrentFirmware = "Unknown";
                        var hasValidResults = results && results.length > 0;
                        for (var i = 0; i < items.length; i++) {
                            var hwId = items[i].hardwareId;
                            // find matching result
                            if (hasValidResults) {
                                var storeDevice = null;
                                for (var j = 0; j < results.length; j++) {
                                    if (results[j].hardwareId == hwId) {
                                        storeDevice = results[j];
                                        break;
                                    }
                                }
                                if (storeDevice == null) {
                                    // item has no store device
                                    updateItem($ul, items[i].hardwareId, "Unknown", "Invalid Item", "myBad");
                                }
                                else {
                                    itemCurrentFirmware = storeDevice.firmwareVersion;
                                    if (firmwareInfo == null) {
                                        updateItem($ul, items[i].hardwareId, itemCurrentFirmware, fwResource, "myDisabled");
                                    }
                                    else {
                                        var firmwareInfoProductId = firmwareInfo['product'];
                                        var returnVal = MyTools.StoreForward.validateStoreDeviceForFirmwareUpdate(storeDevice, firmwareInfoProductId, firmwareInfo['major'], firmwareInfo['minor']);
                                        if (returnVal === true) {
                                            updateItem($ul, items[i].hardwareId, itemCurrentFirmware, (firmwareInfoProductId === 0 ? "Can be reset" : "Can be upgraded"), "myGood");
                                        }
                                        else {
                                            updateItem($ul, items[i].hardwareId, itemCurrentFirmware, !returnVal ? "Unknown Issue" : returnVal.toString(), "myBad");
                                        }
                                    }
                                }
                            }
                            else {
                                updateItem($ul, items[i].hardwareId, "Unknown", "Invalid Item", "myBad");
                            }
                        }
                        $ul.unmask();
                        if (callback) {
                            callback();
                        }
                    });
                }

                function loadFirmwares(productId, channel, callback, onError) {
                    // Get first device in list and get firmware infos based on that
                    var $select = $('#changeFirmware_newFirmwareList');
                    $select.off('change');
                    $select.html('');
                    MyTools.StoreForward.getFirmwareInfos(sessionId, false, productId, -1, -1, function (results) {
                        if (results && results.length > 0) {
                            firmwareInfos = results;
                            var h = [];
                            h.push('<option value="-1" selected>' + fwResource + '</option>');
                            MyTools.StoreForward.GetFirmwareChannelsForDevices(sessionId, deviceSerials(), function (channels) {
                                for (var i = 0; i < results.length; i++) {
                                    var found = false;
                                    var firmwareInfo = results[i];
                                    for (var j = 0; j < channels.length; j++) {
                                        if (channels[j]['channelNumber'] == firmwareInfo['channelNumber']) {
                                            found = true;
                                            break;
                                        }
                                    }
                                    if (found) {
                                        var fw = firmwareInfo['product'] + '.' + firmwareInfo['major'] + '.' + firmwareInfo['minor'] + ' (' + firmwareInfo['channelNumber'] + ' channel)';
                                        if (firmwareInfo['product'] == 0) {
                                            fw = "[Reset Pending Firmware]";
                                        }
                                        h.push('<option value="' + firmwareInfo['id'] + '">' + fw + '</option>');
                                    }
                                }
                                $select.html(h.join(''));
                                if (callback) {
                                    callback();
                                }
                            }, function (error) {
                                if (onError) {
                                    onError(error);
                                }
                            });
                        }
                        else {
                            if (callback) {
                                callback();
                            }
                        }
                        $select.on('change', function () {
                            validateItems('');
                        });
                    }, function (error) {
                        if (onError) {
                            onError(error);
                        }
                    });
                }

                var getSelectedFirmwareInfo = function () {
                    var firmwareInfoId = parseInt($('#changeFirmware_newFirmwareList').val());
                    if (firmwareInfoId == null || firmwareInfoId < 0) {
                        return null;
                    }
                    for (var i = 0; i < firmwareInfos.length; i++) {
                        if (firmwareInfoId == firmwareInfos[i]['id']) {
                            return firmwareInfos[i];
                        }
                    }
                    return null;
                };

                var getDeviceFromArray = function (devicesArray, hardwareId) {
                    for (var i = 0; i < devicesArray.length; i++) {
                        if (devicesArray[i].hardwareId == hardwareId) {
                            return devicesArray[i];
                        }
                    }
                    return null;
                };

                function processDevices(devicesToProcess, firmwareInfo, onSuccess, onCompleteWithErrors, onError) {
                    var failedDevices = [];
                    var hwIds = [],
                        deviceLength = devicesToProcess.length;
                    for (var i = 0; i < deviceLength; i++) {
                        hwIds.push(devicesToProcess[i].hardwareId);
                    }
                    MyTools.StoreForward.setGatewayDeviceParameters(sessionId, hwIds, null, null, null, firmwareInfo, function (results) {
                        if (!results || results.length == 0) {
                            if (onCompleteWithErrors) {
                                onCompleteWithErrors();
                            }
                            return;
                        }
                        // extract failed items
                        for (var j = 0; j < results.length; j++) {
                            var result = results[j];
                            if (result != null && result['adminResponse'] != 'DeviceStatusChanged' && result['adminResponse'] != 'DeviceAddedAndStatusChanged') {
                                // Device was not updated, log failure
                                var dv = getDeviceFromArray(devicesToProcess, result['hardwareId']);
                                if (dv != null) {
                                    failedDevices.push(dv);
                                }
                            }
                        }
                        // fire onSuccess event when devices were successful
                        if (failedDevices.length == 0 && onSuccess) {
                            onSuccess(deviceLength);
                        }
                        else if (failedDevices.length > 0 && onCompleteWithErrors) {
                            onCompleteWithErrors(failedDevices);
                        }
                    }, function (error) {
                        if (onError) {
                            onError(error);
                        }
                    });
                }

                function loadDialog(devicesToAdd, callback) {
                    $owner.append(requestHtml());
                    $owner.mask('Please wait...');
                    var $dlg = $('#changeFirmware_dialog');
                    // Load dialog
                    $dlg.dialog(
                        {
                            title: "Change Device Firmware",
                            width: 980,
                            minHeight: 600,
                            modal: true,
                            close: function () {
                                $(this).dialog('destroy').remove();
                            },
                            buttons: {
                                Submit: function () {
                                    var $body = $('body'),
                                        $dlg = $(this),
                                        $ul = $("#changeFirmware_deviceList");
                                    $ul.mask('Please wait...');

                                    // get good ids
                                    var items = itemsInList($ul, true);
                                    var firmwareInfo = getSelectedFirmwareInfo();
                                    if (items && items.length > 0 && firmwareInfo != null) {
                                        processDevices(items, firmwareInfo, function (deviceCount) {
                                            $.popupMessageToOwner($dlg, 3, 'The request for ' + deviceCount + ' device(s) has been successfully submitted.', function () {
                                                $ul.unmask();
                                                $dlg.dialog("close");
                                                if (onSubmit) {
                                                    onSubmit();
                                                }
                                            });
                                        }, function (failedDevices) {
                                            $ul.unmask();
                                            if (!failedDevices || failedDevices.length == 0) {
                                                $.popupMessageToOwner($dlg, 1, 'An unknown error has occurred. Please try again and if the problem persists, contact Geotab Support.', '');
                                            }
                                            else {
                                                addItemsToList(failedDevices, function () {
                                                    $.popupMessageToOwner($dlg, 1, 'The device(s) below were not successful, please check your parameters and try again.', '');
                                                }, function (error) {
                                                    $.popupMessageToOwner($dlg, 1, parseError(error), function () {
                                                        $dlg.dialog('destroy').remove();
                                                    });
                                                });
                                            }
                                        }, function (error) {
                                            $.popupMessageToOwner($dlg, 1, parseError(error), function () {
                                                $dlg.dialog('destroy').remove();
                                            });
                                        });
                                    }
                                    else {
                                        $ul.unmask();
                                        $dlg.dialog("close");
                                    }
                                },
                                Cancel: function () {
                                    $(this).dialog("close");
                                }
                            }
                        });
                    $owner.unmask();
                    addItemsToList(devicesToAdd, function () {
                        validateItems(function () {
                            if (callback) {
                                callback();
                            }
                        });
                    }, function (error) {
                        $.popupMessageToOwner($dlg, 1, parseError(error), function () {
                            $dlg.dialog('destroy').remove();
                        });
                    });
                }

                // Execution point
                loadDialog(deviceArray, '');
            }
        },
        getHardwareId: function (serialNo, callback) {
            gmsApiCallSimple("GetHardwareId", { serialNo: serialNo }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        getDevicePlans: function (sessionId, forAccountId, visibleOnly, callback) {
            gmsApiCallSimple("GetDevicePlans", { sessionId: sessionId, accountId: forAccountId, activeOnly: true, visibleOnly: visibleOnly }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        getDevicePlansForAccounts: function (sessionId, forAccounts, visibleOnly, callback) {
            gmsApiCallSimple("GetDevicePlansForAccounts", { sessionId: sessionId, accountIds: forAccounts, visibleOnly: visibleOnly }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        getPrivacyModes: function (sessionId, callback) {
            gmsApiCallSimple("GetPrivacyModes", { sessionId: sessionId }, function (result) {
                if (callback) {
                    callback(result);
                }
            }, function () {
                if (callback) {
                    callback(null);
                }
            });
        },
        getGeotabDevice: function (sessionId, serialNo, callback) {
            gmsApiCall({
                method: 'GetDevice',
                params: {
                    sessionId: sessionId,
                    serialNo: serialNo
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                    return result;
                },
                error: function (error) {
                    return null;
                }
            });
        },
        getDevice: function (sessionId, serialNo, callback) {
            gmsApiCall({
                method: 'GetGeotabDevice',
                params: {
                    sessionId: sessionId,
                    serialNo: serialNo
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                    return result;
                },
                error: function (error) {
                    return null;
                }
            });
        },
        getDeviceContract: function (sessionId, deviceId, includeConnectInfo, callback) {
            gmsApiCallSimple('GetActiveDeviceContract', { sessionId: sessionId, deviceId: deviceId, includeConnectInfo: includeConnectInfo }, function (result) {
                if (callback) {
                    callback(result);
                }
            });
        },
        getDeviceContractForRma: function (sessionId, deviceId, includeConnectInfo, callback) {
            gmsApiCallSimple('GetActiveDeviceContractForRma', { sessionId: sessionId, deviceId: deviceId, includeConnectInfo: includeConnectInfo }, function (result) {
                if (callback) {
                    callback(result);
                }
            });
        },
        getProductCodeForFlexDevice: function (sessionId, deviceId, callback) {
            gmsApiCallSimple('GetProductCodeForFlexDevice', { sessionId: sessionId, deviceId: deviceId }, function (result) {
                if (callback) {
                    callback(result);
                }
            });
        },
        getDeviceSfAnalysis: function (hardwareId, recordsToAnalyze, callback) {
            gmsApiCall({
                method: 'AnalyzeDevice',
                params: { hardwareId: hardwareId, recordsToAnalyze: recordsToAnalyze, includeVehicleInfo: true },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                    return result;
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    return null;
                }
            });
        },
        getDeviceOrderEntries: function (sessionId, account, searchString, includeCarrierInfo, callback) {
            gmsApiCall({
                method: 'GetDeviceOrderEntries',
                params: { sessionId: sessionId, account: account, searchString: searchString, includeCarrierInfo: includeCarrierInfo },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                    return result;
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    return null;
                }
            });
        },
        getCleanSerialNo: function (sn) {
            return sn.replace(/ /g, "").replace(/-/gi, "").substring(0, 12).toUpperCase();
        },
        validateSerialNo: function (sn) {
            var cleanSn = MyTools.Devices.getCleanSerialNo(sn);
            if (cleanSn.length >= 9) {
                if (/^[a-hA-H0-9]/.test(cleanSn)) {
                    return cleanSn;
                }
            }
            return '';
        },
        getDongleOrderEntries: function (sessionId, account, purchaseOrderNum, callback) {
            gmsApiCall({
                method: 'GetDongleOrderEntries',
                params: { sessionId: sessionId, account: account, purchaseOrderNum: purchaseOrderNum },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                    return result;
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    return null;
                }
            });
        },
        setDatabaseOwner: function (sessionId, hardwareIds, databaseName, callback) {
            gmsApiCall({
                method: 'SetGatewayOwnerByDatabaseName',
                params: { sessionId: sessionId, deviceHardwareIdVals: hardwareIds, databaseName: databaseName },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                    return result;
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    return false;
                }
            });
        }
    },
    Billing: {
        getDatabaseTransactionsSummaryForMonth: function (sessionId, accountFilter, databaseName, ratePlanTypeIds, startMonthString, partnerAccount, callback, onError) {
            gmsApiCall({
                method: 'GetDatabaseTransactionsSummaryForMonth',
                params: { sessionId: sessionId, accountFilter: accountFilter, databaseName: databaseName, ratePlanTypeIds: ratePlanTypeIds, startMonthString: startMonthString, partnerAccount: partnerAccount },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    if (onError) {
                        onError(null);
                    }
                }
            });
        },
        getContractOverrideReasons: function (sessionId, callback) {
            gmsApiCall({
                method: 'GetContractOverrideReasons',
                params: { sessionId: sessionId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },              
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    return false;
                }
            })
        },
        getDatabaseTransactionsForMonth: function (sessionId, accountFilter, databaseName, ratePlanTypeId, startMonthString, partnerAccount, callback, onError) {
            gmsApiCall({
                method: 'GetDatabaseTransactionsForMonth',
                params: { sessionId: sessionId, accountFilter: accountFilter, databaseName: databaseName, ratePlanTypeId: ratePlanTypeId, startMonthString: startMonthString, partnerAccount: partnerAccount },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    if (onError) {
                        onError(error);
                    }
                }
            });
        },
        getDeviceContractTransactionsSummaryForMonth: function (sessionId, accountFilter, userCompanyIdZeroForUnassigned, ratePlanTypeIds, startMonthString, bySimType, userSolutionIdZeroForUnassigned, partnerAccount, includeDatabase, callback, onError) {
            gmsApiCall({
                method: 'GetDeviceContractTransactionsSummaryForMonth',
                params: {
                    sessionId: sessionId,
                    accountFilter: accountFilter,
                    userCompanyIdZeroForUnassigned: userCompanyIdZeroForUnassigned,
                    ratePlanTypeIds: ratePlanTypeIds,
                    startMonthString: startMonthString,
                    bySimType: bySimType,
                    solutionId: userSolutionIdZeroForUnassigned,
                    partnerAccount: partnerAccount,
                    includeDatabase: includeDatabase
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    if (onError) {
                        onError(null);
                    }
                }
            });
        },
        getDeviceContractTransactionsForMonth: function (sessionId, accountFilter, userCompanyIdZeroForUnassigned, ratePlanTypeId, startMonthString, callback, onError) {
            gmsApiCall({
                method: 'GetDeviceContractTransactionsForMonth',
                params: { sessionId: sessionId, accountFilter: accountFilter, userCompanyIdZeroForUnassigned: userCompanyIdZeroForUnassigned, ratePlanTypeId: ratePlanTypeId, startMonthString: startMonthString },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    if (onError) {
                        onError(error);
                    }
                }
            });
        },
        getRatePlanSummary: function (sessionId, ratePlanTypeFilter, periodStart, periodEnd, callback) {
            gmsApiCall({
                method: 'GetRatePlanSummary',
                params: { sessionId: sessionId, ratePlanTypeFilter: ratePlanTypeFilter, periodStart: periodStart, periodEnd: periodEnd },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getRatePlansForUser: function (sessionId, ratePlanTypeFilter, accountFilter, devicePlanLevelFilter, callback) {
            gmsApiCall({
                method: 'GetRatePlansForUser',
                params: { sessionId: sessionId, ratePlanTypeFilter: ratePlanTypeFilter, accountFilter: accountFilter, devicePlanLevelFilter: devicePlanLevelFilter },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getRatePlanTypes: function (sessionId, callback) {
            gmsApiCall({
                method: 'GetRatePlanTypes',
                params: { sessionId: sessionId },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        getRegions: function (sessionId, callback) {
            gmsApiCall({
                method: 'GetRegions',
                params: null,
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                }
            });
        },
        Ui: {
            loadRatePlanTypeFilter: function (translationStore, $select, includeAll, callback) {
                $select.empty();
                MyTools.Billing.getRatePlanTypes(sessionId, function (result) {
                    var h = [];
                    if (includeAll) {
                        h.push('<option value="0">[' + translationStore.getString('All Plan Types') + ']</option>');
                    }
                    if (result && result.length > 0) {
                        $.each(result, function (key, value) {
                            h.push('<option value="' + value.id + '">' + translationStore.getString(value.name) + '</option>');
                        });
                    }
                    $select.html(h.join(''));
                    if (callback) {
                        callback(result);
                    }
                });
            },
            loadRegionsFilter: function (sessionId, translationStore, $select, callback) {
                MyTools.Billing.getRegions(sessionId, function (result) {
                    var h = [];
                    if (result && result.length > 0) {
                        $.each(result, function (key, value) {
                            h.push('<option value="' + value.id + '">' + translationStore.getString(value.name) + '</option>');
                        })
                    }
                    $select.html(h.join(''));
                    if (callback) {
                        callback(result);
                    }
                });
            },
            loadRatePlanTable: function (translationStore, $container, data, regionId, account, callback) {
                var gridOptions = function (jsonData) {
                    return {
                        data: jsonData,
                        datatype: 'local',
                        height: 'auto',
                        width: 'auto',
                        rowNum: 500,
                        viewrecords: true,
                        rownumbers: true,
                        colNames: ['Id', translationStore.getString('Category'), translationStore.getString('Description'), translationStore.getString('Device Plan'), translationStore.getString('Custom Plan'),
                            translationStore.getString('Monthly Fee') + ' (' + account.currency.code + ')', translationStore.getString('Restrictions'), translationStore.getString('Custom Info'), translationStore.getString('Comments'),translationStore.getString('Rate Plan Family')],
                        colModel: [
                            { name: 'id', index: 'id', hidden: true },
                            { name: 'ratePlanType', index: 'ratePlanType', width: 140, sorttype: 'text' },
                            { name: 'name', index: 'name', width: 360, sorttype: 'text' },
                            { name: 'devicePlan', index: 'devicePlan', width: 160, sorttype: 'text' },
                            { name: 'isCustom', index: 'isCustom', hidden: true },
                            { name: 'monthlyFee', index: 'monthlyFee', align: 'right', width: 120, sorttype: 'double', formatter: 'currency' },
                            { name: 'restrictions', index: 'restrictions', align: 'right', width: 180, sorttype: 'text' },
                            { name: 'customInfo', index: 'customInfo', width: 500, sorttype: 'text' },
                            { name: 'comments', index: 'comments', width: 500, sorttype: 'text', hidden: true },
                            { name: 'ratePlanFamily', index: 'ratePlanFamily', width: 500, sorttype: 'text'}
                        ],
                        sortname: 'devicePlan.level',
                        grouping: true,
                        groupingView: {
                            groupField: ['ratePlanType'],
                            groupDataSorted: false,
                            groupColumnShow: [false]
                        },
                        gridComplete: function () {
                            var data = $table.getRowData();
                            for (var i = 0; i < data.length; i++) {
                                var key = data[i]['id'];
                                var isActive = MyTools.parseBool($table.getCell(key, 'isCustom'));
                                if (isActive) {
                                    $table.jqGrid('setRowData', key, false, { 'background': '#ffe60b' });
                                }
                            }
                        }
                    };
                };

                var getRatePlanJson = function (data) {
                    var results = [];
                    if (!data || data.length == 0) {
                        return results;
                    }

                    $.each(data, function (key, value) {
                        var regionalOffsetValue = getRegionalOffset(value);
                        if (regionalOffsetValue != null) {
                            var devicePlanName = '';
                            if (value.ratePlan.devicePlan) {
                                devicePlanName = value.ratePlan.devicePlan.name;
                            }
                            results.push({
                                id: value.ratePlan.id,
                                ratePlanType: value.ratePlan.ratePlanType.name,
                                name: value.ratePlan.translatedName,
                                devicePlan: devicePlanName,
                                isCustom: value.ratePlan.isCustom,
                                monthlyFee: (value.ratePlan.monthlyFee + value.ratePlan.partnerMarkup) * regionalOffsetValue,
                                restrictions: value.ratePlan.restrictions,
                                customInfo: value.ratePlan.customInfo,
                                comments: value.ratePlan.comments,
                                ratePlanFamily: value.ratePlan.ratePlanGroup.comments
                            });
                        }
                    });

                    return results;
                };

                var getRegionalOffset = function (ratePlanWithOffsets) {
                    if (!ratePlanWithOffsets.regionalOffsets || ratePlanWithOffsets.regionalOffsets.length == 0) {
                        return null;
                    }
                    for (var i = 0; i < ratePlanWithOffsets.regionalOffsets.length; i++) {
                        if (ratePlanWithOffsets.regionalOffsets[i].region.id == regionId) {
                            return ratePlanWithOffsets.regionalOffsets[i].offsetValue;
                        }
                    }

                    return null;
                };

                var tableData = getRatePlanJson(data);

                for (var i = 0; i < tableData.length; i++) {
                    tableData[i].ratePlanType = translationStore.getString(tableData[i].ratePlanType);
                    tableData[i].devicePlan = translationStore.getString(tableData[i].devicePlan);
                }

                $container.empty();
                $container.html('<table id="ratePlans_pricingTable"></table>');
                var $table = $container.find('#ratePlans_pricingTable');
                $table.jqGrid(gridOptions(tableData));
                if (callback) {
                    callback();
                }
            }
        }
    },
    Files: {
        getFolders: function (store, sessionId, callback) {
            store['getFolders'](sessionId, function (folders) {
                if (callback) {
                    callback(folders);
                }
                return folders;
            });
        },
        getAvailableDownloads: function (store, sessionId, folderName, searchText, recentOnly, sortMode, callback) {
            store['getFiles'](sessionId, folderName, searchText, recentOnly, sortMode, function (files) {
                if (callback) {
                    callback(files);
                }
                return files;
            });
        }
    },
    Users: {
        getActiveAgreement: function (callback, onError) {
            gmsApiCall({
                method: "GetActiveAgreement",
                params: null,
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function () {
                    if (onError) {
                        onError();
                    }
                }
            });
        },
        getActiveBetaAgreementForUser: function (sessionId, userGuid, type, callback, onError) {
            gmsApiCall({
                method: "GetActiveBetaAgreementForUser",
                params: {
                    sessionId: sessionId,
                    userGuid: userGuid,
                    typeId: type
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (error) {
                    if (onError) {
                        onError();
                    }
                }
            });
        },
        getUserAgreements: function (sessionId, agreementId, callback, onError) {
            gmsApiCall({
                method: "GetAccountAgreementResponsesForUser",
                params: {
                    sessionId: sessionId,
                    accountAgreementId: agreementId
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function () {
                    if (onError) {
                        onError();
                    }
                }
            });
        },
        getActiveDirectSupportAgreement: function (sessionId, language, callback, onError) {
            gmsApiCall({
                method: "GetActiveDirectSupportAgreement",
                params: {
                    sessionId: sessionId,
                    language: language
                }, 
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function () {
                    if (onError) {
                        onError();
                    }
                }
            });
        },
        getAdGroups: function (sessionId, nameFilter, activeOnly, callback, onError) {
            gmsApiCall({
                method: "GetAdGroups",
                params: {
                    sessionId: sessionId,
                    nameFilter: nameFilter,
                    activeOnly: activeOnly
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function () {
                    if (onError) {
                        onError();
                    }
                }
            });
        },
        getAdUserGroups: function (sessionId, userNameFilter, userId, unprocessedExpiredOnly, pendingApprovalOnly, callback, onError) {
            gmsApiCall({
                method: "GetAdUserGroups",
                params: {
                    sessionId: sessionId,
                    userNameFilter: userNameFilter,
                    userId: userId,
                    unprocessedExpiredOnly: unprocessedExpiredOnly,
                    pendingApprovalOnly: pendingApprovalOnly
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function () {
                    if (onError) {
                        onError();
                    }
                }
            });
        },
        requestElevatedAdUserAccess: function (sessionId, requestedHours, comments, currentAdUserGroupId, callback, onError) {
            gmsApiCall({
                method: "RequestElevatedAdUserAccess",
                params: {
                    sessionId: sessionId,
                    requestedHours: requestedHours,
                    comments: comments,
                    currentAdUserGroupId: currentAdUserGroupId
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (err) {
                    if (onError) {
                        onError(err);
                    }
                }
            });
        },
        approveElevatedAdUserAccess: function (sessionId, adUserGroupId, approveAccess, comment, callback, onError) {
            gmsApiCall({
                method: "ApproveElevatedAdUserAccess",
                params: {
                    sessionId: sessionId,
                    adUserGroupId: adUserGroupId,
                    approveAccess: approveAccess,
                    comment: comment
                },
                success: function (result) {
                    if (callback) {
                        callback(result)
                    }
                },
                error: function (err) {
                    if (onError) {
                        onError(err);
                    }
                }
            });
        },
        addAdUserGroup: function (sessionId, adUserName, approvedHours, comments, groupId, callback, onError) {
            gmsApiCall({
                method: "AddExtendedAdUserGroup",
                params: {
                    sessionId: sessionId,
                    adUserName: adUserName,
                    approvedHours: approvedHours,
                    comments: comments,
                    groupId: groupId
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (err) {
                    if (onError) {
                        onError(err);
                    }
                }
            });
        },
        updateAdUserGroup: function (sessionId, groupId, approvedHours, callback, onError) {
            gmsApiCall({
                method: "UpdateExtendedAdUserGroup",
                params: {
                    sessionId: sessionId,
                    groupId: groupId,
                    approvedHours: approvedHours
                },
                success: function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                error: function (err) {
                    if (onError) {
                        onError(err);
                    }
                }
            });
        },
        Ui: {
            addAdminToolbar: function ($owner, user, sessionId, callback) {
                $owner.empty();
                MyTools.Users.getAdGroups(sessionId, "", true, function (results) {
                    if (!results || results.length == 0) {
                        if (callback) {
                            callback();
                        }
                        return;
                    }
                    var userName = user.name.split(["@"])[0];
                    var setToolbar = function () {
                        var h = [];
                        h.push('<h3>Internal Active Directory Access</h3><span id="adUserAdmin" class="toolbar highlight">AD Username:&nbsp;<input id="adUserAdmin_userName" type="text" placeholder="Domain User Name" />' +
                            '&nbsp;&nbsp;Server:&nbsp;<input type="text" id="adUserAdmin_adGroup" placeholder="" size="50"/>' +
                            '&nbsp;&nbsp;Hours Required:&nbsp;<select id="adUserAdmin_approvedHours"></select>&nbsp;&nbsp;Reason:&nbsp;<input id="adUserAdmin_comments" type="text" placeholder="Reason or Comments"/>&nbsp;&nbsp;<button>Request</button></span>');
                        $owner.append(h.join(''));
                        return $owner.find('#adUserAdmin');
                    };
                    var $tb = setToolbar();
                    var $un = $tb.find('#adUserAdmin_userName'),
                        $gp = $tb.find('#adUserAdmin_adGroup'),
                        $hr = $tb.find('#adUserAdmin_approvedHours'),
                        $cm = $tb.find('#adUserAdmin_comments');
                    $tb.find('a').button();
                    $tb.find('button').button().on("click", function () {
                        var un = $un.val();
                        var adGroup = $gp.val().split("[")[0].trim().toLowerCase();
                        //var gpId = parseInt($gp.val());
                        var gpId = 0;
                        for (var i = 0; i < results.length; i++) {
                            if (adGroup === results[i].name.toLowerCase()) {
                                gpId = results[i].id;
                            }
                        }
                        if (gpId === 0) {
                            $.popupMessage(1, 'Cannot find group', '');
                            return;
                        }

                        var hrs = parseInt($hr.val());
                        var cmts = $cm.val();
                        if (cmts === '') {
                            $.popupMessage(1, 'Please include a reason', '');
                            return;
                        }
                        MyTools.Users.addAdUserGroup(sessionId, un, hrs, cmts, gpId, function () {
                            $.popupMessage(3, 'Your account has been successfully added', '');
                        },
                            function (error) {
                                $.popupMessage(1, parseError(error), '');
                            })
                    });
                    $un.val(userName);
                    // Groups
                    var gph = [];
                    for (var i = 0; i < results.length; i++) {
                        var displayName = results[i].name;
                        var cmts = results[i].comments;
                        if (cmts && cmts.length > 0) {
                            displayName = displayName + ' [' + cmts + ']';
                        }
                        gph.push(displayName);
                    }

                    $tb.find('#adUserAdmin_adGroup').autocomplete({
                        source: gph
                    });
                    // Hours
                    var hrs = [];
                    for (var j = 1; j < 7; j++) {
                        hrs.push('<option value="' + j + '">' + j + ' hour(s)</option>');
                    }
                    $hr.html(hrs.join(''));
                    if (callback) {
                        callback();
                    }
                }, function () {
                    // not authorised, don't add in toolbar
                    if (callback) {
                        callback();
                    }
                });
            }
        }
    },
    Integrators: {
        registerNewThirdPartyDevices: function (sessionId, productId, account, numberToRegister, promoCode, comments, userContactId, exportList, callback) {
            if (exportList) {
                MyTools.Exporter._export("RegisterThirdPartyDevices", {
                    sessionId: sessionId,
                    productId: productId,
                    accountId: account.id,
                    erpNo: account.accountId,
                    numberToRegister: numberToRegister,
                    promoCode: promoCode,
                    comments: comments,
                    userContactId: userContactId
                });
                if (callback) {
                    callback();
                }
                return;
            }
            gmsApiCallSimple("RegisterNewThirdPartyDevices", { 'sessionId': sessionId, 'productId': productId, 'account': account, 'numberToRegister': numberToRegister, 'promoCode': promoCode, 'comments': comments, 'userContactId': userContactId },
                function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                });
        },
        registerNewOEMDevices: function (sessionId, productId, account, numberToRegister, promoCode, comments, userContactId, exportList, subscriptionPlan, callback) {
            if (exportList) {
                MyTools.Exporter._export("RegisterOEMDevices", {
                    sessionId: sessionId,
                    productId: productId,
                    accountId: account.id,
                    erpNo: account.accountId,
                    numberToRegister: numberToRegister,
                    promoCode: promoCode,
                    comments: comments,
                    userContactId: userContactId,
                    subscriptionPlan: subscriptionPlan
                });
                if (callback) {
                    callback();
                }
                return;
            }
            gmsApiCallSimple("RegisterNewOEMDevices", { 'sessionId': sessionId, 'productId': productId, 'account': account, 'numberToRegister': numberToRegister, 'promoCode': promoCode, 'comments': comments, 'userContactId': userContactId, 'subscriptionPlan': subscriptionPlan },
                function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                });
        },                
        getAllSubscriptionPlans: function (callback) {
            gmsApiCallSimple("GetAllSubscriptionPlans", {'sessionId' : sessionId},
                function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                });
        },
        getAllThirdPartyDevices: function (callback) {
            gmsApiCallSimple("GetAllThirdPartyDevices", { 'sessionId': sessionId },
                function (result) {
                    if (callback) {
                        callback(result);
                    }
                },
                function (error) {
                    $.popupMessage(1, parseError(error), '');
                    if (callback) {
                        callback(null);
                    }
                });
        },  
        requestDeviceRegistration: function (userStore, $owner, onRegister, callback) {
            var isOem;
            var subscriptionPlans;
            var store = userStore.activeStore(),
                user = userStore.activeUser(),
                translationStore = userStore.getTranslationStore(),
                sessionId = userStore.sessionId;

            var devicePlans;
            if (user.isInternal) {
                MyTools.Devices.getDevicePlans(sessionId, user.account, true, function (result) {
                    devicePlans = result;
                });
            } else {
                MyTools.Devices.getDevicePlans(sessionId, user.accounts[0].id, true, function (result) {
                    devicePlans = result;
                });
            }


            this.getAllSubscriptionPlans(function (result) {
                subscriptionPlans = result;
            });
            

            var formHtml = function () {
                var h = [];
                h.push('<div id="integratorDialog">' +
                    '<ul class="tableGrid twoColumn padded">' +
                    '<li class="header">' + translationStore.getString('Account') + '</li><li><span id="integrator_accountList"></span></li>' +
                    '<li class="header">' + translationStore.getString('Assign Contracts To') + '</li><li><button id="integrator_selectShipToButton" title="Click here to assign a customer">&nbsp;</button>&nbsp;<input type="text" id="integrator_shipToBox" style="text-overflow: ellipsis;width:85%" value="No customer assigned" class="no-border"/><input id="integrator_shipToIdBox" type="hidden" /></li>' +
                    '<li class="header">' + translationStore.getString('Number of Devices') + '</li><li><input id="integrator_noOfDevices" type="number" name="devices" value="1" min="1" max="200" placeholder="Number of Devices"/></li>' +
                    '<li class="header">' + translationStore.getString('Product Code') + '</li><li><input id="integrator_productId" name="productId" value="" min="10000" max="10279" placeholder="Valid Product Code" title="Enter a valid Product Code issued by Geotab"/></li>');
                
                h.push('<li class="header gms-hidden" id ="integrator_subscriptionDropdown">' + translationStore.getString('Subscription Plan') + '</li><li class="gms-hidden" id="integrator_subscriptionPlanLi">' +
                    ' <select id="integrator_subscriptionPlanList"></select ></li >');
                h.push('<li class="header">' + translationStore.getString('Promo Code') + '</li > <li><input id="integrator_promoCode" type="text" name="promoCode" value="" placeholder="Valid Promo Code" title="Enter a valid Promo Code issued by Geotab" /> <label for="integrator_promoCode" id="promoCodeLabel"></label> </li>');
                h.push('</ul>' +
                    '</div>');
                return h.join('');
            };

            function loadForm(callback) {
                $owner.append(formHtml());
                var $dlg = $('#integratorDialog');

                // Form objects
                $('#integrator_accountList').erpList(userStore, {
                    onChanged: function () {
                        $('#integrator_shipToIdBox').val(-1);
                        $('#integrator_shipToBox').val('No customer assigned');
                    }
                }, "integrator");
                if (!user.isInternal) {
                    $(document).on('change', '#integrator_erpList', function (e) {
                        user.accounts.forEach(function (element) {
                            if (element.id == $('#integrator_erpList :selected').val()) {
                                MyTools.Devices.getDevicePlans(sessionId, element.id, true, function (result) {
                                    devicePlans = result;
                                });
                                return;
                            }
                        });
                    });
                } 

                $('#integrator_promoCode').keyup(function () {
                    var account = $("#integrator_accountList").erpAccount(userStore);
                    userStore.validatePromoCode(userStore.sessionId, account.id, $('#integrator_promoCode'), 3, $('#promoCodeLabel'), function (isValid) {
                        if (!isValid) {
                            $(".ui-dialog-buttonpane button:contains('Submit')").attr("disabled", true).addClass("ui-state-disabled");
                        }
                        else {
                            $(".ui-dialog-buttonpane button:contains('Submit')").attr("disabled", false).removeClass("ui-state-disabled");
                        }
                    });
                });
                MyTools.Integrators.getAllThirdPartyDevices(function (data) {
                    let itemCaptions = data.map(i => i.productId.toString() + (i.deviceName ? (' - ' + i.deviceName) : ''));
                    try {
                        $('#integrator_productId')['autocomplete']({
                            source: itemCaptions,
                            minLength: 1,
                            open: function () {
                                let autocompleteWidget = $("#integrator_productId").autocomplete("widget");
                                autocompleteWidget.zIndex($dlg.zIndex() + 1);
                            },
                            close: function (event, ui) {
                                checkSubplans();
                            }
                        });
                    }
                    catch (ex) {
                        console.log(ex);
                    }
                });

                                
                $('#integrator_productId').on('input', checkSubplans);
                function checkSubplans() {
                    var subPlanFound = false;
                    var parsedInputVal = MyTools.Integrators.getValueFromPotentialCaption($('#integrator_productId').val());
                    var productId = MyTools.getInt(parsedInputVal, 10000, 10279);
                    var $planList = $('#integrator_subscriptionPlanList');
                    var html = [];
                    isOem = false;

                    subscriptionPlans.forEach(function (element) {
                        $subscriptionDropDown = $('#integrator_subscriptionDropdown');
                        $planListLi = $('#integrator_subscriptionPlanLi');
                        if (element.productId == productId) {
                            isOem = true;
                            subPlanFound = true;
                            $planListLi.show();
                            $subscriptionDropDown.show();
                            devicePlans.forEach(function (element2) {
                                if (element2.level == element.level)
                                    html.push('<option value="' + element.level + '">' + element.myAdminDescription + '</option>');
                            });
                        }
                        if (!subPlanFound) {
                            $planListLi.hide();
                            $subscriptionDropDown.hide();
                        }
                    });
                    $planList.html(html.join(''));

                }           
                $("#integrator_selectShipToButton").button({
                    icons: {
                        primary: "ui-icon-tag"
                    },
                    text: false
                }).on("click", function () {
                    var account = $("#integrator_accountList").erpAccount(userStore);
                    if (account == null) {
                        return;
                    }
                    $('#integrator_userContainer').userContactList(userStore, {
                        showLocalPickup: false,
                        dialogMode: true,
                        defaultAccountNo: account.accountId,
                        onSelect: function (result) {
                            if (!result) {
                                $('#integrator_shipToIdBox').val(-1);
                                $('#integrator_shipToBox').val('No customer assigned');
                            }
                            else {
                                $('#integrator_shipToIdBox').val(result.id);
                                $('#integrator_shipToBox').val(result['displayListName']).attr('title', result['displayListName']);
                            }
                        }
                    }, $dlg);
                });
                var title;
                if (isOem) {
                    title = "Register OEM Devices";
                } else {
                    title = "Register Third-Party Devices";
                }
                $dlg.dialog(
                    {
                        title: title,
                        width: 700,
                        modal: true,
                        close: function () {
                            $(this).dialog('destroy').remove();
                        },
                        buttons: {
                            Submit: function () {
                                var $body = $('body'),
                                    $dlg = $(this);
                                var account = $("#integrator_accountList").erpAccount(userStore);
                                if (!account || account.id < 1) {
                                    $.popupMessageToOwner($dlg, 1, "You must enter a valid ERP account");
                                    $('#integrator_accountList').trigger("focus");
                                    return;
                                }
                                var parsedInputVal = MyTools.Integrators.getValueFromPotentialCaption($('#integrator_productId').val())
                                var productId = MyTools.getInt(parsedInputVal, 10000, 10279);
                                if (!productId) {
                                    $.popupMessageToOwner($dlg, 1, "You must enter a valid product code");
                                    $('#integrator_productId').trigger("focus");
                                    return;
                                }
                                var noOfDevices = MyTools.getInt($('#integrator_noOfDevices').val(), 1, 200);
                                if (!noOfDevices) {
                                    $.popupMessageToOwner($dlg, 1, "You must enter a valid device count between 1 and 200");
                                    $('#integrator_noOfDevices').trigger("focus");
                                    return;
                                }
                                if (isOem) {
                                    var subscriptionPlan = $("#integrator_subscriptionPlanList option:selected").text();
                                    if (subscriptionPlan.length == 0) {
                                        $.popupMessageToOwner($dlg, 1, "You must enter a valid subscription plan");
                                        $('#integrator_subscriptionPlan').trigger("focus");
                                        return;
                                    }
                                }
                                var promoCode = $('#integrator_promoCode').val();
                                var uid = $('#integrator_shipToIdBox').val();
                                $body.mask('Please wait...');
                                uid = (uid && uid.length > 0 ? parseInt(uid) : -1);
                                if (isOem) {
                                    MyTools.Integrators.registerNewOEMDevices(sessionId, productId, account, noOfDevices, promoCode, '', uid, true, subscriptionPlan,
                                        function (result) {
                                        $body.unmask();
                                        $.popupMessageToOwner($dlg, 3, 'Thank you, your export will begin shortly.', function () {
                                            if (onRegister) {
                                                onRegister();
                                            }
                                            $dlg.dialog('close');
                                        });
                                    });
                                } else {
                                    if (userStore.isUserAllowed(user, ['Third-Party-Integrator'], true)) {

                                        MyTools.Integrators.registerNewThirdPartyDevices(sessionId, productId, account, noOfDevices, promoCode, '', uid, true, function (result) {
                                            $body.unmask();
                                            $.popupMessageToOwner($dlg, 3, 'Thank you, your export will begin shortly.', function () {
                                                if (onRegister) {
                                                    onRegister();
                                                }
                                                $dlg.dialog('close');
                                            });

                                        });
                                    }
                                    else {
                                        $body.unmask();
                                        $.popupMessageToOwner($dlg, 1, "You do not have the access to add this product code.");
                                        $('#integrator_productId').trigger("focus");
                                    }
                                }
                            },
                            Cancel: function () {
                                $(this).dialog("close");
                            }
                        }
                    });
                if (callback) {
                    callback();
                }
            }

            // Execution Point
            loadForm(function () {
                if (callback) {
                    callback();
                }
            });
        },
        getValueFromPotentialCaption: function (inputValue) {
            var indexOfCaptionSplitter = inputValue.indexOf('-') - 1;
            if (indexOfCaptionSplitter > 0) {
                return inputValue.substring(0, indexOfCaptionSplitter);
            } else {
                return inputValue;
            }
        }
    },
    Shipping: {
        trackShipment: function (trackingNo) {
            var trackingUrl = "https://www.fedex.com/fedextrack/?tracknumbers=" + trackingNo;
            if (trackingNo.indexOf('3RW575') > 0 || trackingNo.indexOf("1Z") == 0) {
                trackingUrl = "http://wwwapps.ups.com/etracking/tracking.cgi?TypeOfInquiryNumber=T&InquiryNumber1=" + trackingNo + "&commit=Track!"
            }
            window.open(trackingUrl);
        }
    },
    StaffLeave: {
        approveStaffLeave: function (sessionId, leaveId, callback, onError) {
            gmsApiCallSimple("ApproveStaffLeave", { 'sessionId': sessionId, 'leaveId': leaveId },
                function () {
                    if (callback) {
                        callback();
                    }
                },
                function (error) {
                    if (onError) {
                        onError(error);
                    }
                    else {
                        $.popupMessage(1, parseError(error), '');
                    }
                });
        }
    },
    parseBool: function (str) {
        return /true/i.test(str);
    },
    stringIsEmpty: function (str) {
        return (!str || /^\s*$/.test(str));
    },
    getInt: function (val, min, max) {
        try {
            var i = parseInt(val);
            if (min && i < min) {
                return null;
            }
            if (max && i > max) {
                return null;
            }
            return i;
        }
        catch (ex) {
            return null;
        }
    },
    Amountscrolled: function (){
        try {
            var scrollTop = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop
            var pctScrolled = Math.floor(scrollTop / trackLength * 100) // gets percentage scrolled (ie: 80 or NaN if tracklength == 0)
            output.innerHTML = pctScrolled + '% scrolled'
            return pctScrolled;
        }
        catch (ex) {
            return null;
        }
    }
};

var activeNotifications = function () {
    return {
        id: 1,
        priority: 3,
        message: 'This is a test notice and can be ignored',
        persisted: false,
        pages: ['aaa.htm'],
        roles: ['INTERNAL'],
        accounts: ['GEOT02'],
        validFrom: MyTools.DateTime.toDate('2010-01-01 05:00:00', true),
        validTo: MyTools.DateTime.toDate('2011-04-19 05:00:00', true),
        active: true
    };
};

var checkForNotification = function (userStore, callback) {
    var ns = activeNotifications();
    if (ns && ns.length > 0) {
        var user = userStore.activeUser();
        var now = MyTools.DateTime.now();
        var page = userStore.currentPageName();
        for (var i = 0; i < ns.length; i++) {
            var mustAdd = false;
            var n = ns[i];
            // Expired
            if (!n.active || n.validFrom > now || n.validTo < now) {
                continue;
            }
            // Pages
            if (n.pages && n.pages.length > 0 && page) {
                var pageMatch = false;
                for (var b = 0; b < n.pages.length; b++) {
                    if (n.pages[b] == page) {
                        pageMatch = true;
                        break;
                    }
                }
                if (!pageMatch) {
                    continue;
                }
            }
            // Roles
            if (n.roles && n.roles.length > 0) {
                if (!userStore.isUserAllowed(user, n.roles, false)) {
                    continue;
                }
            }
            // Accounts
            if (n.accounts && n.accounts.length > 0 && user.accounts && user.accounts.length > 0) {
                var accountMatch = false;
                for (var j = 0; j < n.accounts.length; j++) {
                    for (var k = 0; k < user.accounts.length; k++) {
                        if (n.accounts[j] == user.accounts[k].accountId) {
                            accountMatch = true;
                            break;
                        }
                    }
                }
                if (!accountMatch) {
                    continue;
                }
            }
            // All matched, load notice
            $.notify(null, n.priority, n.id, n.message, n.persisted, userStore, '', '');
        }
    }
    if (callback) {
        callback();
    }
};



// GMS Option control
jQuery.fn.gmsOption = function (options) {
    // constructor
    var $this = $(this),
        component = function (options) {
            var h = [];
            h.push('<h1>' + options.name + '</h1><span class="subdued">' + options.comments + '</span>');
            h.push('<input type="radio" style="display: none;"/>');
            if (!$this.attr('id')) {
                $this.attr('id', options.id);
            }
            $this.addClass('gms-box clear padded-double hover');
            $this.html(h.join(''));
            radio = $this.find(':radio');
            if (options.group) {
                radio.attr('name', options.group);
            }
        },
        fireEvent = function (eventName, event) {
            if (eventName in options) {
                options[eventName].apply($this, [event]);
            }
        },
        id = options.id,
        name = options.name,
        comments = options.comments,
        group = options.group,
        radio = null;

    // event handling
    $this.on("click", 
        function (e) {
            if (options.group) {
                $('input[name=' + options.group + ']:radio').parent().removeClass('normal clear hover').addClass('clear hover');
            }
            if (radio.is(':checked')) {
                $this.removeClass('normal').addClass('clear hover');
                radio.prop('checked', false);
                fireEvent("onDeselect", e);
            }
            else {
                $this.removeClass('clear hover').addClass('normal');
                radio.attr('checked', 'checked');
                fireEvent("onSelect", e);
            }
            //fireEvent("onClick", e);
        }).on("mouseenter", function (e) {
            if (options.group) {
                $('input[name=' + options.group + ']:radio').parent().each(function () {
                    if ($(this) === $this) {
                        return;
                    }
                    $(this).trigger('onBlur');
                });
            }
            if (radio.is(':checked')) {
                return;
            }
            fireEvent("onHover", e);
        }).on("mouseleave", function (e) {
            if (radio.is(':checked')) {
                return;
            }
            fireEvent("onBlur", e);
        });

    component(options);
    return $this;
};

// Notify control
(function ($) {
    function showNotify($owner, level, msgId, msg, closeBtn, us, onClose, callback) {
        msgId = msgId || "0";
        var nid = 'notify' + msgId.toString();
        if (!$owner) {
            $owner = $('body').find('#body-container');
        }
        $owner.find('#' + nid).remove();
        var c = 'highlight';
        var i = 'ui-icon-info';
        if (level == 1) {
            c = 'alert';
            i = 'ui-icon-alert';
        }
        else if (level == 3) {
            c = 'good';
            i = 'ui-icon-check';
        }
        else if (level == 0) {
            c = '';
        }
        var h = [];
        if (!msgId || msgId.length == 0) {
            msgId = 0;
        }
        h.push('<div id="' + nid + '" class="notification ' + c + '" style="display: none;">');
        h.push('<span class="ui-icon ' + i + '" style="float: left; margin-right: .3em;"></span>');
        h.push('<span>' + msg + '</span>');
        if (closeBtn) {
            h.push(' <span class="ui-icon ui-icon-close float-right" msgId=' + msgId + '></span>');
        }
        h.push('</div>');
        $owner.prepend(h.join(''));
        var $n = $owner.find('#' + nid);
        $n.find('span.ui-icon-close').on("click", function () {
            var mid = $(this).attr('msgId');
            if (mid && mid.length > 0 && parseInt(mid) > 0) {
                // TODO: Write in response to database
                alert('TODO');
            }
            if (onClose) {
                onClose();
            }
            var $m = $owner.find('#' + nid);
            $m.hide('blind', {}, 500, function () {
                $m.detach();
            });
        });
        var $parent = $n.parent();
        $n.css("opacity", 0.9);
        var offset = $parent.offset();
        //$n.width($parent.width() - offset.left);
        $n.show('blind', {}, 500, function () {
            if (!closeBtn) {
                setTimeout(function () {
                    $n.hide('blind', {}, 500, function () {
                        if (callback) {
                            callback();
                        }
                    });
                }, 4000);
            }
            else {
                if (callback) {
                    callback();
                }
            }
        });
    }

    $.notify = function ($owner, priority, msgId, msg, persisted, us, onClose, callback) {
        showNotify($owner, priority, msgId, msg, persisted, us, onClose, callback);
    };
    $.notifyHighlight = function ($owner, msgId, msg, persisted, us, onClose, callback) {
        showNotify($owner, 2, msgId, msg, persisted, us, onClose, callback);
    };
    $.notifyAlert = function ($owner, msgId, msg, persisted, us, onClose, callback) {
        showNotify($owner, 1, msgId, msg, persisted, us, onClose, callback);
    };
    $.notifyGood = function ($owner, msgId, msg, persisted, us, onClose, callback) {
        showNotify($owner, 3, msgId, msg, persisted, us, onClose, callback);
    };
    $.notifyNormal = function ($owner, msgId, msg, persisted, us, onClose, callback) {
        showNotify($owner, 0, msgId, msg, persisted, us, onClose, callback);
    };
})(jQuery);

$.popupMessage = function (priority, msg, onComplete, errorDetails) {
    var $ct = $('#newMsgBox');
    if (!$ct || !$ct.length || $ct.length == 0) {
        $ct = $('body');
    }
    $.popupMessageToOwner($ct, priority, msg, onComplete, errorDetails);
};

$.popupMessageToOwner = function ($owner, priority, msg, onComplete, errorDetails) {
    if (!$owner || $owner.length == 0) {
        $owner = $('#newMsgBox');
    }
    if (!$owner || $owner.length == 0) {
        $owner = $('body');
    }
    // Is owner a dialog?
    var obj = false;
    try {
        obj = $owner.dialog("isOpen");
    }
    catch (ex) {
        obj = false;
    }
    var isDialog = obj === true;
    if (!msg || msg.length == 0) {
        msg = 'An unknown error has occurred, please try again. If the problem persists, contact <a href="http://www.geotab.com">Geotab</a>.';
    }
    $owner.find('#msg1234').remove();
    var bc = 'highlight';
    if (priority) {
        if (priority == 1) {
            bc = 'alert';
        }
        else if (priority == 3) {
            bc = 'good';
        }
    }
    var popupClass = (isDialog ? 'popup-div-dialog' : 'popup-div');
    var clearClass = (isDialog ? '' : ' clear: both;');
    var paddingClass = (isDialog ? '' : ' no-padding no-border');
    $owner.prepend('<div style="z-index: 100000; display: none; width:100%;' + clearClass + '" id="msg1234" class="' + popupClass + '"></div>');
    var $mc = $owner.find('#msg1234');
    // Width
    var width = $owner.width();
    $mc.width(width);
    // Height
    if (!isDialog) {
        // $mc.height($owner.height());
    }
    var errorDetailsButton = (!errorDetails) ? '' : ' <input id="viewDetailsButton" type="button" value="View Details" />';
    $mc.append('<div style="z-index:100010; width: ' + width + '; margin: 0 auto;" class="notification ' + bc + ' align-center no-radius' + paddingClass + '"><span style="float:right;cursor:pointer" class="ui-icon ui-icon-close">&nbsp;</span><span>' + msg + errorDetailsButton + ' </span></div>');
    var $mb = $mc.find('.notification');
    if (!isDialog) {
        $mb.height($mc.height());
    }
    $mb.find('span.ui-icon-close').on("click", function () {
        clearTimeout($mc.stop().data('timer'));
        $mc.empty().hide();
        if (onComplete) {
            onComplete();
        }
    });
    if (!errorDetails) {
        var $detailsButton = $mc.find('#viewDetailsButton');
        $detailsButton.button();

        $detailsButton.on("click", function () {
            if (errorDetails.errors) {
                var details = '';
                for (var i = 0; i < errorDetails.errors.length; i++) {
                    details = details + ('<p>' + errorDetails.errors[i].name + ':' + errorDetails.errors[i].message + '</p>');
                }
                $mc.append('<div style="z-index:100010; width: ' + width + '; margin: 0 auto;" class="notification ' + bc + ' align-center no-radius' + paddingClass + '"><span style="float:right;cursor:pointer" class="ui-icon ui-icon-close">&nbsp;</span><span>' + details + '</span></div>')
                $mb.height($mc.height());
            }
            $detailsButton.attr('disabled', 'disabled');
        });
    }
    function fadeMessageIn() {
        $mc.fadeIn(100, function () {
            $.data(this, 'timer', setTimeout(function () {
                $mc.fadeOut(100, function () {
                    if (onComplete) {
                        onComplete();
                    }
                });
            }, 4000));
        });
    }

    function fadeMessageInNoFadeOut() {
        $mc.fadeIn(100, '');
    }

    $mb.on("mouseenter", function () {
        clearTimeout($mc.stop().data('timer'));
    }).on("mouseleave", function () {
        fadeMessageIn();
    });
    fadeMessageIn();
};


var validateRmaReasons = function ($form) {
    function setCss($val, invalid, txt) {
        if (invalid && !$val.hasClass('bad-box')) {
            $val.addClass('bad-box');
        }
        else if (!invalid && $val.hasClass('bad-box')) {
            $val.removeClass('bad-box');
        }
    }

    var requiredElements = $form.find('.required');
    for (var i = 0; i < requiredElements.length; i++) {
        setCss($(requiredElements[i]), $(requiredElements[i]).val().trim() == '', '*');
    }
    return !$form.find('.bad-box:not(.padded)').length > 0;
}
var validateFields = function ($form) {
    var emptyString = /^$/;

    function setCss($val, invalid, txt) {
        if (invalid && !$val.hasClass('bad-box')) {
            $val.addClass('bad-box');
        }
        else if (!invalid && $val.hasClass('bad-box')) {
            $val.removeClass('bad-box');
        }
        var $l = $form.find("label[for='" + $val.attr('id') + "']");
        if (!$l || $l.length == 0) {
            return;
        }
        if (invalid && !$l.hasClass('bad')) {
            $l.addClass('bad');
        }
        else if (!invalid && $l.hasClass('bad')) {
            $l.removeClass('bad');
        }
    }
    
        var requiredElements = $form.find('.required');
        for (var i = 0; i < requiredElements.length; i++) {
            setCss($(requiredElements[i]), $(requiredElements[i]).val().trim() == '', '*');
        }

        //required when not disabled
        $.each($form.find('.required-not-disabled'), function (key, val) {
            var isEnabled = $(val).is(':enabled');
            setCss($(val), $(val).val().trim() == '' && isEnabled, '*');
        });
        $.each($form.find('.validate-purchaseOrderNo'), function (key, val) {
            var poVal = $(val).val();
            var isValid = poVal.length > 0 && poVal.length < 51;
            setCss($(val), !isValid, '*');
        });
        // password field
        $.each($form.find('.password'), function (key, val) {
            var password = $(val).val();
            var validateFail = false;
            var validationLength = 12;
            if (val.className.indexOf('login') != -1) {
                validationLength = 5;
            } else {
                var containsLowerCase = password.toUpperCase() != password;
                var containsUpperCase = password.toLowerCase() != password;
                var containsNumber = /\d/.test(password);
                var containsSymbol = !(/^[a-zA-Z0-9]*$/.test(password));
                validateFail = (!containsLowerCase || !containsUpperCase || !containsNumber || !containsSymbol);
            }
            var correctLength = password.length >= validationLength;
            validateFail = validateFail || !correctLength;
            setCss($(val), validateFail, 'Invalid Password');
        });
        // email field
        $.each($form.find('.email'), function (key, val) {
            setCss($(val), !isValidEmailAddress($(val).val()), 'Invalid Email');
        });
        // zip/postal fields
        $.each($form.find('.zipCode'), function (key, item) {
            var basicCode = /^([A-Za-z0-9 ]){3,}$/;
            var naCode = /^\d{5}-\d{4}|\d{5}|[A-Za-z]{1}\d{1}[A-Za-z]{1}\s*\d{1}[A-Za-z]{1}\d{1}$/;
            var val = $(item).val();
            var isValidPostal = emptyString.test(val) || basicCode.test(val) || naCode.test(val);
            setCss($(item), !isValidPostal, 'Invalid (00000 | A0A 0A0');
        });
        // Phone
        $.each($form.find('.telephone'), function (key, item) {
            var phone1 = /^(([0-9]{1})*[- .(]*([0-9a-zA-Z]{3})*[- .)]*[0-9a-zA-Z]{3}[- .]*[0-9a-zA-Z]{4})+$/;
            var phone2 = /^[0-9 . \- + { }]*$/;
            var val = $(item).val();
            //var isValidPhone = emptyString.test(val) || phone2.test(val)
            if ($(item).hasClass('required')) {
                var isValidPhone = phone1.test(val);
            } else {
                var isValidPhone = phone2.test(val);
            }
            setCss($(item), !isValidPhone, 'Invalid Tel No.');
        });
        // integer
        $.each($form.find('.integer'), function (key, item) {
            var intTest = /^\d{0,9}$/;
            var val = $(item).val();
            var isValidInt = intTest.test(val);
            if (isValidInt) {
                var intVal = parseInt(val);
                isValidInt = intVal > 0;
            }
            setCss($(item), !isValidInt, '*');
        });
        $.each($form.find('.integerZeroAllowed'), function (key, item) {
            var intTest = /^\d{0,9}$/;
            var val = $(item).val();
            var isValidInt = intTest.test(val);
            if (isValidInt) {
                var intVal = parseInt(val);
                isValidInt = intVal >= 0;
            }
            setCss($(item), !isValidInt, '*');
        });
        return !$form.find('.bad-box:not(.padded)').length > 0;    
};

validateInternalEmail = function ($form) {
    // email field
    var isInternal = true;
    $.each($form.find('.email'), function (key, val) {
        if ($(val).val().indexOf('@geotab.com') == -1) {
            isInternal = false;
        }
    });
    return isInternal;
};

exportData = function (jsonData, callback) {
    try {
        var url = window.location.protocol + '//' + window.location.hostname + ':' + window.location.port;
        onNavigationClick(url + '/Data/Exporter.ashx?invoke=' + jsonData, callback);
    }
    catch (exception) {
        $.popupMessage(1, parseError(exception), '');
    }
};
getErrorComments = function (errorCode, path) {
    var returnMessage = '';
    if (errorCode == 'UnauthorizedAccess') {
        returnMessage = 'You attempted to access a page that you do not have access to. Please contact Geotab by clicking the Report button below, to request access.';
    }
    if (errorCode && errorCode != '') {
        returnMessage += (returnMessage.length > 0 ? '\r\n' : '') + 'The return Error Code is: ' + errorCode.toUpperCase();
    }
    if (path && path.length > 0) {
        returnMessage += (returnMessage.length > 0 ? '\r\n' : '') + 'Error Source: ' + path;
    }
    return returnMessage.length > 0 ? returnMessage : 'An unknown error has occurred.';
};
logError = function (errorReason) {
    location.href = 'error.htm?reason=' + errorReason;
};
isChecked = function ($checkBoxInput) {
    return $checkBoxInput.prop('checked');
};
toSizeString = function (sizeInBytes) {
    if (!sizeInBytes) {
        return '';
    }
    if (sizeInBytes > 1024) {
        if (sizeInBytes < (1024 * 1024)) {
            return Math.round(sizeInBytes / 1024).toString() + " KB";
        }
        if (sizeInBytes < (1024 * 1024 * 1024)) {
            return (Math.round(sizeInBytes / 1024 / 1024 * 10) / 10).toString() + " MB";
        }
        return (Math.round((sizeInBytes / 1024 / 1024 / 1024) * 100) / 100).toString() + " GB";
    }
    return Math.round(sizeInBytes).toString() + " B";
    //(Math.round((record.dataSizeKB / 1024 / 1024) * 10000) / 10000).toString() + ' GB'
};
onNavigationClick = function (url, callback) {
    window.location.href = url;
    if (callback) {
        callback();
    }
};
getFreeHarnessList = function () {
    var freeHarnesses = [];
    freeHarnesses[0] = '';
    /*freeHarnesses[1] = 'HRN-EZ';
     freeHarnesses[2] = 'HRN-C9';
     freeHarnesses[3] = 'HRN-D6';
     freeHarnesses[4] = 'HRN-D9';*/
    return freeHarnesses;
};
setClickAndOnEnter = function (button, inputItems, callback) {
    function setCallBackOnEnter(inputItem) {
        $(inputItem)['keypress'](function (e) {
            if ($(button).attr('disabled')) {
                return;
            }
            e = e || window.event;
            if (e && e.keyCode && e.keyCode == 13) {
                if (callback) {
                    callback();
                }
            }
        });
    }

    button.on("click", 
        function () {
            if ($(button).attr('disabled')) {
                return;
            }
            callback();
        }).button();
    // On Enter events
    for (var i = 0; i < inputItems.length; i++) {
        if (inputItems[i].id == button[0].id) {
            continue;
        }
        setCallBackOnEnter(inputItems[i]);
    }
};
formatToCurrency = function (value, prefix) {
    var i = parseFloat(value);
    if (isNaN(i)) {
        i = 0.00;
    }
    var minus = '';
    if (i < 0) {
        minus = '-';
    }
    i = Math.abs(i);
    i = parseInt((i + 0.005) * 100);
    i = i / 100;
    var s = i.toString();
    var b = s.split('.', 2);
    var n = b[0];
    var d = b[1];
    if (!d) {
        d = '00';
    }
    var a = [];
    while (n.length > 3) {
        var nn = n.substr(n.length - 3);
        a.unshift(nn);
        n = n.substr(0, n.length - 3);
    }
    if (n.length > 0) {
        a.unshift(n);
    }
    n = a.join(",");
    s = minus + n + '.' + d;
    if (s.indexOf('.') < 0) {
        s += '.00';
    }
    if (s.indexOf('.') == (s.length - 2)) {
        s += '0';
    }
    if (!prefix) {
        prefix = '';
    }
    return prefix + ' ' + s;
};
formatToCurrencyV2 = function (value, currencyRate) {
    var currencyCode = currencyRate['currency']['code'];
    if (currencyCode.length > 3) {
        currencyCode = currencyCode.substring(0, 3);
    }
    var currencyCulture = currencyRate['currency']['cultureName'];
    return value.toLocaleString(currencyCulture, { style: 'currency', currency: currencyCode, maximumFractionDigits: 2, minimumFractionDigits: 2 })
};

function isValidEmailAddress(emailAddress) {
    var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,})$/;
    return reg.test(emailAddress);
}
function isButtonEnabled(button) {
    return !button.attr('disabled');
}
function enableButton(button, enable) {
    $(button).button({ disabled: !enable });
}
function enableElement($element, enable) {
    if (enable) {
        $element.prop('disabled', false);
        //$(element).attr('disabled', '').removeClass('ui-state-disabled');
    } else {
        $element.attr('disabled', 'disabled')/*.addClass('ui-state-disabled')*/;
    }
}
function enableElements($elements, enable) {
    $.each($elements, function (key, value) {
        if (enable) {
            $(value).prop('disabled', false).removeClass('ui-state-disabled');
        } else {
            $(value).attr('disabled', 'disabled').addClass('ui-state-disabled');
        }
    });
}
function getQueryVariable(query, variable) {
    query = query.toLowerCase();
    variable = variable.toLocaleLowerCase();
    if (query.indexOf(variable) == -1) {
        return "";
    }
    var hasSubParams = query.indexOf('?');
    hasSubParams = hasSubParams > query.indexOf(variable);
    if (!hasSubParams) {
        var ampersandRegex = new RegExp('&(?!amp;)');
        var vars = query.split(ampersandRegex);
        for (var i = 0; i < vars.length; i++) {
            var equalsRegex = new RegExp('=(?!amp;)');
            var pair = vars[i].split(equalsRegex);
            if (pair[0].toUpperCase() == variable.toUpperCase()) {
                if (variable == "po" || variable == "pno") {
                    return pair[1].replace(/&amp;/g, "&").replace(/=amp;/g, "=");
                }
                return pair[1].replace(/"/g, '').replace('#', '');
            }
        }
    }
    else {
        if (variable == "po" || variable == "pno") {
            return query.substr(query.indexOf(variable) + variable.length + 1).replace(/&amp;/g, "&").replace(/=amp;/g, "=");
        }
        return query.substr(query.indexOf(variable) + variable.length + 1).replace('#', '');
    }
    return "";
}
function getQueryVariablePreserveCase(query, variable) {
    var lowerCaseQuery = query.toLowerCase();
    variable = variable.toLocaleLowerCase();

    var index = lowerCaseQuery.indexOf(variable);
    if (index == -1) {
        return "";
    }
    var hasSubParams = query.indexOf('?');
    hasSubParams = hasSubParams > query.indexOf(variable);
    if (!hasSubParams) {
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (pair[0].toUpperCase() == variable.toUpperCase()) {
                return pair[1].replace(/"/g, '').replace('#', '');
            }
        }
    }
    else {
        return query.substr(index + variable.length + 1).replace('#', '');
    }
    return "";
}
PageQuery = function (q) {
    if (q.length > 1) this.q = q.substring(1, q.length);
    else this.q = null;
    this.keyValuePairs = new Array();
    if (q) {
        for (var i = 0; i < this.q.split("&").length; i++) {
            this.keyValuePairs[i] = this.q.split("&")[i];
        }
    }
    this.getValue = function (s) {
        for (var j = 0; j < this.keyValuePairs.length; j++) {
            if (this.keyValuePairs[j].split("=")[0] == s)
                return this.keyValuePairs[j].split("=")[1];
        }
        return false;
    };
    this.getParameters = function () {
        var a = new Array(this.getLength());
        for (var j = 0; j < this.keyValuePairs.length; j++) {
            a[j] = this.keyValuePairs[j].split("=")[0];
        }
        return a;
    };
    this.getLength = function () {
        return this.keyValuePairs.length;
    }
};
queryString = function (key) {
    var page = new PageQuery(window.location.search);
    return unescape(page.getValue(key));
};
extractPageName = function (pageUrl) {
    var arr = {};
    arr = pageUrl.split('/');
    var page = (arr.length < 2 ? arr[0].toLowerCase() : arr[arr.length - 1].toLowerCase());
    var pageArr = {};
    pageArr = page.split('.');
    return pageArr[0];
};

/* DATE */
/**
 * Version: 1.0 Alpha-1
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/.
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo = { name: "en-US", englishName: "English (United States)", nativeName: "English (United States)", dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], abbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], shortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], firstLetterDayNames: ["S", "M", "T", "W", "T", "F", "S"], monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], abbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], amDesignator: "AM", pmDesignator: "PM", firstDayOfWeek: 0, twoDigitYearMax: 2029, dateElementOrder: "mdy", formatPatterns: { shortDate: "M/d/yyyy", longDate: "dddd, MMMM dd, yyyy", shortTime: "h:mm tt", longTime: "h:mm:ss tt", fullDateTime: "dddd, MMMM dd, yyyy h:mm:ss tt", sortableDateTime: "yyyy-MM-ddTHH:mm:ss", universalSortableDateTime: "yyyy-MM-dd HH:mm:ssZ", rfc1123: "ddd, dd MMM yyyy HH:mm:ss GMT", monthDay: "MMMM dd", yearMonth: "MMMM, yyyy" }, regexPatterns: { jan: /^jan(uary)?/i, feb: /^feb(ruary)?/i, mar: /^mar(ch)?/i, apr: /^apr(il)?/i, may: /^may/i, jun: /^jun(e)?/i, jul: /^jul(y)?/i, aug: /^aug(ust)?/i, sep: /^sep(t(ember)?)?/i, oct: /^oct(ober)?/i, nov: /^nov(ember)?/i, dec: /^dec(ember)?/i, sun: /^su(n(day)?)?/i, mon: /^mo(n(day)?)?/i, tue: /^tu(e(s(day)?)?)?/i, wed: /^we(d(nesday)?)?/i, thu: /^th(u(r(s(day)?)?)?)?/i, fri: /^fr(i(day)?)?/i, sat: /^sa(t(urday)?)?/i, future: /^next/i, past: /^last|past|prev(ious)?/i, add: /^(\+|after|from)/i, subtract: /^(\-|before|ago)/i, yesterday: /^yesterday/i, today: /^t(oday)?/i, tomorrow: /^tomorrow/i, now: /^n(ow)?/i, millisecond: /^ms|milli(second)?s?/i, second: /^sec(ond)?s?/i, minute: /^min(ute)?s?/i, hour: /^h(ou)?rs?/i, week: /^w(ee)?k/i, month: /^m(o(nth)?s?)?/i, day: /^d(ays?)?/i, year: /^y((ea)?rs?)?/i, shortMeridian: /^(a|p)/i, longMeridian: /^(a\.?m?\.?|p\.?m?\.?)/i, timezone: /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i, ordinalSuffix: /^\s*(st|nd|rd|th)/i, timeContext: /^\s*(\:|a|p)/i }, abbreviatedTimeZoneStandard: { GMT: "-000", EST: "-0400", CST: "-0500", MST: "-0600", PST: "-0700" }, abbreviatedTimeZoneDST: { GMT: "-000", EDT: "-0500", CDT: "-0600", MDT: "-0700", PDT: "-0800" } };
Date.prototype.isLeapYear = function () {
    var y = this.getFullYear();
    return (((y % 4 === 0) && (y % 100 !== 0)) || (y % 400 === 0));
};
Date.getDaysInMonth = function (year, month) {

    return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
};
Date.isLeapYear = function (year) {
    var date = new Date(year + '-06-15 12:00:00');
    return date.isLeapYear();
};
Date.getTimezoneOffset = function (s, dst) {
    return (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()] : Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];
};
Date.getTimezoneAbbreviation = function (offset, dst) {
    var n = (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard, p;
    for (p in n) {
        if (n[p] === offset) {
            return p;
        }
    }
    return null;
};
Date.prototype.clone = function () {
    return new Date(this.getTime());
};
Date.prototype.compareTo = function (date) {
    if (isNaN(this)) {
        throw new Error(this);
    }
    if (date instanceof Date && !isNaN(date)) {
        return (this > date) ? 1 : (this < date) ? -1 : 0;
    } else {
        throw new TypeError(date);
    }
};
Date.prototype.equals = function (date) {
    return (this.compareTo(date) === 0);
};
Date.prototype.between = function (start, end) {
    var t = this.getTime();
    return t >= start.getTime() && t <= end.getTime();
};
Date.prototype.addMilliseconds = function (value) {
    this.setMilliseconds(this.getMilliseconds() + value);
    return this;
};
Date.prototype.addSeconds = function (value) {
    return this.addMilliseconds(value * 1000);
};
Date.prototype.addMinutes = function (value) {
    return this.addMilliseconds(value * 60000);
};
Date.prototype.addHours = function (value) {
    return this.addMilliseconds(value * 3600000);
};
Date.prototype.addDays = function (value) {
    return this.addMilliseconds(value * 86400000);
};
Date.prototype.addWeeks = function (value) {
    return this.addMilliseconds(value * 604800000);
};
Date.prototype.addMonths = function (value) {
    var n = this.getDate();
    this.setDate(1);
    this.setMonth(this.getMonth() + value);
    this.setDate(Math.min(n, this.getDaysInMonth()));
    return this;
};
Date.prototype.addYears = function (value) {
    return this.addMonths(value * 12);
};
Date.prototype.add = function (config) {
    if (typeof config == "number") {
        this._orient = config;
        return this;
    }
    var x = config;
    if (x.millisecond || x.milliseconds) {
        this.addMilliseconds(x.millisecond || x.milliseconds);
    }
    if (x.second || x.seconds) {
        this.addSeconds(x.second || x.seconds);
    }
    if (x.minute || x.minutes) {
        this.addMinutes(x.minute || x.minutes);
    }
    if (x.hour || x.hours) {
        this.addHours(x.hour || x.hours);
    }
    if (x.month || x.months) {
        this.addMonths(x.month || x.months);
    }
    if (x.year || x.years) {
        this.addYears(x.year || x.years);
    }
    if (x.day || x.days) {
        this.addDays(x.day || x.days);
    }
    return this;
};
Date._validate = function (value, min, max, name) {
    if (typeof value != "number") {
        throw new TypeError(value + " is not a Number.");
    } else if (value < min || value > max) {
        throw new RangeError(value + " is not a valid value for " + name + ".");
    }
    return true;
};
Date.validateMillisecond = function (n) {
    return Date._validate(n, 0, 999, "milliseconds");
};
Date.validateSecond = function (n) {
    return Date._validate(n, 0, 59, "seconds");
};
Date.validateMinute = function (n) {
    return Date._validate(n, 0, 59, "minutes");
};
Date.validateHour = function (n) {
    return Date._validate(n, 0, 23, "hours");
};
Date.validateDay = function (n, year, month) {
    return Date._validate(n, 1, Date.getDaysInMonth(year, month), "days");
};
Date.validateMonth = function (n) {
    return Date._validate(n, 0, 11, "months");
};
Date.validateYear = function (n) {
    return Date._validate(n, 1, 9999, "seconds");
};
Date.prototype.set = function (config) {
    var x = config;
    if (!x.millisecond && x.millisecond !== 0) {
        x.millisecond = -1;
    }
    if (!x.second && x.second !== 0) {
        x.second = -1;
    }
    if (!x.minute && x.minute !== 0) {
        x.minute = -1;
    }
    if (!x.hour && x.hour !== 0) {
        x.hour = -1;
    }
    if (!x.day && x.day !== 0) {
        x.day = -1;
    }
    if (!x.month && x.month !== 0) {
        x.month = -1;
    }
    if (!x.year && x.year !== 0) {
        x.year = -1;
    }
    if (x.millisecond != -1 && Date.validateMillisecond(x.millisecond)) {
        this.addMilliseconds(x.millisecond - this.getMilliseconds());
    }
    if (x.second != -1 && Date.validateSecond(x.second)) {
        this.addSeconds(x.second - this.getSeconds());
    }
    if (x.minute != -1 && Date.validateMinute(x.minute)) {
        this.addMinutes(x.minute - this.getMinutes());
    }
    if (x.hour != -1 && Date.validateHour(x.hour)) {
        this.addHours(x.hour - this.getHours());
    }
    if (x.month !== -1 && Date.validateMonth(x.month)) {
        this.addMonths(x.month - this.getMonth());
    }
    if (x.year != -1 && Date.validateYear(x.year)) {
        this.addYears(x.year - this.getFullYear());
    }
    if (x.day != -1 && Date.validateDay(x.day, this.getFullYear(), this.getMonth())) {
        this.addDays(x.day - this.getDate());
    }
    if (x.timezone) {
        this.setTimezone(x.timezone);
    }
    if (x.timezoneOffset) {
        this.setTimezoneOffset(x.timezoneOffset);
    }
    return this;
};
Date.prototype.clearTime = function () {
    this.setHours(0);
    this.setMinutes(0);
    this.setSeconds(0);
    this.setMilliseconds(0);
    return this;
};
Date.prototype.isLeapYear = function () {
    var y = this.getFullYear();
    return (((y % 4 === 0) && (y % 100 !== 0)) || (y % 400 === 0));
};
Date.prototype.getDaysInMonth = function () {
    return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
};
Date.prototype.moveToDayOfWeek = function (day, orient) {
    var diff = (day - this.getDay() + 7 * (orient || +1)) % 7;
    return this.addDays((diff === 0) ? diff += 7 * (orient || +1) : diff);
};
Date.prototype.moveToMonth = function (month, orient) {
    var diff = (month - this.getMonth() + 12 * (orient || +1)) % 12;
    return this.addMonths((diff === 0) ? diff += 12 * (orient || +1) : diff);
};
Date.prototype.isDST = function () {
    console.log('isDST');
    return this.toString().match(/(E|C|M|P)(S|D)T/)[2] == "D";
};
Date.prototype.setTimezoneOffset = function (s) {
    var here = this.getTimezoneOffset(), there = Number(s) * -6 / 10;
    this.addMinutes(there - here);
    return this;
};
Date.prototype.setTimezone = function (s) {
    return this.setTimezoneOffset(Date.getTimezoneOffset(s));
};
Date.prototype.getDayName = function (abbrev) {
    return abbrev ? Date.CultureInfo.abbreviatedDayNames[this.getDay()] : Date.CultureInfo.dayNames[this.getDay()];
};
Date.prototype.getMonthName = function (abbrev) {
    return abbrev ? Date.CultureInfo.abbreviatedMonthNames[this.getMonth()] : Date.CultureInfo.monthNames[this.getMonth()];
};
Date.prototype._toString = Date.prototype.toString;
Date.prototype.toString = function (format) {
    var self = this;
    var p = function p(s) {
        return (s.toString().length == 1) ? "0" + s : s;
    };
    return format ? format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g, function (format) {
        switch (format) {
            case "hh":
                return p(self.getHours() < 13 ? self.getHours() : (self.getHours() - 12));
            case "h":
                return self.getHours() < 13 ? self.getHours() : (self.getHours() - 12);
            case "HH":
                return p(self.getHours());
            case "H":
                return self.getHours();
            case "mm":
                return p(self.getMinutes());
            case "m":
                return self.getMinutes();
            case "ss":
                return p(self.getSeconds());
            case "s":
                return self.getSeconds();
            case "yyyy":
                return self.getFullYear();
            case "yy":
                return self.getFullYear().toString().substring(2, 4);
            case "dddd":
                return self.getDayName();
            case "ddd":
                return self.getDayName(true);
            case "dd":
                return p(self.getDate());
            case "d":
                return self.getDate().toString();
            case "MMMM":
                return self.getMonthName();
            case "MMM":
                return self.getMonthName(true);
            case "MM":
                return p((self.getMonth() + 1));
            case "M":
                return self.getMonth() + 1;
            case "t":
                return self.getHours() < 12 ? Date.CultureInfo.amDesignator.substring(0, 1) : Date.CultureInfo.pmDesignator.substring(0, 1);
            case "tt":
                return self.getHours() < 12 ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;
            case "zzz":
            case "zz":
            case "z":
                return "";
        }
    }) : this._toString();
};
Date.now = function () {
    return new Date();
};
Date.today = function () {
    return Date.now().clearTime();
};
Date.prototype._orient = +1;
Date.prototype.next = function () {
    this._orient = +1;
    return this;
};
Date.prototype.last = Date.prototype.prev = Date.prototype.previous = function () {
    this._orient = -1;
    return this;
};
Date.prototype._is = false;
Date.prototype.is = function () {
    this._is = true;
    return this;
};
Number.prototype._dateElement = "day";
Number.prototype.fromNow = function () {
    var c = {};
    c[this._dateElement] = this;
    return Date.now().add(c);
};
Number.prototype.ago = function () {
    var c = {};
    c[this._dateElement] = this * -1;
    return Date.now().add(c);
};
String.prototype.startsWith = function (str) {
    return this.indexOf(str) == 0
};
String.prototype.trim = function () {
    return (this.replace(/^[\s\xA0]+/, "").replace(/[\s\xA0]+$/, ""))
};
String.prototype.format = function (str) {
    return (this.replace("{0}", str))
};
(function () {
    var $D = Date.prototype, $N = Number.prototype;
    var dx = ("sunday monday tuesday wednesday thursday friday saturday").split(/\s/), mx = ("january february march april may june july august september october november december").split(/\s/), px = ("Millisecond Second Minute Hour Day Week Month Year").split(/\s/), de;
    var df = function (n) {
        return function () {
            if (this._is) {
                this._is = false;
                return this.getDay() == n;
            }
            return this.moveToDayOfWeek(n, this._orient);
        };
    };
    for (var i = 0; i < dx.length; i++) {
        $D[dx[i]] = $D[dx[i].substring(0, 3)] = df(i);
    }
    var mf = function (n) {
        return function () {
            if (this._is) {
                this._is = false;
                return this.getMonth() === n;
            }
            return this.moveToMonth(n, this._orient);
        };
    };
    for (var j = 0; j < mx.length; j++) {
        $D[mx[j]] = $D[mx[j].substring(0, 3)] = mf(j);
    }
    var ef = function (j) {
        return function () {
            if (j.substring(j.length - 1) != "s") {
                j += "s";
            }
            return this["add" + j](this._orient);
        };
    };
    var nf = function (n) {
        return function () {
            this._dateElement = n;
            return this;
        };
    };
    for (var k = 0; k < px.length; k++) {
        de = px[k].toLowerCase();
        $D[de] = $D[de + "s"] = ef(px[k]);
        $N[de] = $N[de + "s"] = nf(de);
    }
}());

/*
 * JSizes - JQuery plugin v0.33
 *
 * Licensed under the revised BSD License.
 * Copyright 2008-2010 Bram Stein
 * All rights reserved.
 */
(function (b) {
    var a = function (c) {
        return parseInt(c, 10) || 0
    };
    b.each(["min", "max"], function (d, c) {
        b.fn[c + "Size"] = function (g) {
            var f, e;
            if (g) {
                if (g.width !== undefined) {
                    this.css(c + "-width", g.width)
                }
                if (g.height !== undefined) {
                    this.css(c + "-height", g.height)
                }
                return this
            } else {
                f = this.css(c + "-width");
                e = this.css(c + "-height");
                return { width: (c === "max" && (f === undefined || f === "none" || a(f) === -1) && Number.MAX_VALUE) || a(f), height: (c === "max" && (e === undefined || e === "none" || a(e) === -1) && Number.MAX_VALUE) || a(e) }
            }
        }
    });
    b.fn.isVisible = function () {
        return this.is(":visible")
    };
    b.each(["border", "margin", "padding"], function (d, c) {
        b.fn[c] = function (e) {
            if (e) {
                if (e.top !== undefined) {
                    this.css(c + "-top" + (c === "border" ? "-width" : ""), e.top)
                }
                if (e.bottom !== undefined) {
                    this.css(c + "-bottom" + (c === "border" ? "-width" : ""), e.bottom)
                }
                if (e.left !== undefined) {
                    this.css(c + "-left" + (c === "border" ? "-width" : ""), e.left)
                }
                if (e.right !== undefined) {
                    this.css(c + "-right" + (c === "border" ? "-width" : ""), e.right)
                }
                return this
            } else {
                return { top: a(this.css(c + "-top" + (c === "border" ? "-width" : ""))), bottom: a(this.css(c + "-bottom" + (c === "border" ? "-width" : ""))), left: a(this.css(c + "-left" + (c === "border" ? "-width" : ""))), right: a(this.css(c + "-right" + (c === "border" ? "-width" : ""))) }
            }
        }
    })
})(jQuery);

/*******************************************************************************
 jquery.mb.components
 Copyright (c) 2001-2010. Matteo Bicocchi (Pupunzi); Open lab srl, Firenze - Italy
 email: info@pupunzi.com
 site: http://pupunzi.com

 Licences: MIT, GPL
 http://www.opensource.org/licenses/mit-license.php
 http://www.gnu.org/licenses/gpl.html
 ******************************************************************************/
(function ($) {
    var self = $(this);
    $._dateSelector = function ($elem, a) {
        var _dateItems;
        var _options = { lastXDays: 7, onLoad: null, onChange: null };

        var addDays = function (date, daysToAdd) {
            var myDate = new Date(date);
            return new Date(myDate.setDate(myDate.getDate() + daysToAdd));
        };

        var addMonths = function (date, monthsToAdd) {
            var myDate = new Date(date);
            return new Date(myDate.setMonth(myDate.getMonth() + monthsToAdd));
        };

        var dateItems = _dateItems || function () {
            var todayStart = $.startOfToday();
            var todayEnd = $.endOfToday();
            var monthStart = new Date(new Date(todayEnd).setDate(1));
            var thisYear = new Date().getFullYear();

            var items = [];
            var translationStore = self[0].getTranslationStore();
            items.push({ name: translationStore.getString('Today'), fromDate: todayStart, toDate: todayEnd, code: 1 });
            items.push({ name: translationStore.getString('Yesterday'), fromDate: addDays(todayStart, -1), toDate: todayStart, code: -1 });
            items.push({ name: translationStore.getString('This Month'), fromDate: monthStart, toDate: todayEnd, code: 2 });
            items.push({ name: translationStore.getString('Last Month'), fromDate: new Date(monthStart).addMonths(-1), toDate: monthStart, code: -2 });
            items.push({ name: translationStore.getString('Last 7 Days'), fromDate: addDays(todayStart, -6), toDate: todayEnd, code: 7 });
            items.push({ name: translationStore.getString('Last 14 Days'), fromDate: addDays(todayStart, -13), toDate: todayEnd, code: 14 });
            items.push({ name: translationStore.getString('Last 30 Days'), fromDate: addDays(todayStart, -29), toDate: todayEnd, code: 30 });
            items.push({ name: translationStore.getString('Last 3 Months'), fromDate: addMonths(todayStart, -3), toDate: todayEnd, code: 90 });
            items.push({ name: translationStore.getString('Last 6 Months'), fromDate: addMonths(todayStart, -6), toDate: todayEnd, code: 182 });
            items.push({ name: translationStore.getString('Last 12 Months'), fromDate: addMonths(todayStart, -12), toDate: todayEnd, code: 365 });

            items.push({ name: thisYear - 1, fromDate: new Date(thisYear - 1, 0, 1), toDate: new Date(thisYear - 1, 11, 31), code: 3651 });
            items.push({ name: thisYear - 2, fromDate: new Date(thisYear - 2, 0, 1), toDate: new Date(thisYear - 2, 11, 31), code: 3652 });
            items.push({ name: thisYear - 3, fromDate: new Date(thisYear - 3, 0, 1), toDate: new Date(thisYear - 3, 11, 31), code: 3653 });

            _dateItems = items;
            return _dateItems;
        };

        var getSelectedDate = function ($select) {
            var val = $select.find('option:selected').text();
            var myDateOptions = dateItems();
            for (var i = 0; i < myDateOptions.length; i++) {
                if (val == myDateOptions[i].name) {
                    return myDateOptions[i];
                }
            }
            // Not found, return no date filter
            return myDateOptions[0];
        };

        function loadDropDown($elem, o) {
            var h = [];
            h.push('<select id="gms_dateList">');
            var dCode = o.lastXDays || _options.lastXDays;
            $.each(dateItems(), function (key, value) {
                var selectedCode = (dCode == value.code ? ' selected: selected' : '');
                h.push('<option value="' + value.name + '"' + selectedCode + ' >' + value.name + '</option>');
            });
            h.push('</select>');
            $elem.html(h.join(''));
            var $select = $elem.find('#gms_dateList');
            if (o.onChange) {
                $select.on("change", function () {
                    var sd = getSelectedDate($select);
                    o.onChange(sd);
                });
            }
            if (o.onLoad) {
                o.onLoad(self);
            }
            return self;
        }

        // Execution Point
        if (!a || a.length == 0) {
            a = _options;
        }
        if (Object.prototype.toString.call(a) === '[object Object]') {
            return loadDropDown($elem, a);
        }
        else if (a == "minDate") {
            return $.minDate();
        }
        else {
            return getSelectedDate($elem.find('#gms_dateList'))[a];
        }
    };

    $.fn.dateSelector = function (a) {
        return $._dateSelector($(this), a);
    };

    $.minDate = function () {
        return MyTools.DateTime.minDate();
    };

    $.maxDate = function () {
        return MyTools.DateTime.maxDate();
    };

    $.startOfToday = function () {
        var now = new Date();
        var year = now.getYear();
        // IE8 hack
        if (year < 2000) {
            year += 1900;
        }
        return new Date(year, now.getMonth(), now.getDate(), 0, 0, 0);
    };

    $.endOfToday = function () {
        var now = new Date();
        // IE8 hack
        var year = now.getYear();
        if (year < 2000) {
            year += 1900;
        }
        var dt = new Date(year, now.getMonth(), now.getDate(), 0, 0, 0);
        return new Date(dt.setDate(dt.getDate() + 1));
    };

    $.last6Months = function () {
        var md = $.endOfToday();
        return new Date(md.setMonth(md.getMonth() - 6));
    };

    $.last12Months = function () {
        var md = $.endOfToday();
        return new Date(md.setMonth(md.getMonth() - 12));
    };

})(jQuery);

(function (a) {
    a.fn.hoverIntent = function (k, j) {
        var l = { sensitivity: 7, interval: 100, timeout: 0 };
        l = a.extend(l, j ? { over: k, out: j } : k);
        var n, m, h, d;
        var e = function (f) {
            n = f.pageX;
            m = f.pageY
        };
        var c = function (g, f) {
            f.hoverIntent_t = clearTimeout(f.hoverIntent_t);
            if ((Math.abs(h - n) + Math.abs(d - m)) < l.sensitivity) {
                a(f).off("mousemove", e);
                f.hoverIntent_s = 1;
                return l.over.apply(f, [g])
            } else {
                h = n;
                d = m;
                f.hoverIntent_t = setTimeout(function () {
                    c(g, f)
                }, l.interval)
            }
        };
        var i = function (g, f) {
            f.hoverIntent_t = clearTimeout(f.hoverIntent_t);
            f.hoverIntent_s = 0;
            return l.out.apply(f, [g])
        };
        var b = function (q) {
            var o = (q.type == "mouseover" ? q.fromElement : q.toElement) || q.relatedTarget;
            while (o && o != this) {
                try {
                    o = o.parentNode
                } catch (q) {
                    o = this
                }
            }
            if (o == this) {
                return false
            }
            var g = jQuery.extend({}, q);
            var f = this;
            if (f.hoverIntent_t) {
                f.hoverIntent_t = clearTimeout(f.hoverIntent_t)
            }
            if (q.type == "mouseover") {
                h = g.pageX;
                d = g.pageY;
                a(f).on("mousemove", e);
                if (f.hoverIntent_s != 1) {
                    f.hoverIntent_t = setTimeout(function () {
                        c(g, f)
                    }, l.interval)
                }
            } else {
                a(f).off("mousemove", e);
                if (f.hoverIntent_s == 1) {
                    f.hoverIntent_t = setTimeout(function () {
                        i(g, f)
                    }, l.timeout)
                }
            }
        };
        return this.on("mouseover", b).on("mouseout", b)
    }
})(jQuery);

/*
 sessvars ver 1.01
 - JavaScript based session object
 copyright 2008 Thomas Frank
 This EULA grants you the following rights:
 Installation and Use. You may install and use an unlimited number of copies of the SOFTWARE PRODUCT.
 Reproduction and Distribution. You may reproduce and distribute an unlimited number of copies of the SOFTWARE PRODUCT either in whole or in part; each copy should include all copyright and trademark notices, and shall be accompanied by a copy of this EULA. Copies of the SOFTWARE PRODUCT may be distributed as a standalone product or included with your own product.
 Commercial Use. You may sell for profit and freely distribute scripts and/or compiled scripts that were created with the SOFTWARE PRODUCT.
 v 1.0 --> 1.01
 sanitizer added to toObject-method & includeFunctions flag now defaults to false
 */
sessvars = function () {

    var x = {};

    x.$ = {
        prefs: {
            memLimit: 2000,
            autoFlush: true,
            crossDomain: false,
            includeProtos: false,
            includeFunctions: false
        },
        parent: x,
        clearMem: function () {
            for (var i in this.parent) {
                if (i != "$") {
                    this.parent[i] = undefined
                }
            }
            this.flush();
        },
        usedMem: function () {
            x = {};
            return Math.round(this.flush(x) / 1024);
        },
        usedMemPercent: function () {
            return Math.round(this.usedMem() / this.prefs.memLimit);
        },
        flush: function (x) {
            var y, o = {}, j = this.$$;
            x = x || top;
            for (var i in this.parent) {
                o[i] = this.parent[i]
            }
            ;
            o.$ = this.prefs;
            j.includeProtos = this.prefs.includeProtos;
            j.includeFunctions = this.prefs.includeFunctions;
            y = this.$$.make(o);
            if (x != top) {
                return y.length
            }
            if (y.length / 1024 > this.prefs.memLimit) {
                return false
            }
            x.name = y;
            return true;
        },
        getDomain: function () {
            var l = location.href;
            l = l.split("///").join("//");
            l = l.substring(l.indexOf("://") + 3).split("/")[0];
            while (l.split(".").length > 2) {
                l = l.substring(l.indexOf(".") + 1)
            }
            return l
        },
        init: function () {
            var o = {}, t = this;
            try {
                o = this.$$.toObject(top.name)
            } catch (e) {
                o = {}
            }
            this.prefs = o.$ || t.prefs;
            if (this.prefs.crossDomain || this.prefs.currentDomain == this.getDomain()) {
                for (var i in o) {
                    this.parent[i] = o[i]
                }
            }
            else {
                this.prefs.currentDomain = this.getDomain();
            }
            this.parent.$ = t;
            t.flush();
            var f = function () {
                if (t.prefs.autoFlush) {
                    t.flush()
                }
            };
            if (window["addEventListener"]) {
                addEventListener("unload", f, false)
            }
            else if (window["attachEvent"]) {
                window.attachEvent("onunload", f)
            }
            else {
                this.prefs.autoFlush = false
            }
        }
    };
    x.$.$$ = {
        compactOutput: false,
        includeProtos: false,
        includeFunctions: false,
        detectCirculars: true,
        restoreCirculars: true,
        make: function (arg, restore) {
            this.restore = restore;
            this.mem = [];
            this.pathMem = [];
            return this.toJsonStringArray(arg).join('');
        },
        toObject: function (x) {
            if (!this.cleaner) {
                try {
                    this.cleaner = new RegExp('^("(\\\\.|[^"\\\\\\n\\r])*?"|[,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t])+?$')
                }
                catch (a) {
                    this.cleaner = /^(true|false|null|\[.*\]|\{.*\}|".*"|\d+|\d+\.\d+)$/
                }
            }
            if (!this.cleaner.test(x)) {
                return {}
            }
            this.myObj = JSON.parse(x);
            if (!this.restoreCirculars || !alert) {
                return this.myObj
            }
            this.restoreCode = [];
            this.make(this.myObj, true);
            var r = this.restoreCode.join(";") + ";";
            r = r.replace(/\\W([0-9]{1,})(\\W)/g, "[$1]$2").replace(/\\.\\;/g, ";");
            return this.myObj
        },
        toJsonStringArray: function (arg, out) {
            if (!out) {
                this.path = []
            }
            out = out || [];
            var u; // undefined
            switch (typeof arg) {
                case 'object':
                    this.lastObj = arg;
                    if (this.detectCirculars) {
                        var m = this.mem;
                        var n = this.pathMem;
                        for (var i = 0; i < m.length; i++) {
                            if (arg == m[i]) {
                                out.push('"JSONcircRef:' + n[i] + '"');
                                return out
                            }
                        }
                        m.push(arg);
                        n.push(this.path.join("."));
                    }
                    if (arg) {
                        if (arg.constructor == Array) {
                            out.push('[');
                            for (var i = 0; i < arg.length; ++i) {
                                this.path.push(i);
                                if (i > 0)
                                    out.push(',\n');
                                this.toJsonStringArray(arg[i], out);
                                this.path.pop();
                            }
                            out.push(']');
                            return out;
                        } else if (typeof arg.toString != 'undefined') {
                            out.push('{');
                            var first = true;
                            for (var i in arg) {
                                if (!this.includeProtos && arg[i] == arg.constructor.prototype[i]) {
                                    continue
                                }
                                this.path.push(i);
                                var curr = out.length;
                                if (!first)
                                    out.push(this.compactOutput ? ',' : ',\n');
                                this.toJsonStringArray(i, out);
                                out.push(':');
                                this.toJsonStringArray(arg[i], out);
                                if (out[out.length - 1] == u)
                                    out.splice(curr, out.length - curr);
                                else
                                    first = false;
                                this.path.pop();
                            }
                            out.push('}');
                            return out;
                        }
                        return out;
                    }
                    out.push('null');
                    return out;
                case 'unknown':
                case 'undefined':
                case 'function':
                    if (!this.includeFunctions) {
                        out.push(u);
                        return out
                    }
                    arg = "JSONincludedFunc:" + arg;
                    out.push('"');
                    var a = ['\n', '\\n', '\r', '\\r', '"', '\\"'];
                    arg += "";
                    for (var i = 0; i < 6; i += 2) {
                        arg = arg.split(a[i]).join(a[i + 1])
                    }
                    out.push(arg);
                    out.push('"');
                    return out;
                case 'string':
                    if (this.restore && arg.indexOf("JSONcircRef:") == 0) {
                        this.restoreCode.push('this.myObj.' + this.path.join(".") + "=" + arg.split("JSONcircRef:").join("this.myObj."));
                    }
                    out.push('"');
                    var a = ['\n', '\\n', '\r', '\\r', '"', '\\"'];
                    arg += "";
                    for (var i = 0; i < 6; i += 2) {
                        arg = arg.split(a[i]).join(a[i + 1])
                    }
                    out.push(arg);
                    out.push('"');
                    return out;
                default:
                    out.push(String(arg));
                    return out;
            }
        }
    };
    x.$.init();
    return x;
}();

/*
Useded to encode value as html and prevent possible XXS injection
*/
encodeHtml = function (e) { return e.replace(/[^]/g, function (e) { return "&#" + e.charCodeAt(0) + ";" }) }

